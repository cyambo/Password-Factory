//
//  StyleKit.swift
//  Password Factory
//
//  Created by Cristiana Yambo on 12/17/17.
//  Copyright Â© 2017 Password Factory. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfMenuIcon: UIImage?
        static var menuIconTargets: [AnyObject]?
        static var imageOfDeleteButon: UIImage?
        static var deleteButonTargets: [AnyObject]?
        static var imageOfPasswordHeader: UIImage?
        static var passwordHeaderTargets: [AnyObject]?
        static var imageOfPasswordStrengthHeader: UIImage?
        static var passwordStrengthHeaderTargets: [AnyObject]?
        static var imageOfPasswordTypeHeader: UIImage?
        static var passwordTypeHeaderTargets: [AnyObject]?
        static var imageOfGradientBackground: UIImage?
        static var gradientBackgroundTargets: [AnyObject]?
        static var imageOfLowercase: UIImage?
        static var lowercaseTargets: [AnyObject]?
        static var imageOfMixedCase: UIImage?
        static var mixedCaseTargets: [AnyObject]?
        static var imageOfTitleCase: UIImage?
        static var titleCaseTargets: [AnyObject]?
        static var imageOfUppercase: UIImage?
        static var uppercaseTargets: [AnyObject]?
        static var imageOfCharacterSeparator: UIImage?
        static var characterSeparatorTargets: [AnyObject]?
        static var imageOfEmojiSeparator: UIImage?
        static var emojiSeparatorTargets: [AnyObject]?
        static var imageOfHyphenSeparator: UIImage?
        static var hyphenSeparatorTargets: [AnyObject]?
        static var imageOfNumberSeparator: UIImage?
        static var numberSeparatorTargets: [AnyObject]?
        static var imageOfRandomSeparator: UIImage?
        static var randomSeparatorTargets: [AnyObject]?
        static var imageOfSpaceSeparator: UIImage?
        static var spaceSeparatorTargets: [AnyObject]?
        static var imageOfSymbolSeparator: UIImage?
        static var symbolSeparatorTargets: [AnyObject]?
        static var imageOfUnderscoreSeparator: UIImage?
        static var underscoreSeparatorTargets: [AnyObject]?
        static var imageOfNoSeparator: UIImage?
        static var noSeparatorTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawStrengthMeter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 343, height: 32), resizing: ResizingBehavior = .aspectFit, strengthColor: UIColor = UIColor(red: 0.887, green: 0.168, blue: 0.090, alpha: 1.000), strength: CGFloat = 0.25, size: CGSize = CGSize(width: 343, height: 32)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 343, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 343, y: resizedFrame.height / 32)


        //// Strength Level Drawing
        context.saveGState()
        context.scaleBy(x: strength, y: 1)

        let strengthLevelPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: size.width, height: size.height))
        strengthColor.setFill()
        strengthLevelPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPreferencesButton(strokeColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9.5, y: 12.7))
        bezierPath.addCurve(to: CGPoint(x: 6.3, y: 9.5), controlPoint1: CGPoint(x: 7.74, y: 12.7), controlPoint2: CGPoint(x: 6.3, y: 11.26))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 6.3), controlPoint1: CGPoint(x: 6.3, y: 7.74), controlPoint2: CGPoint(x: 7.74, y: 6.3))
        bezierPath.addCurve(to: CGPoint(x: 12.7, y: 9.5), controlPoint1: CGPoint(x: 11.26, y: 6.3), controlPoint2: CGPoint(x: 12.7, y: 7.74))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 12.7), controlPoint1: CGPoint(x: 12.7, y: 11.26), controlPoint2: CGPoint(x: 11.26, y: 12.7))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 17.78, y: 10.74))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10.41), controlPoint1: CGPoint(x: 17.9, y: 10.69), controlPoint2: CGPoint(x: 18, y: 10.54))
        bezierPath.addLine(to: CGPoint(x: 18, y: 8.59))
        bezierPath.addCurve(to: CGPoint(x: 17.78, y: 8.26), controlPoint1: CGPoint(x: 18, y: 8.46), controlPoint2: CGPoint(x: 17.9, y: 8.31))
        bezierPath.addLine(to: CGPoint(x: 16.11, y: 7.59))
        bezierPath.addCurve(to: CGPoint(x: 15.81, y: 7.28), controlPoint1: CGPoint(x: 15.99, y: 7.54), controlPoint2: CGPoint(x: 15.85, y: 7.4))
        bezierPath.addLine(to: CGPoint(x: 15.53, y: 6.61))
        bezierPath.addCurve(to: CGPoint(x: 15.52, y: 6.18), controlPoint1: CGPoint(x: 15.47, y: 6.49), controlPoint2: CGPoint(x: 15.47, y: 6.3))
        bezierPath.addLine(to: CGPoint(x: 16.23, y: 4.52))
        bezierPath.addCurve(to: CGPoint(x: 16.16, y: 4.14), controlPoint1: CGPoint(x: 16.28, y: 4.4), controlPoint2: CGPoint(x: 16.25, y: 4.23))
        bezierPath.addLine(to: CGPoint(x: 14.86, y: 2.84))
        bezierPath.addCurve(to: CGPoint(x: 14.48, y: 2.77), controlPoint1: CGPoint(x: 14.77, y: 2.75), controlPoint2: CGPoint(x: 14.6, y: 2.72))
        bezierPath.addLine(to: CGPoint(x: 12.82, y: 3.48))
        bezierPath.addCurve(to: CGPoint(x: 12.39, y: 3.47), controlPoint1: CGPoint(x: 12.7, y: 3.53), controlPoint2: CGPoint(x: 12.51, y: 3.53))
        bezierPath.addLine(to: CGPoint(x: 11.72, y: 3.19))
        bezierPath.addCurve(to: CGPoint(x: 11.41, y: 2.89), controlPoint1: CGPoint(x: 11.6, y: 3.15), controlPoint2: CGPoint(x: 11.46, y: 3.01))
        bezierPath.addLine(to: CGPoint(x: 10.74, y: 1.22))
        bezierPath.addCurve(to: CGPoint(x: 10.41, y: 1), controlPoint1: CGPoint(x: 10.69, y: 1.1), controlPoint2: CGPoint(x: 10.54, y: 1))
        bezierPath.addLine(to: CGPoint(x: 8.59, y: 1))
        bezierPath.addCurve(to: CGPoint(x: 8.26, y: 1.22), controlPoint1: CGPoint(x: 8.46, y: 1), controlPoint2: CGPoint(x: 8.31, y: 1.1))
        bezierPath.addLine(to: CGPoint(x: 7.59, y: 2.89))
        bezierPath.addCurve(to: CGPoint(x: 7.28, y: 3.19), controlPoint1: CGPoint(x: 7.54, y: 3.01), controlPoint2: CGPoint(x: 7.4, y: 3.15))
        bezierPath.addLine(to: CGPoint(x: 6.61, y: 3.47))
        bezierPath.addCurve(to: CGPoint(x: 6.18, y: 3.48), controlPoint1: CGPoint(x: 6.49, y: 3.53), controlPoint2: CGPoint(x: 6.3, y: 3.53))
        bezierPath.addLine(to: CGPoint(x: 4.52, y: 2.77))
        bezierPath.addCurve(to: CGPoint(x: 4.14, y: 2.84), controlPoint1: CGPoint(x: 4.4, y: 2.72), controlPoint2: CGPoint(x: 4.23, y: 2.75))
        bezierPath.addLine(to: CGPoint(x: 2.84, y: 4.14))
        bezierPath.addCurve(to: CGPoint(x: 2.77, y: 4.52), controlPoint1: CGPoint(x: 2.75, y: 4.23), controlPoint2: CGPoint(x: 2.72, y: 4.4))
        bezierPath.addLine(to: CGPoint(x: 3.48, y: 6.18))
        bezierPath.addCurve(to: CGPoint(x: 3.47, y: 6.61), controlPoint1: CGPoint(x: 3.53, y: 6.3), controlPoint2: CGPoint(x: 3.53, y: 6.49))
        bezierPath.addLine(to: CGPoint(x: 3.19, y: 7.28))
        bezierPath.addCurve(to: CGPoint(x: 2.89, y: 7.59), controlPoint1: CGPoint(x: 3.15, y: 7.4), controlPoint2: CGPoint(x: 3.01, y: 7.54))
        bezierPath.addLine(to: CGPoint(x: 1.22, y: 8.26))
        bezierPath.addCurve(to: CGPoint(x: 1, y: 8.59), controlPoint1: CGPoint(x: 1.1, y: 8.31), controlPoint2: CGPoint(x: 1, y: 8.46))
        bezierPath.addLine(to: CGPoint(x: 1, y: 10.41))
        bezierPath.addCurve(to: CGPoint(x: 1.22, y: 10.74), controlPoint1: CGPoint(x: 1, y: 10.54), controlPoint2: CGPoint(x: 1.1, y: 10.69))
        bezierPath.addLine(to: CGPoint(x: 2.89, y: 11.41))
        bezierPath.addCurve(to: CGPoint(x: 3.19, y: 11.72), controlPoint1: CGPoint(x: 3.01, y: 11.46), controlPoint2: CGPoint(x: 3.15, y: 11.6))
        bezierPath.addLine(to: CGPoint(x: 3.47, y: 12.39))
        bezierPath.addCurve(to: CGPoint(x: 3.48, y: 12.82), controlPoint1: CGPoint(x: 3.53, y: 12.51), controlPoint2: CGPoint(x: 3.53, y: 12.7))
        bezierPath.addLine(to: CGPoint(x: 2.77, y: 14.48))
        bezierPath.addCurve(to: CGPoint(x: 2.84, y: 14.86), controlPoint1: CGPoint(x: 2.72, y: 14.6), controlPoint2: CGPoint(x: 2.75, y: 14.77))
        bezierPath.addLine(to: CGPoint(x: 4.14, y: 16.16))
        bezierPath.addCurve(to: CGPoint(x: 4.52, y: 16.23), controlPoint1: CGPoint(x: 4.23, y: 16.25), controlPoint2: CGPoint(x: 4.4, y: 16.28))
        bezierPath.addLine(to: CGPoint(x: 6.18, y: 15.52))
        bezierPath.addCurve(to: CGPoint(x: 6.61, y: 15.53), controlPoint1: CGPoint(x: 6.3, y: 15.47), controlPoint2: CGPoint(x: 6.49, y: 15.47))
        bezierPath.addLine(to: CGPoint(x: 7.28, y: 15.81))
        bezierPath.addCurve(to: CGPoint(x: 7.59, y: 16.11), controlPoint1: CGPoint(x: 7.4, y: 15.85), controlPoint2: CGPoint(x: 7.54, y: 15.99))
        bezierPath.addLine(to: CGPoint(x: 8.26, y: 17.78))
        bezierPath.addCurve(to: CGPoint(x: 8.59, y: 18), controlPoint1: CGPoint(x: 8.31, y: 17.9), controlPoint2: CGPoint(x: 8.46, y: 18))
        bezierPath.addLine(to: CGPoint(x: 10.41, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 10.74, y: 17.78), controlPoint1: CGPoint(x: 10.54, y: 18), controlPoint2: CGPoint(x: 10.69, y: 17.9))
        bezierPath.addLine(to: CGPoint(x: 11.41, y: 16.11))
        bezierPath.addCurve(to: CGPoint(x: 11.72, y: 15.81), controlPoint1: CGPoint(x: 11.46, y: 15.99), controlPoint2: CGPoint(x: 11.6, y: 15.85))
        bezierPath.addLine(to: CGPoint(x: 12.39, y: 15.53))
        bezierPath.addCurve(to: CGPoint(x: 12.82, y: 15.52), controlPoint1: CGPoint(x: 12.51, y: 15.47), controlPoint2: CGPoint(x: 12.7, y: 15.47))
        bezierPath.addLine(to: CGPoint(x: 14.48, y: 16.23))
        bezierPath.addCurve(to: CGPoint(x: 14.86, y: 16.16), controlPoint1: CGPoint(x: 14.6, y: 16.28), controlPoint2: CGPoint(x: 14.77, y: 16.25))
        bezierPath.addLine(to: CGPoint(x: 16.16, y: 14.86))
        bezierPath.addCurve(to: CGPoint(x: 16.23, y: 14.48), controlPoint1: CGPoint(x: 16.25, y: 14.77), controlPoint2: CGPoint(x: 16.28, y: 14.6))
        bezierPath.addLine(to: CGPoint(x: 15.52, y: 12.82))
        bezierPath.addCurve(to: CGPoint(x: 15.53, y: 12.39), controlPoint1: CGPoint(x: 15.47, y: 12.7), controlPoint2: CGPoint(x: 15.47, y: 12.51))
        bezierPath.addLine(to: CGPoint(x: 15.81, y: 11.72))
        bezierPath.addCurve(to: CGPoint(x: 16.11, y: 11.41), controlPoint1: CGPoint(x: 15.85, y: 11.6), controlPoint2: CGPoint(x: 15.99, y: 11.46))
        bezierPath.addLine(to: CGPoint(x: 17.78, y: 10.74))
        bezierPath.close()
        strokeColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    @objc dynamic public class func drawMenuIcon() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 23.74, y: 21.66))
        bezierPath.addLine(to: CGPoint(x: 16.84, y: 14.76))
        bezierPath.addCurve(to: CGPoint(x: 17.54, y: 12.82), controlPoint1: CGPoint(x: 17.21, y: 14.14), controlPoint2: CGPoint(x: 17.44, y: 13.48))
        bezierPath.addCurve(to: CGPoint(x: 17.58, y: 12.59), controlPoint1: CGPoint(x: 17.56, y: 12.74), controlPoint2: CGPoint(x: 17.57, y: 12.66))
        bezierPath.addCurve(to: CGPoint(x: 17.58, y: 12.53), controlPoint1: CGPoint(x: 17.58, y: 12.57), controlPoint2: CGPoint(x: 17.58, y: 12.55))
        bezierPath.addCurve(to: CGPoint(x: 17.37, y: 10.63), controlPoint1: CGPoint(x: 17.64, y: 11.87), controlPoint2: CGPoint(x: 17.57, y: 11.22))
        bezierPath.addCurve(to: CGPoint(x: 16.45, y: 9.16), controlPoint1: CGPoint(x: 17.18, y: 10.08), controlPoint2: CGPoint(x: 16.87, y: 9.58))
        bezierPath.addCurve(to: CGPoint(x: 12.86, y: 8.05), controlPoint1: CGPoint(x: 15.51, y: 8.22), controlPoint2: CGPoint(x: 14.2, y: 7.86))
        bezierPath.addCurve(to: CGPoint(x: 9.68, y: 9.68), controlPoint1: CGPoint(x: 11.74, y: 8.2), controlPoint2: CGPoint(x: 10.6, y: 8.75))
        bezierPath.addCurve(to: CGPoint(x: 8.07, y: 14.31), controlPoint1: CGPoint(x: 8.35, y: 11), controlPoint2: CGPoint(x: 7.8, y: 12.77))
        bezierPath.addCurve(to: CGPoint(x: 9.16, y: 16.45), controlPoint1: CGPoint(x: 8.2, y: 15.11), controlPoint2: CGPoint(x: 8.57, y: 15.86))
        bezierPath.addCurve(to: CGPoint(x: 9.36, y: 16.64), controlPoint1: CGPoint(x: 9.22, y: 16.51), controlPoint2: CGPoint(x: 9.29, y: 16.58))
        bezierPath.addCurve(to: CGPoint(x: 12.47, y: 17.59), controlPoint1: CGPoint(x: 10.21, y: 17.37), controlPoint2: CGPoint(x: 11.33, y: 17.68))
        bezierPath.addCurve(to: CGPoint(x: 14.06, y: 17.19), controlPoint1: CGPoint(x: 13, y: 17.54), controlPoint2: CGPoint(x: 13.54, y: 17.41))
        bezierPath.addLine(to: CGPoint(x: 14.36, y: 17.49))
        bezierPath.addCurve(to: CGPoint(x: 14.36, y: 18.53), controlPoint1: CGPoint(x: 14.36, y: 17.49), controlPoint2: CGPoint(x: 13.84, y: 18.01))
        bezierPath.addCurve(to: CGPoint(x: 15.41, y: 18.53), controlPoint1: CGPoint(x: 14.89, y: 19.05), controlPoint2: CGPoint(x: 15.41, y: 18.53))
        bezierPath.addLine(to: CGPoint(x: 15.93, y: 18.01))
        bezierPath.addLine(to: CGPoint(x: 17.75, y: 19.83))
        bezierPath.addLine(to: CGPoint(x: 18.79, y: 19.83))
        bezierPath.addLine(to: CGPoint(x: 19.05, y: 20.09))
        bezierPath.addLine(to: CGPoint(x: 19.05, y: 21.14))
        bezierPath.addLine(to: CGPoint(x: 21.14, y: 23.22))
        bezierPath.addLine(to: CGPoint(x: 21.66, y: 23.22))
        bezierPath.addLine(to: CGPoint(x: 22.44, y: 24))
        bezierPath.addLine(to: CGPoint(x: 24, y: 24))
        bezierPath.addLine(to: CGPoint(x: 23.74, y: 21.66))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 11.22, y: 11.22))
        bezierPath.addCurve(to: CGPoint(x: 12.78, y: 11.22), controlPoint1: CGPoint(x: 11.65, y: 10.79), controlPoint2: CGPoint(x: 12.35, y: 10.79))
        bezierPath.addCurve(to: CGPoint(x: 12.78, y: 12.78), controlPoint1: CGPoint(x: 13.21, y: 11.65), controlPoint2: CGPoint(x: 13.21, y: 12.35))
        bezierPath.addCurve(to: CGPoint(x: 11.22, y: 12.78), controlPoint1: CGPoint(x: 12.35, y: 13.21), controlPoint2: CGPoint(x: 11.65, y: 13.21))
        bezierPath.addCurve(to: CGPoint(x: 11.22, y: 11.22), controlPoint1: CGPoint(x: 10.79, y: 12.35), controlPoint2: CGPoint(x: 10.79, y: 11.65))
        bezierPath.close()
        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    @objc dynamic public class func drawStrengthBox(strengthColor: UIColor = UIColor(red: 0.887, green: 0.168, blue: 0.090, alpha: 1.000)) {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 22, height: 22))
        strengthColor.setFill()
        rectanglePath.fill()
    }

    @objc dynamic public class func drawAdvancedType(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit, typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 3.7, y: 3.75)
        context.rotate(by: -30 * CGFloat.pi/180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 0, y: -2.25))
        polygonPath.addLine(to: CGPoint(x: 1.95, y: -1.12))
        polygonPath.addLine(to: CGPoint(x: 1.95, y: 1.12))
        polygonPath.addLine(to: CGPoint(x: 0, y: 2.25))
        polygonPath.addLine(to: CGPoint(x: -1.95, y: 1.13))
        polygonPath.addLine(to: CGPoint(x: -1.95, y: -1.12))
        polygonPath.close()
        typeColor.setStroke()
        polygonPath.lineWidth = 1
        polygonPath.stroke()

        context.restoreGState()


        //// Polygon 2 Drawing
        context.saveGState()
        context.translateBy(x: 3.45, y: 15.4)
        context.rotate(by: -30 * CGFloat.pi/180)

        let polygon2Path = UIBezierPath()
        polygon2Path.move(to: CGPoint(x: 0, y: -2.25))
        polygon2Path.addLine(to: CGPoint(x: 1.95, y: -1.12))
        polygon2Path.addLine(to: CGPoint(x: 1.95, y: 1.12))
        polygon2Path.addLine(to: CGPoint(x: 0, y: 2.25))
        polygon2Path.addLine(to: CGPoint(x: -1.95, y: 1.13))
        polygon2Path.addLine(to: CGPoint(x: -1.95, y: -1.12))
        polygon2Path.close()
        typeColor.setStroke()
        polygon2Path.lineWidth = 1
        polygon2Path.stroke()

        context.restoreGState()


        //// Polygon 3 Drawing
        context.saveGState()
        context.translateBy(x: 11.75, y: 4)
        context.rotate(by: -30 * CGFloat.pi/180)

        let polygon3Path = UIBezierPath()
        polygon3Path.move(to: CGPoint(x: 0, y: -2.25))
        polygon3Path.addLine(to: CGPoint(x: 1.95, y: -1.12))
        polygon3Path.addLine(to: CGPoint(x: 1.95, y: 1.12))
        polygon3Path.addLine(to: CGPoint(x: 0, y: 2.25))
        polygon3Path.addLine(to: CGPoint(x: -1.95, y: 1.13))
        polygon3Path.addLine(to: CGPoint(x: -1.95, y: -1.12))
        polygon3Path.close()
        typeColor.setStroke()
        polygon3Path.lineWidth = 1
        polygon3Path.stroke()

        context.restoreGState()


        //// Polygon 4 Drawing
        context.saveGState()
        context.translateBy(x: 7.1, y: 10.35)
        context.rotate(by: -30 * CGFloat.pi/180)

        let polygon4Path = UIBezierPath()
        polygon4Path.move(to: CGPoint(x: 0, y: -2.25))
        polygon4Path.addLine(to: CGPoint(x: 1.95, y: -1.12))
        polygon4Path.addLine(to: CGPoint(x: 1.95, y: 1.12))
        polygon4Path.addLine(to: CGPoint(x: 0, y: 2.25))
        polygon4Path.addLine(to: CGPoint(x: -1.95, y: 1.13))
        polygon4Path.addLine(to: CGPoint(x: -1.95, y: -1.12))
        polygon4Path.close()
        typeColor.setStroke()
        polygon4Path.lineWidth = 1
        polygon4Path.stroke()

        context.restoreGState()


        //// Polygon 5 Drawing
        context.saveGState()
        context.translateBy(x: 10.65, y: 16.25)
        context.rotate(by: -30 * CGFloat.pi/180)

        let polygon5Path = UIBezierPath()
        polygon5Path.move(to: CGPoint(x: 0, y: -2.25))
        polygon5Path.addLine(to: CGPoint(x: 1.95, y: -1.12))
        polygon5Path.addLine(to: CGPoint(x: 1.95, y: 1.12))
        polygon5Path.addLine(to: CGPoint(x: 0, y: 2.25))
        polygon5Path.addLine(to: CGPoint(x: -1.95, y: 1.13))
        polygon5Path.addLine(to: CGPoint(x: -1.95, y: -1.12))
        polygon5Path.close()
        typeColor.setStroke()
        polygon5Path.lineWidth = 1
        polygon5Path.stroke()

        context.restoreGState()


        //// Polygon 6 Drawing
        context.saveGState()
        context.translateBy(x: 16.55, y: 12.25)
        context.rotate(by: -30 * CGFloat.pi/180)

        let polygon6Path = UIBezierPath()
        polygon6Path.move(to: CGPoint(x: 0, y: -2.25))
        polygon6Path.addLine(to: CGPoint(x: 1.95, y: -1.12))
        polygon6Path.addLine(to: CGPoint(x: 1.95, y: 1.12))
        polygon6Path.addLine(to: CGPoint(x: 0, y: 2.25))
        polygon6Path.addLine(to: CGPoint(x: -1.95, y: 1.13))
        polygon6Path.addLine(to: CGPoint(x: -1.95, y: -1.12))
        polygon6Path.close()
        typeColor.setStroke()
        polygon6Path.lineWidth = 1
        polygon6Path.stroke()

        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.61, y: 5.98))
        bezierPath.addLine(to: CGPoint(x: 8.23, y: 8.38))
        typeColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 4.81, y: 5.7))
        bezier2Path.addLine(to: CGPoint(x: 5.97, y: 8.38))
        typeColor.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 5.73, y: 15.38))
        bezier3Path.addLine(to: CGPoint(x: 8.4, y: 16.26))
        typeColor.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 12.93, y: 16.26))
        bezier4Path.addLine(to: CGPoint(x: 15.41, y: 14.22))
        typeColor.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 8.23, y: 12.3))
        bezier5Path.addLine(to: CGPoint(x: 9.53, y: 14.3))
        typeColor.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPassphraseType(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit, typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 2.4, y: 1.9, width: 13.6, height: 2.4), cornerRadius: 1.2)
        typeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 4, y: 11.1, width: 14.8, height: 2.4), cornerRadius: 1.2)
        typeColor.setStroke()
        rectangle2Path.lineWidth = 1
        rectangle2Path.stroke()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 1.2, y: 6.5, width: 17.6, height: 2.4), cornerRadius: 1.2)
        typeColor.setStroke()
        rectangle3Path.lineWidth = 1
        rectangle3Path.stroke()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: 1.6, y: 15.7, width: 12, height: 2.4), cornerRadius: 1.2)
        typeColor.setStroke()
        rectangle4Path.lineWidth = 1
        rectangle4Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPatternType(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit, typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 13.55, y: 13.55, width: 4.3, height: 4.3))
        typeColor.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 13.55, y: 7.85, width: 4.3, height: 4.3))
        typeColor.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 13.55, y: 2.15, width: 4.3, height: 4.3))
        typeColor.setStroke()
        oval3Path.lineWidth = 1
        oval3Path.stroke()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 7.85, y: 13.55, width: 4.3, height: 4.3))
        typeColor.setStroke()
        oval4Path.lineWidth = 1
        oval4Path.stroke()


        //// Oval 5 Drawing
        let oval5Path = UIBezierPath(ovalIn: CGRect(x: 7.85, y: 7.85, width: 4.3, height: 4.3))
        typeColor.setStroke()
        oval5Path.lineWidth = 1
        oval5Path.stroke()


        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: 7.85, y: 2.15, width: 4.3, height: 4.3))
        typeColor.setStroke()
        oval6Path.lineWidth = 1
        oval6Path.stroke()


        //// Oval 7 Drawing
        let oval7Path = UIBezierPath(ovalIn: CGRect(x: 2.15, y: 13.55, width: 4.3, height: 4.3))
        typeColor.setStroke()
        oval7Path.lineWidth = 1
        oval7Path.stroke()


        //// Oval 8 Drawing
        let oval8Path = UIBezierPath(ovalIn: CGRect(x: 2.15, y: 7.85, width: 4.3, height: 4.3))
        typeColor.setStroke()
        oval8Path.lineWidth = 1
        oval8Path.stroke()


        //// Oval 9 Drawing
        let oval9Path = UIBezierPath(ovalIn: CGRect(x: 2.15, y: 2.15, width: 4.3, height: 4.3))
        typeColor.setStroke()
        oval9Path.lineWidth = 1
        oval9Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPronounceableType(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit, typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.04, y: 3.54))
        bezierPath.addCurve(to: CGPoint(x: 2.44, y: 9.54), controlPoint1: CGPoint(x: 5.85, y: 3.54), controlPoint2: CGPoint(x: 2.44, y: 6.22))
        bezierPath.addCurve(to: CGPoint(x: 5.21, y: 14.17), controlPoint1: CGPoint(x: 2.44, y: 11.4), controlPoint2: CGPoint(x: 3.52, y: 13.07))
        bezierPath.addCurve(to: CGPoint(x: 2.44, y: 16.34), controlPoint1: CGPoint(x: 4.15, y: 15.46), controlPoint2: CGPoint(x: 1.89, y: 16.22))
        bezierPath.addCurve(to: CGPoint(x: 8.43, y: 15.4), controlPoint1: CGPoint(x: 4.48, y: 16.74), controlPoint2: CGPoint(x: 6.72, y: 16.12))
        bezierPath.addCurve(to: CGPoint(x: 10.04, y: 15.54), controlPoint1: CGPoint(x: 8.95, y: 15.49), controlPoint2: CGPoint(x: 9.49, y: 15.54))
        bezierPath.addCurve(to: CGPoint(x: 17.64, y: 9.54), controlPoint1: CGPoint(x: 14.24, y: 15.54), controlPoint2: CGPoint(x: 17.64, y: 12.85))
        bezierPath.addCurve(to: CGPoint(x: 10.04, y: 3.54), controlPoint1: CGPoint(x: 17.64, y: 6.22), controlPoint2: CGPoint(x: 14.24, y: 3.54))
        bezierPath.close()
        typeColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRandomType(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit, typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 5.28, y: 2.12, width: 3.15, height: 3.15))
        typeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14.74, y: 11.58))
        bezierPath.addLine(to: CGPoint(x: 11.58, y: 11.58))
        bezierPath.addLine(to: CGPoint(x: 11.58, y: 8.42))
        bezierPath.addLine(to: CGPoint(x: 14.74, y: 8.42))
        bezierPath.addLine(to: CGPoint(x: 14.74, y: 11.58))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.74, y: 5.26))
        bezierPath.addLine(to: CGPoint(x: 14.74, y: 2.1))
        bezierPath.addLine(to: CGPoint(x: 11.58, y: 2.1))
        bezierPath.addLine(to: CGPoint(x: 11.58, y: 5.26))
        bezierPath.addLine(to: CGPoint(x: 8.42, y: 5.26))
        bezierPath.addLine(to: CGPoint(x: 8.42, y: 8.42))
        bezierPath.addLine(to: CGPoint(x: 5.26, y: 8.42))
        bezierPath.addLine(to: CGPoint(x: 5.26, y: 11.58))
        bezierPath.addLine(to: CGPoint(x: 2.1, y: 11.58))
        bezierPath.addLine(to: CGPoint(x: 2.1, y: 14.74))
        bezierPath.addLine(to: CGPoint(x: 5.26, y: 14.74))
        bezierPath.addLine(to: CGPoint(x: 5.26, y: 17.9))
        bezierPath.addLine(to: CGPoint(x: 8.42, y: 17.9))
        bezierPath.addLine(to: CGPoint(x: 8.42, y: 14.74))
        bezierPath.addLine(to: CGPoint(x: 11.58, y: 14.74))
        bezierPath.addLine(to: CGPoint(x: 11.58, y: 17.9))
        bezierPath.addLine(to: CGPoint(x: 14.74, y: 17.9))
        bezierPath.addLine(to: CGPoint(x: 14.74, y: 14.74))
        bezierPath.addLine(to: CGPoint(x: 17.9, y: 14.74))
        bezierPath.addLine(to: CGPoint(x: 17.9, y: 11.58))
        bezierPath.addLine(to: CGPoint(x: 17.9, y: 8.42))
        bezierPath.addLine(to: CGPoint(x: 17.9, y: 5.26))
        bezierPath.addLine(to: CGPoint(x: 14.74, y: 5.26))
        bezierPath.close()
        typeColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 2.12, y: 5.28, width: 3.15, height: 3.15))
        typeColor.setStroke()
        rectangle2Path.lineWidth = 1
        rectangle2Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawStoredType(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit, typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 16, height: 16))
        typeColor.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 7.6, y: 7.6, width: 4.8, height: 4.8))
        typeColor.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawZoom1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit, zoomStroke: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2.5, y: 2.5, width: 16, height: 16))
        zoomStroke.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6.35, y: 14.65))
        bezierPath.addLine(to: CGPoint(x: 9.18, y: 11.82))
        zoomStroke.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 8.25, y: 6.35, width: 6.4, height: 6.4))
        zoomStroke.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawZoom(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit, zoomStroke: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2.5, y: 2.5, width: 16, height: 16))
        zoomStroke.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6.35, y: 14.65))
        bezierPath.addLine(to: CGPoint(x: 9.18, y: 11.82))
        zoomStroke.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 8.25, y: 6.35, width: 6.4, height: 6.4))
        zoomStroke.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 11.45, y: 7.99))
        bezier2Path.addLine(to: CGPoint(x: 11.45, y: 11.11))
        zoomStroke.setStroke()
        bezier2Path.lineWidth = 0.75
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 13, y: 9.55))
        bezier3Path.addLine(to: CGPoint(x: 9.89, y: 9.55))
        zoomStroke.setStroke()
        bezier3Path.lineWidth = 0.75
        bezier3Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDeleteButon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Color Declarations
        let strokeColor2 = UIColor(red: 0.137, green: 0.122, blue: 0.125, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 1.42, y: 10.42))
        bezierPath.addCurve(to: CGPoint(x: 1.42, y: 9.58), controlPoint1: CGPoint(x: 1.19, y: 10.19), controlPoint2: CGPoint(x: 1.19, y: 9.81))
        bezierPath.addLine(to: CGPoint(x: 6.58, y: 4.42))
        bezierPath.addCurve(to: CGPoint(x: 7.6, y: 4), controlPoint1: CGPoint(x: 6.81, y: 4.19), controlPoint2: CGPoint(x: 7.27, y: 4))
        bezierPath.addLine(to: CGPoint(x: 18.4, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 19, y: 4.6), controlPoint1: CGPoint(x: 18.73, y: 4), controlPoint2: CGPoint(x: 19, y: 4.27))
        bezierPath.addLine(to: CGPoint(x: 19, y: 15.4))
        bezierPath.addCurve(to: CGPoint(x: 18.4, y: 16), controlPoint1: CGPoint(x: 19, y: 15.73), controlPoint2: CGPoint(x: 18.73, y: 16))
        bezierPath.addLine(to: CGPoint(x: 7.6, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 6.58, y: 15.58), controlPoint1: CGPoint(x: 7.27, y: 16), controlPoint2: CGPoint(x: 6.81, y: 15.81))
        bezierPath.addLine(to: CGPoint(x: 1.42, y: 10.42))
        bezierPath.close()
        strokeColor2.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 10, y: 7))
        bezier2Path.addLine(to: CGPoint(x: 16, y: 13))
        strokeColor2.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.lineCapStyle = .round
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 10, y: 13))
        bezier3Path.addLine(to: CGPoint(x: 16, y: 7))
        strokeColor2.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.lineCapStyle = .round
        bezier3Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPasswordHeader(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 80, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 80, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 80, y: resizedFrame.height / 20)


        //// Color Declarations
        let headerColor = UIColor(red: 0.345, green: 0.349, blue: 0.357, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 1.75, y: 2.47, width: 76.5, height: 15.05), cornerRadius: 7.4)
        headerColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 21.5, y: 11.42))
        bezierPath.addLine(to: CGPoint(x: 20.98, y: 12.3))
        bezierPath.addLine(to: CGPoint(x: 18.89, y: 10.92))
        bezierPath.addLine(to: CGPoint(x: 18.89, y: 13.44))
        bezierPath.addLine(to: CGPoint(x: 17.92, y: 13.44))
        bezierPath.addLine(to: CGPoint(x: 17.92, y: 10.92))
        bezierPath.addLine(to: CGPoint(x: 15.81, y: 12.32))
        bezierPath.addLine(to: CGPoint(x: 15.29, y: 11.42))
        bezierPath.addLine(to: CGPoint(x: 17.5, y: 9.98))
        bezierPath.addLine(to: CGPoint(x: 15.29, y: 8.54))
        bezierPath.addLine(to: CGPoint(x: 15.81, y: 7.66))
        bezierPath.addLine(to: CGPoint(x: 17.92, y: 9.07))
        bezierPath.addLine(to: CGPoint(x: 17.92, y: 6.56))
        bezierPath.addLine(to: CGPoint(x: 18.89, y: 6.56))
        bezierPath.addLine(to: CGPoint(x: 18.89, y: 9.05))
        bezierPath.addLine(to: CGPoint(x: 20.98, y: 7.66))
        bezierPath.addLine(to: CGPoint(x: 21.5, y: 8.54))
        bezierPath.addLine(to: CGPoint(x: 19.32, y: 9.98))
        bezierPath.addLine(to: CGPoint(x: 21.5, y: 11.42))
        bezierPath.close()
        headerColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 32.31, y: 11.42))
        bezier2Path.addLine(to: CGPoint(x: 31.78, y: 12.3))
        bezier2Path.addLine(to: CGPoint(x: 29.7, y: 10.92))
        bezier2Path.addLine(to: CGPoint(x: 29.7, y: 13.44))
        bezier2Path.addLine(to: CGPoint(x: 28.72, y: 13.44))
        bezier2Path.addLine(to: CGPoint(x: 28.72, y: 10.92))
        bezier2Path.addLine(to: CGPoint(x: 26.61, y: 12.32))
        bezier2Path.addLine(to: CGPoint(x: 26.09, y: 11.42))
        bezier2Path.addLine(to: CGPoint(x: 28.31, y: 9.98))
        bezier2Path.addLine(to: CGPoint(x: 26.09, y: 8.54))
        bezier2Path.addLine(to: CGPoint(x: 26.61, y: 7.66))
        bezier2Path.addLine(to: CGPoint(x: 28.72, y: 9.07))
        bezier2Path.addLine(to: CGPoint(x: 28.72, y: 6.56))
        bezier2Path.addLine(to: CGPoint(x: 29.7, y: 6.56))
        bezier2Path.addLine(to: CGPoint(x: 29.7, y: 9.05))
        bezier2Path.addLine(to: CGPoint(x: 31.78, y: 7.66))
        bezier2Path.addLine(to: CGPoint(x: 32.31, y: 8.54))
        bezier2Path.addLine(to: CGPoint(x: 30.13, y: 9.98))
        bezier2Path.addLine(to: CGPoint(x: 32.31, y: 11.42))
        bezier2Path.close()
        headerColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 43.11, y: 11.42))
        bezier3Path.addLine(to: CGPoint(x: 42.58, y: 12.3))
        bezier3Path.addLine(to: CGPoint(x: 40.5, y: 10.92))
        bezier3Path.addLine(to: CGPoint(x: 40.5, y: 13.44))
        bezier3Path.addLine(to: CGPoint(x: 39.52, y: 13.44))
        bezier3Path.addLine(to: CGPoint(x: 39.52, y: 10.92))
        bezier3Path.addLine(to: CGPoint(x: 37.41, y: 12.32))
        bezier3Path.addLine(to: CGPoint(x: 36.89, y: 11.42))
        bezier3Path.addLine(to: CGPoint(x: 39.11, y: 9.98))
        bezier3Path.addLine(to: CGPoint(x: 36.89, y: 8.54))
        bezier3Path.addLine(to: CGPoint(x: 37.41, y: 7.66))
        bezier3Path.addLine(to: CGPoint(x: 39.52, y: 9.07))
        bezier3Path.addLine(to: CGPoint(x: 39.52, y: 6.56))
        bezier3Path.addLine(to: CGPoint(x: 40.5, y: 6.56))
        bezier3Path.addLine(to: CGPoint(x: 40.5, y: 9.05))
        bezier3Path.addLine(to: CGPoint(x: 42.58, y: 7.66))
        bezier3Path.addLine(to: CGPoint(x: 43.11, y: 8.54))
        bezier3Path.addLine(to: CGPoint(x: 40.93, y: 9.98))
        bezier3Path.addLine(to: CGPoint(x: 43.11, y: 11.42))
        bezier3Path.close()
        headerColor.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 53.91, y: 11.42))
        bezier4Path.addLine(to: CGPoint(x: 53.38, y: 12.3))
        bezier4Path.addLine(to: CGPoint(x: 51.3, y: 10.92))
        bezier4Path.addLine(to: CGPoint(x: 51.3, y: 13.44))
        bezier4Path.addLine(to: CGPoint(x: 50.32, y: 13.44))
        bezier4Path.addLine(to: CGPoint(x: 50.32, y: 10.92))
        bezier4Path.addLine(to: CGPoint(x: 48.21, y: 12.32))
        bezier4Path.addLine(to: CGPoint(x: 47.7, y: 11.42))
        bezier4Path.addLine(to: CGPoint(x: 49.91, y: 9.98))
        bezier4Path.addLine(to: CGPoint(x: 47.7, y: 8.54))
        bezier4Path.addLine(to: CGPoint(x: 48.21, y: 7.66))
        bezier4Path.addLine(to: CGPoint(x: 50.32, y: 9.07))
        bezier4Path.addLine(to: CGPoint(x: 50.32, y: 6.56))
        bezier4Path.addLine(to: CGPoint(x: 51.3, y: 6.56))
        bezier4Path.addLine(to: CGPoint(x: 51.3, y: 9.05))
        bezier4Path.addLine(to: CGPoint(x: 53.38, y: 7.66))
        bezier4Path.addLine(to: CGPoint(x: 53.91, y: 8.54))
        bezier4Path.addLine(to: CGPoint(x: 51.73, y: 9.98))
        bezier4Path.addLine(to: CGPoint(x: 53.91, y: 11.42))
        bezier4Path.close()
        headerColor.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 64.71, y: 11.42))
        bezier5Path.addLine(to: CGPoint(x: 64.18, y: 12.3))
        bezier5Path.addLine(to: CGPoint(x: 62.1, y: 10.92))
        bezier5Path.addLine(to: CGPoint(x: 62.1, y: 13.44))
        bezier5Path.addLine(to: CGPoint(x: 61.12, y: 13.44))
        bezier5Path.addLine(to: CGPoint(x: 61.12, y: 10.92))
        bezier5Path.addLine(to: CGPoint(x: 59.02, y: 12.32))
        bezier5Path.addLine(to: CGPoint(x: 58.5, y: 11.42))
        bezier5Path.addLine(to: CGPoint(x: 60.71, y: 9.98))
        bezier5Path.addLine(to: CGPoint(x: 58.5, y: 8.54))
        bezier5Path.addLine(to: CGPoint(x: 59.02, y: 7.66))
        bezier5Path.addLine(to: CGPoint(x: 61.12, y: 9.07))
        bezier5Path.addLine(to: CGPoint(x: 61.12, y: 6.56))
        bezier5Path.addLine(to: CGPoint(x: 62.1, y: 6.56))
        bezier5Path.addLine(to: CGPoint(x: 62.1, y: 9.05))
        bezier5Path.addLine(to: CGPoint(x: 64.18, y: 7.66))
        bezier5Path.addLine(to: CGPoint(x: 64.71, y: 8.54))
        bezier5Path.addLine(to: CGPoint(x: 62.53, y: 9.98))
        bezier5Path.addLine(to: CGPoint(x: 64.71, y: 11.42))
        bezier5Path.close()
        headerColor.setFill()
        bezier5Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPasswordStrengthHeader(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Color Declarations
        let headerColor = UIColor(red: 0.345, green: 0.349, blue: 0.357, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 13.7, y: 4.15, width: 3.1, height: 11.7), cornerRadius: 1.4)
        headerColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 13.7, y: 4.15, width: 3.1, height: 11.7), cornerRadius: 1.4)
        headerColor.setStroke()
        rectangle2Path.lineWidth = 1
        rectangle2Path.stroke()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 8.45, y: 8.38, width: 3.1, height: 7.45), cornerRadius: 1.4)
        headerColor.setStroke()
        rectangle3Path.lineWidth = 1
        rectangle3Path.stroke()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: 8.45, y: 8.38, width: 3.1, height: 7.45), cornerRadius: 1.4)
        headerColor.setStroke()
        rectangle4Path.lineWidth = 1
        rectangle4Path.stroke()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(roundedRect: CGRect(x: 3.2, y: 12.65, width: 3.1, height: 3.2), cornerRadius: 1.4)
        headerColor.setStroke()
        rectangle5Path.lineWidth = 1
        rectangle5Path.stroke()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRect(x: 3.2, y: 12.65, width: 3.1, height: 3.2), cornerRadius: 1.4)
        headerColor.setStroke()
        rectangle6Path.lineWidth = 1
        rectangle6Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPasswordTypeHeader(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Color Declarations
        let headerColor = UIColor(red: 0.345, green: 0.349, blue: 0.357, alpha: 1.000)

        //// Star Drawing
        context.saveGState()
        context.translateBy(x: 6.8, y: 11.85)
        context.rotate(by: -30.15 * CGFloat.pi/180)

        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 0, y: -6.4))
        starPath.addLine(to: CGPoint(x: 3.7, y: 0))
        starPath.addLine(to: CGPoint(x: 0, y: 6.4))
        starPath.addLine(to: CGPoint(x: -3.7, y: 0))
        starPath.close()
        headerColor.setStroke()
        starPath.lineWidth = 1
        starPath.lineJoinStyle = .round
        starPath.stroke()

        context.restoreGState()


        //// Star 2 Drawing
        context.saveGState()
        context.translateBy(x: 13.2, y: 11.85)
        context.rotate(by: -149.85 * CGFloat.pi/180)

        let star2Path = UIBezierPath()
        star2Path.move(to: CGPoint(x: 0, y: -6.4))
        star2Path.addLine(to: CGPoint(x: 3.65, y: 0))
        star2Path.addLine(to: CGPoint(x: 0, y: 6.4))
        star2Path.addLine(to: CGPoint(x: -3.65, y: 0))
        star2Path.close()
        headerColor.setStroke()
        star2Path.lineWidth = 1
        star2Path.lineJoinStyle = .round
        star2Path.stroke()

        context.restoreGState()


        //// Star 3 Drawing
        context.saveGState()
        context.translateBy(x: 10, y: 6.35)
        context.rotate(by: -90 * CGFloat.pi/180)

        let star3Path = UIBezierPath()
        star3Path.move(to: CGPoint(x: 0, y: -6.45))
        star3Path.addLine(to: CGPoint(x: 3.7, y: 0))
        star3Path.addLine(to: CGPoint(x: 0, y: 6.45))
        star3Path.addLine(to: CGPoint(x: -3.7, y: 0))
        star3Path.close()
        headerColor.setStroke()
        star3Path.lineWidth = 1
        star3Path.lineJoinStyle = .round
        star3Path.stroke()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawGradientBackground(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1024, height: 1024), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1024, height: 1024), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1024, y: resizedFrame.height / 1024)


        //// Color Declarations
        let centerGradientColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let topGradientColor = UIColor(red: 0.595, green: 0.696, blue: 1.000, alpha: 1.000)
        let middleGradientColor = UIColor(red: 0.771, green: 1.000, blue: 0.545, alpha: 1.000)
        let radialGradientColorInner = UIColor(red: 0.973, green: 0.824, blue: 0.400, alpha: 1.000)
        let radialGradientColorOuter = UIColor(red: 1.000, green: 0.000, blue: 0.454, alpha: 1.000)

        //// Gradient Declarations
        let topGradient = CGGradient(colorsSpace: nil, colors: [topGradientColor.cgColor, centerGradientColor.cgColor, topGradientColor.cgColor] as CFArray, locations: [0, 0.51, 1])!
        let middleGradient = CGGradient(colorsSpace: nil, colors: [middleGradientColor.cgColor, centerGradientColor.cgColor, middleGradientColor.cgColor] as CFArray, locations: [0, 0.51, 1])!
        let radialGradient = CGGradient(colorsSpace: nil, colors: [radialGradientColorInner.cgColor, radialGradientColorInner.blended(withFraction: 0.5, of: radialGradientColorOuter).cgColor, radialGradientColorOuter.cgColor] as CFArray, locations: [0, 0.66, 1])!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0.13, y: 0.13, width: 1024, height: 1024))
        context.saveGState()
        rectanglePath.addClip()
        context.drawRadialGradient(radialGradient,
            startCenter: CGPoint(x: 257.43, y: 442.42), startRadius: 0,
            endCenter: CGPoint(x: 257.43, y: 442.42), endRadius: 796.04,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.setBlendMode(.colorBurn)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0.13, y: 0.13, width: 1024, height: 1024))
        context.saveGState()
        rectangle2Path.addClip()
        context.drawLinearGradient(topGradient,
            start: CGPoint(x: 15.7, y: 219.13),
            end: CGPoint(x: 1136.25, y: 880.49),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.setAlpha(0.3)
        context.setBlendMode(.colorBurn)

        let rectangle3Path = UIBezierPath(rect: CGRect(x: 0.13, y: 0.13, width: 1024, height: 1024))
        context.saveGState()
        rectangle3Path.addClip()
        context.drawLinearGradient(middleGradient,
            start: CGPoint(x: 250.48, y: 748.75),
            end: CGPoint(x: 923.4, y: 140.17),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawLowercase(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Lowercase 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 32.78, y: 29.48))
        bezierPath.addLine(to: CGPoint(x: 32.75, y: 29.48))
        bezierPath.addCurve(to: CGPoint(x: 31.36, y: 29.75), controlPoint1: CGPoint(x: 32.28, y: 29.52), controlPoint2: CGPoint(x: 31.81, y: 29.61))
        bezierPath.addLine(to: CGPoint(x: 31.37, y: 29.75))
        bezierPath.addCurve(to: CGPoint(x: 30.37, y: 30.34), controlPoint1: CGPoint(x: 31, y: 29.87), controlPoint2: CGPoint(x: 30.66, y: 30.07))
        bezierPath.addLine(to: CGPoint(x: 30.36, y: 30.35))
        bezierPath.addCurve(to: CGPoint(x: 29.97, y: 31.35), controlPoint1: CGPoint(x: 30.1, y: 30.61), controlPoint2: CGPoint(x: 29.96, y: 30.97))
        bezierPath.addLine(to: CGPoint(x: 29.97, y: 31.33))
        bezierPath.addCurve(to: CGPoint(x: 30.16, y: 32.04), controlPoint1: CGPoint(x: 29.96, y: 31.58), controlPoint2: CGPoint(x: 30.03, y: 31.83))
        bezierPath.addLine(to: CGPoint(x: 30.16, y: 32.05))
        bezierPath.addCurve(to: CGPoint(x: 30.64, y: 32.51), controlPoint1: CGPoint(x: 30.29, y: 32.23), controlPoint2: CGPoint(x: 30.45, y: 32.39))
        bezierPath.addLine(to: CGPoint(x: 30.63, y: 32.5))
        bezierPath.addCurve(to: CGPoint(x: 31.32, y: 32.74), controlPoint1: CGPoint(x: 30.84, y: 32.62), controlPoint2: CGPoint(x: 31.08, y: 32.7))
        bezierPath.addLine(to: CGPoint(x: 31.33, y: 32.75))
        bezierPath.addCurve(to: CGPoint(x: 32.06, y: 32.81), controlPoint1: CGPoint(x: 31.57, y: 32.79), controlPoint2: CGPoint(x: 31.81, y: 32.81))
        bezierPath.addLine(to: CGPoint(x: 32.02, y: 32.81))
        bezierPath.addCurve(to: CGPoint(x: 34.24, y: 32), controlPoint1: CGPoint(x: 32.84, y: 32.87), controlPoint2: CGPoint(x: 33.65, y: 32.57))
        bezierPath.addLine(to: CGPoint(x: 34.23, y: 32.01))
        bezierPath.addCurve(to: CGPoint(x: 35, y: 29.9), controlPoint1: CGPoint(x: 34.75, y: 31.43), controlPoint2: CGPoint(x: 35.03, y: 30.67))
        bezierPath.addLine(to: CGPoint(x: 35, y: 29.41))
        bezierPath.addLine(to: CGPoint(x: 34.4, y: 29.41))
        bezierPath.addCurve(to: CGPoint(x: 32.78, y: 29.48), controlPoint1: CGPoint(x: 33.83, y: 29.41), controlPoint2: CGPoint(x: 33.3, y: 29.43))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 53.36, y: 25.91))
        bezierPath.addLine(to: CGPoint(x: 53.36, y: 25.91))
        bezierPath.addCurve(to: CGPoint(x: 52.3, y: 25.09), controlPoint1: CGPoint(x: 53.06, y: 25.57), controlPoint2: CGPoint(x: 52.7, y: 25.29))
        bezierPath.addLine(to: CGPoint(x: 52.31, y: 25.1))
        bezierPath.addCurve(to: CGPoint(x: 50.83, y: 24.77), controlPoint1: CGPoint(x: 51.85, y: 24.87), controlPoint2: CGPoint(x: 51.34, y: 24.76))
        bezierPath.addLine(to: CGPoint(x: 50.83, y: 24.77))
        bezierPath.addCurve(to: CGPoint(x: 49.38, y: 25.09), controlPoint1: CGPoint(x: 50.32, y: 24.76), controlPoint2: CGPoint(x: 49.83, y: 24.87))
        bezierPath.addLine(to: CGPoint(x: 49.4, y: 25.08))
        bezierPath.addCurve(to: CGPoint(x: 48.33, y: 25.89), controlPoint1: CGPoint(x: 49, y: 25.28), controlPoint2: CGPoint(x: 48.63, y: 25.55))
        bezierPath.addLine(to: CGPoint(x: 48.31, y: 25.91))
        bezierPath.addCurve(to: CGPoint(x: 47.61, y: 27.09), controlPoint1: CGPoint(x: 48.01, y: 26.26), controlPoint2: CGPoint(x: 47.77, y: 26.66))
        bezierPath.addLine(to: CGPoint(x: 47.61, y: 27.09))
        bezierPath.addCurve(to: CGPoint(x: 47.61, y: 29.82), controlPoint1: CGPoint(x: 47.28, y: 27.97), controlPoint2: CGPoint(x: 47.28, y: 28.94))
        bezierPath.addLine(to: CGPoint(x: 47.62, y: 29.83))
        bezierPath.addCurve(to: CGPoint(x: 48.32, y: 31.02), controlPoint1: CGPoint(x: 47.78, y: 30.27), controlPoint2: CGPoint(x: 48.01, y: 30.67))
        bezierPath.addLine(to: CGPoint(x: 48.3, y: 31))
        bezierPath.addCurve(to: CGPoint(x: 49.37, y: 31.84), controlPoint1: CGPoint(x: 48.6, y: 31.34), controlPoint2: CGPoint(x: 48.96, y: 31.63))
        bezierPath.addLine(to: CGPoint(x: 49.36, y: 31.83))
        bezierPath.addCurve(to: CGPoint(x: 50.81, y: 32.15), controlPoint1: CGPoint(x: 49.81, y: 32.05), controlPoint2: CGPoint(x: 50.3, y: 32.16))
        bezierPath.addLine(to: CGPoint(x: 50.85, y: 32.15))
        bezierPath.addCurve(to: CGPoint(x: 52.33, y: 31.82), controlPoint1: CGPoint(x: 51.36, y: 32.16), controlPoint2: CGPoint(x: 51.87, y: 32.05))
        bezierPath.addLine(to: CGPoint(x: 52.31, y: 31.83))
        bezierPath.addCurve(to: CGPoint(x: 53.37, y: 30.98), controlPoint1: CGPoint(x: 52.72, y: 31.62), controlPoint2: CGPoint(x: 53.08, y: 31.33))
        bezierPath.addLine(to: CGPoint(x: 53.36, y: 31))
        bezierPath.addCurve(to: CGPoint(x: 54, y: 29.79), controlPoint1: CGPoint(x: 53.65, y: 30.64), controlPoint2: CGPoint(x: 53.87, y: 30.23))
        bezierPath.addLine(to: CGPoint(x: 54.01, y: 29.78))
        bezierPath.addCurve(to: CGPoint(x: 54.22, y: 28.43), controlPoint1: CGPoint(x: 54.15, y: 29.34), controlPoint2: CGPoint(x: 54.22, y: 28.89))
        bezierPath.addLine(to: CGPoint(x: 54.22, y: 28.42))
        bezierPath.addCurve(to: CGPoint(x: 53.99, y: 27.04), controlPoint1: CGPoint(x: 54.22, y: 27.95), controlPoint2: CGPoint(x: 54.14, y: 27.48))
        bezierPath.addLine(to: CGPoint(x: 53.99, y: 27.04))
        bezierPath.addCurve(to: CGPoint(x: 53.33, y: 25.88), controlPoint1: CGPoint(x: 53.85, y: 26.61), controlPoint2: CGPoint(x: 53.63, y: 26.22))
        bezierPath.addLine(to: CGPoint(x: 53.36, y: 25.91))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 74.27, y: 0))
        bezierPath.addLine(to: CGPoint(x: 25.73, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 11.58, y: 0), controlPoint2: CGPoint(x: 0, y: 11.25))
        bezierPath.addCurve(to: CGPoint(x: 25.73, y: 50), controlPoint1: CGPoint(x: 0, y: 38.75), controlPoint2: CGPoint(x: 11.58, y: 50))
        bezierPath.addLine(to: CGPoint(x: 74.27, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 25), controlPoint1: CGPoint(x: 88.42, y: 50), controlPoint2: CGPoint(x: 100, y: 38.75))
        bezierPath.addCurve(to: CGPoint(x: 74.27, y: 0), controlPoint1: CGPoint(x: 100, y: 11.25), controlPoint2: CGPoint(x: 88.42, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 39.27, y: 35.66))
        bezierPath.addLine(to: CGPoint(x: 35, y: 35.66))
        bezierPath.addLine(to: CGPoint(x: 35, y: 34.13))
        bezierPath.addLine(to: CGPoint(x: 34.92, y: 34.13))
        bezierPath.addLine(to: CGPoint(x: 34.91, y: 34.14))
        bezierPath.addCurve(to: CGPoint(x: 33.25, y: 35.51), controlPoint1: CGPoint(x: 34.51, y: 34.76), controlPoint2: CGPoint(x: 33.93, y: 35.24))
        bezierPath.addLine(to: CGPoint(x: 33.29, y: 35.5))
        bezierPath.addCurve(to: CGPoint(x: 30.81, y: 36), controlPoint1: CGPoint(x: 32.51, y: 35.84), controlPoint2: CGPoint(x: 31.67, y: 36.02))
        bezierPath.addLine(to: CGPoint(x: 30.84, y: 36))
        bezierPath.addCurve(to: CGPoint(x: 29.03, y: 35.78), controlPoint1: CGPoint(x: 30.23, y: 36), controlPoint2: CGPoint(x: 29.62, y: 35.93))
        bezierPath.addLine(to: CGPoint(x: 29.02, y: 35.78))
        bezierPath.addCurve(to: CGPoint(x: 27.35, y: 35.01), controlPoint1: CGPoint(x: 28.42, y: 35.63), controlPoint2: CGPoint(x: 27.85, y: 35.37))
        bezierPath.addLine(to: CGPoint(x: 27.31, y: 34.99))
        bezierPath.addCurve(to: CGPoint(x: 26.08, y: 33.62), controlPoint1: CGPoint(x: 26.8, y: 34.63), controlPoint2: CGPoint(x: 26.38, y: 34.16))
        bezierPath.addLine(to: CGPoint(x: 26.09, y: 33.63))
        bezierPath.addCurve(to: CGPoint(x: 25.59, y: 31.49), controlPoint1: CGPoint(x: 25.73, y: 32.97), controlPoint2: CGPoint(x: 25.56, y: 32.23))
        bezierPath.addLine(to: CGPoint(x: 25.59, y: 31.46))
        bezierPath.addCurve(to: CGPoint(x: 26.47, y: 28.96), controlPoint1: CGPoint(x: 25.56, y: 30.55), controlPoint2: CGPoint(x: 25.87, y: 29.65))
        bezierPath.addLine(to: CGPoint(x: 26.45, y: 28.99))
        bezierPath.addCurve(to: CGPoint(x: 28.68, y: 27.51), controlPoint1: CGPoint(x: 27.07, y: 28.33), controlPoint2: CGPoint(x: 27.83, y: 27.82))
        bezierPath.addLine(to: CGPoint(x: 28.69, y: 27.51))
        bezierPath.addCurve(to: CGPoint(x: 31.76, y: 26.83), controlPoint1: CGPoint(x: 29.68, y: 27.15), controlPoint2: CGPoint(x: 30.71, y: 26.92))
        bezierPath.addCurve(to: CGPoint(x: 34.83, y: 26.67), controlPoint1: CGPoint(x: 32.73, y: 26.73), controlPoint2: CGPoint(x: 33.79, y: 26.67))
        bezierPath.addLine(to: CGPoint(x: 34.83, y: 26.44))
        bezierPath.addLine(to: CGPoint(x: 34.83, y: 26.44))
        bezierPath.addCurve(to: CGPoint(x: 34.08, y: 24.87), controlPoint1: CGPoint(x: 34.87, y: 25.82), controlPoint2: CGPoint(x: 34.59, y: 25.23))
        bezierPath.addLine(to: CGPoint(x: 34.1, y: 24.88))
        bezierPath.addCurve(to: CGPoint(x: 32.25, y: 24.37), controlPoint1: CGPoint(x: 33.55, y: 24.53), controlPoint2: CGPoint(x: 32.91, y: 24.35))
        bezierPath.addLine(to: CGPoint(x: 32.23, y: 24.37))
        bezierPath.addCurve(to: CGPoint(x: 30.29, y: 24.8), controlPoint1: CGPoint(x: 31.56, y: 24.37), controlPoint2: CGPoint(x: 30.9, y: 24.52))
        bezierPath.addLine(to: CGPoint(x: 30.24, y: 24.82))
        bezierPath.addCurve(to: CGPoint(x: 28.65, y: 25.84), controlPoint1: CGPoint(x: 29.66, y: 25.08), controlPoint2: CGPoint(x: 29.13, y: 25.42))
        bezierPath.addLine(to: CGPoint(x: 26.3, y: 23.24))
        bezierPath.addLine(to: CGPoint(x: 26.35, y: 23.19))
        bezierPath.addCurve(to: CGPoint(x: 29.33, y: 21.4), controlPoint1: CGPoint(x: 27.21, y: 22.39), controlPoint2: CGPoint(x: 28.22, y: 21.78))
        bezierPath.addLine(to: CGPoint(x: 29.27, y: 21.42))
        bezierPath.addCurve(to: CGPoint(x: 32.69, y: 20.82), controlPoint1: CGPoint(x: 30.37, y: 21.02), controlPoint2: CGPoint(x: 31.52, y: 20.82))
        bezierPath.addLine(to: CGPoint(x: 32.77, y: 20.82))
        bezierPath.addCurve(to: CGPoint(x: 35.88, y: 21.31), controlPoint1: CGPoint(x: 33.83, y: 20.8), controlPoint2: CGPoint(x: 34.88, y: 20.97))
        bezierPath.addLine(to: CGPoint(x: 35.75, y: 21.27))
        bezierPath.addCurve(to: CGPoint(x: 37.75, y: 22.64), controlPoint1: CGPoint(x: 36.53, y: 21.54), controlPoint2: CGPoint(x: 37.22, y: 22.01))
        bezierPath.addLine(to: CGPoint(x: 37.75, y: 22.64))
        bezierPath.addCurve(to: CGPoint(x: 38.92, y: 25.03), controlPoint1: CGPoint(x: 38.32, y: 23.34), controlPoint2: CGPoint(x: 38.71, y: 24.15))
        bezierPath.addLine(to: CGPoint(x: 38.91, y: 25.01))
        bezierPath.addCurve(to: CGPoint(x: 39.27, y: 28.41), controlPoint1: CGPoint(x: 39.17, y: 26.13), controlPoint2: CGPoint(x: 39.29, y: 27.27))
        bezierPath.addLine(to: CGPoint(x: 39.27, y: 35.66))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 58.27, y: 31.31))
        bezierPath.addLine(to: CGPoint(x: 58.27, y: 31.33))
        bezierPath.addCurve(to: CGPoint(x: 57.02, y: 33.71), controlPoint1: CGPoint(x: 58, y: 32.19), controlPoint2: CGPoint(x: 57.58, y: 33))
        bezierPath.addLine(to: CGPoint(x: 57.01, y: 33.73))
        bezierPath.addCurve(to: CGPoint(x: 54.9, y: 35.4), controlPoint1: CGPoint(x: 56.43, y: 34.42), controlPoint2: CGPoint(x: 55.71, y: 34.99))
        bezierPath.addLine(to: CGPoint(x: 54.87, y: 35.42))
        bezierPath.addCurve(to: CGPoint(x: 51.98, y: 36.06), controlPoint1: CGPoint(x: 53.97, y: 35.86), controlPoint2: CGPoint(x: 52.98, y: 36.08))
        bezierPath.addLine(to: CGPoint(x: 51.95, y: 36.06))
        bezierPath.addCurve(to: CGPoint(x: 49.21, y: 35.45), controlPoint1: CGPoint(x: 51.01, y: 36.06), controlPoint2: CGPoint(x: 50.07, y: 35.85))
        bezierPath.addLine(to: CGPoint(x: 49.26, y: 35.48))
        bezierPath.addCurve(to: CGPoint(x: 47.26, y: 33.79), controlPoint1: CGPoint(x: 48.44, y: 35.13), controlPoint2: CGPoint(x: 47.74, y: 34.54))
        bezierPath.addLine(to: CGPoint(x: 47.19, y: 33.78))
        bezierPath.addLine(to: CGPoint(x: 47.19, y: 35.66))
        bezierPath.addLine(to: CGPoint(x: 42.84, y: 35.66))
        bezierPath.addLine(to: CGPoint(x: 42.84, y: 13.88))
        bezierPath.addLine(to: CGPoint(x: 47.57, y: 13.88))
        bezierPath.addLine(to: CGPoint(x: 47.57, y: 22.88))
        bezierPath.addLine(to: CGPoint(x: 47.57, y: 22.88))
        bezierPath.addLine(to: CGPoint(x: 47.58, y: 22.87))
        bezierPath.addCurve(to: CGPoint(x: 49.32, y: 21.54), controlPoint1: CGPoint(x: 48.07, y: 22.32), controlPoint2: CGPoint(x: 48.66, y: 21.87))
        bezierPath.addLine(to: CGPoint(x: 49.3, y: 21.54))
        bezierPath.addCurve(to: CGPoint(x: 52.04, y: 20.91), controlPoint1: CGPoint(x: 50.14, y: 21.1), controlPoint2: CGPoint(x: 51.09, y: 20.88))
        bezierPath.addLine(to: CGPoint(x: 51.99, y: 20.91))
        bezierPath.addCurve(to: CGPoint(x: 54.77, y: 21.5), controlPoint1: CGPoint(x: 52.95, y: 20.89), controlPoint2: CGPoint(x: 53.9, y: 21.09))
        bezierPath.addLine(to: CGPoint(x: 54.77, y: 21.5))
        bezierPath.addCurve(to: CGPoint(x: 56.88, y: 23.09), controlPoint1: CGPoint(x: 55.58, y: 21.88), controlPoint2: CGPoint(x: 56.3, y: 22.42))
        bezierPath.addLine(to: CGPoint(x: 56.96, y: 23.19))
        bezierPath.addCurve(to: CGPoint(x: 58.31, y: 25.61), controlPoint1: CGPoint(x: 57.56, y: 23.9), controlPoint2: CGPoint(x: 58.02, y: 24.72))
        bezierPath.addLine(to: CGPoint(x: 58.3, y: 25.59))
        bezierPath.addCurve(to: CGPoint(x: 58.77, y: 28.39), controlPoint1: CGPoint(x: 58.61, y: 26.49), controlPoint2: CGPoint(x: 58.77, y: 27.44))
        bezierPath.addLine(to: CGPoint(x: 58.77, y: 28.47))
        bezierPath.addCurve(to: CGPoint(x: 58.28, y: 31.4), controlPoint1: CGPoint(x: 58.77, y: 29.47), controlPoint2: CGPoint(x: 58.6, y: 30.46))
        bezierPath.addLine(to: CGPoint(x: 58.27, y: 31.31))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 66.04, y: 29.9))
        bezierPath.addLine(to: CGPoint(x: 66.04, y: 29.89))
        bezierPath.addCurve(to: CGPoint(x: 66.7, y: 31.03), controlPoint1: CGPoint(x: 66.18, y: 30.31), controlPoint2: CGPoint(x: 66.4, y: 30.7))
        bezierPath.addLine(to: CGPoint(x: 66.71, y: 31.05))
        bezierPath.addCurve(to: CGPoint(x: 67.79, y: 31.85), controlPoint1: CGPoint(x: 67.01, y: 31.39), controlPoint2: CGPoint(x: 67.38, y: 31.67))
        bezierPath.addLine(to: CGPoint(x: 67.78, y: 31.85))
        bezierPath.addCurve(to: CGPoint(x: 69.17, y: 32.14), controlPoint1: CGPoint(x: 68.21, y: 32.05), controlPoint2: CGPoint(x: 68.69, y: 32.15))
        bezierPath.addLine(to: CGPoint(x: 69.17, y: 32.14))
        bezierPath.addCurve(to: CGPoint(x: 70.6, y: 31.87), controlPoint1: CGPoint(x: 69.66, y: 32.14), controlPoint2: CGPoint(x: 70.14, y: 32.05))
        bezierPath.addLine(to: CGPoint(x: 70.6, y: 31.87))
        bezierPath.addCurve(to: CGPoint(x: 71.74, y: 31.09), controlPoint1: CGPoint(x: 71.04, y: 31.71), controlPoint2: CGPoint(x: 71.44, y: 31.44))
        bezierPath.addLine(to: CGPoint(x: 74.37, y: 34.27))
        bezierPath.addLine(to: CGPoint(x: 74.38, y: 34.26))
        bezierPath.addCurve(to: CGPoint(x: 72.05, y: 35.63), controlPoint1: CGPoint(x: 73.71, y: 34.88), controlPoint2: CGPoint(x: 72.92, y: 35.35))
        bezierPath.addLine(to: CGPoint(x: 72.1, y: 35.62))
        bezierPath.addCurve(to: CGPoint(x: 69.09, y: 36.12), controlPoint1: CGPoint(x: 71.13, y: 35.95), controlPoint2: CGPoint(x: 70.12, y: 36.12))
        bezierPath.addLine(to: CGPoint(x: 69.01, y: 36.12))
        bezierPath.addCurve(to: CGPoint(x: 65.88, y: 35.6), controlPoint1: CGPoint(x: 67.94, y: 36.12), controlPoint2: CGPoint(x: 66.89, y: 35.94))
        bezierPath.addLine(to: CGPoint(x: 65.88, y: 35.6))
        bezierPath.addCurve(to: CGPoint(x: 63.35, y: 34.11), controlPoint1: CGPoint(x: 64.94, y: 35.27), controlPoint2: CGPoint(x: 64.08, y: 34.77))
        bezierPath.addLine(to: CGPoint(x: 63.29, y: 34.05))
        bezierPath.addCurve(to: CGPoint(x: 61.61, y: 31.65), controlPoint1: CGPoint(x: 62.57, y: 33.38), controlPoint2: CGPoint(x: 61.99, y: 32.56))
        bezierPath.addLine(to: CGPoint(x: 61.61, y: 31.67))
        bezierPath.addCurve(to: CGPoint(x: 61, y: 28.51), controlPoint1: CGPoint(x: 61.19, y: 30.67), controlPoint2: CGPoint(x: 60.98, y: 29.59))
        bezierPath.addLine(to: CGPoint(x: 61, y: 28.47))
        bezierPath.addCurve(to: CGPoint(x: 61.61, y: 25.35), controlPoint1: CGPoint(x: 60.98, y: 27.4), controlPoint2: CGPoint(x: 61.19, y: 26.34))
        bezierPath.addLine(to: CGPoint(x: 61.61, y: 25.34))
        bezierPath.addCurve(to: CGPoint(x: 63.28, y: 22.95), controlPoint1: CGPoint(x: 62, y: 24.44), controlPoint2: CGPoint(x: 62.56, y: 23.62))
        bezierPath.addLine(to: CGPoint(x: 63.36, y: 22.88))
        bezierPath.addCurve(to: CGPoint(x: 65.9, y: 21.39), controlPoint1: CGPoint(x: 64.1, y: 22.22), controlPoint2: CGPoint(x: 64.96, y: 21.71))
        bezierPath.addLine(to: CGPoint(x: 65.88, y: 21.39))
        bezierPath.addCurve(to: CGPoint(x: 68.96, y: 20.85), controlPoint1: CGPoint(x: 66.87, y: 21.03), controlPoint2: CGPoint(x: 67.91, y: 20.85))
        bezierPath.addLine(to: CGPoint(x: 69.03, y: 20.85))
        bezierPath.addCurve(to: CGPoint(x: 70.55, y: 21), controlPoint1: CGPoint(x: 69.54, y: 20.85), controlPoint2: CGPoint(x: 70.05, y: 20.9))
        bezierPath.addLine(to: CGPoint(x: 70.58, y: 21))
        bezierPath.addCurve(to: CGPoint(x: 72.07, y: 21.4), controlPoint1: CGPoint(x: 71.09, y: 21.09), controlPoint2: CGPoint(x: 71.59, y: 21.22))
        bezierPath.addLine(to: CGPoint(x: 72.08, y: 21.4))
        bezierPath.addCurve(to: CGPoint(x: 73.35, y: 22), controlPoint1: CGPoint(x: 72.52, y: 21.56), controlPoint2: CGPoint(x: 72.95, y: 21.75))
        bezierPath.addLine(to: CGPoint(x: 73.37, y: 22.01))
        bezierPath.addCurve(to: CGPoint(x: 74.34, y: 22.78), controlPoint1: CGPoint(x: 73.72, y: 22.23), controlPoint2: CGPoint(x: 74.05, y: 22.49))
        bezierPath.addLine(to: CGPoint(x: 71.67, y: 26))
        bezierPath.addLine(to: CGPoint(x: 71.66, y: 25.98))
        bezierPath.addCurve(to: CGPoint(x: 70.57, y: 25.17), controlPoint1: CGPoint(x: 71.37, y: 25.63), controlPoint2: CGPoint(x: 71, y: 25.35))
        bezierPath.addLine(to: CGPoint(x: 70.59, y: 25.18))
        bezierPath.addCurve(to: CGPoint(x: 69.18, y: 24.85), controlPoint1: CGPoint(x: 70.15, y: 24.96), controlPoint2: CGPoint(x: 69.67, y: 24.85))
        bezierPath.addLine(to: CGPoint(x: 69.17, y: 24.85))
        bezierPath.addCurve(to: CGPoint(x: 67.8, y: 25.15), controlPoint1: CGPoint(x: 68.7, y: 24.84), controlPoint2: CGPoint(x: 68.23, y: 24.95))
        bezierPath.addLine(to: CGPoint(x: 67.82, y: 25.15))
        bezierPath.addCurve(to: CGPoint(x: 66.8, y: 25.97), controlPoint1: CGPoint(x: 67.43, y: 25.35), controlPoint2: CGPoint(x: 67.08, y: 25.63))
        bezierPath.addLine(to: CGPoint(x: 66.81, y: 25.96))
        bezierPath.addCurve(to: CGPoint(x: 66.14, y: 27.1), controlPoint1: CGPoint(x: 66.52, y: 26.3), controlPoint2: CGPoint(x: 66.29, y: 26.68))
        bezierPath.addLine(to: CGPoint(x: 66.13, y: 27.11))
        bezierPath.addCurve(to: CGPoint(x: 65.88, y: 28.55), controlPoint1: CGPoint(x: 65.97, y: 27.57), controlPoint2: CGPoint(x: 65.88, y: 28.06))
        bezierPath.addLine(to: CGPoint(x: 65.88, y: 28.5))
        bezierPath.addCurve(to: CGPoint(x: 66.07, y: 29.88), controlPoint1: CGPoint(x: 65.87, y: 28.97), controlPoint2: CGPoint(x: 65.94, y: 29.43))
        bezierPath.addLine(to: CGPoint(x: 66.04, y: 29.9))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMixedCase(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Mixed_Case
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 74.27, y: 0))
        bezierPath.addLine(to: CGPoint(x: 25.73, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 11.58, y: 0), controlPoint2: CGPoint(x: 0, y: 11.25))
        bezierPath.addCurve(to: CGPoint(x: 25.73, y: 50), controlPoint1: CGPoint(x: 0, y: 38.75), controlPoint2: CGPoint(x: 11.58, y: 50))
        bezierPath.addLine(to: CGPoint(x: 74.27, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 25), controlPoint1: CGPoint(x: 88.42, y: 50), controlPoint2: CGPoint(x: 100, y: 38.75))
        bezierPath.addCurve(to: CGPoint(x: 74.27, y: 0), controlPoint1: CGPoint(x: 100, y: 11.25), controlPoint2: CGPoint(x: 88.42, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 36.12, y: 35.61))
        bezierPath.addLine(to: CGPoint(x: 34.53, y: 31.61))
        bezierPath.addLine(to: CGPoint(x: 26.64, y: 31.61))
        bezierPath.addLine(to: CGPoint(x: 25.15, y: 35.61))
        bezierPath.addLine(to: CGPoint(x: 19.79, y: 35.61))
        bezierPath.addLine(to: CGPoint(x: 28.34, y: 15.22))
        bezierPath.addLine(to: CGPoint(x: 33.12, y: 15.22))
        bezierPath.addLine(to: CGPoint(x: 41.59, y: 35.61))
        bezierPath.addLine(to: CGPoint(x: 36.12, y: 35.61))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 58.55, y: 31.26))
        bezierPath.addLine(to: CGPoint(x: 58.53, y: 31.31))
        bezierPath.addCurve(to: CGPoint(x: 57.21, y: 33.7), controlPoint1: CGPoint(x: 58.25, y: 32.19), controlPoint2: CGPoint(x: 57.8, y: 33))
        bezierPath.addLine(to: CGPoint(x: 57.2, y: 33.71))
        bezierPath.addCurve(to: CGPoint(x: 55.05, y: 35.39), controlPoint1: CGPoint(x: 56.61, y: 34.41), controlPoint2: CGPoint(x: 55.88, y: 34.98))
        bezierPath.addLine(to: CGPoint(x: 55.09, y: 35.37))
        bezierPath.addCurve(to: CGPoint(x: 49.45, y: 35.37), controlPoint1: CGPoint(x: 53.3, y: 36.2), controlPoint2: CGPoint(x: 51.24, y: 36.2))
        bezierPath.addLine(to: CGPoint(x: 49.44, y: 35.37))
        bezierPath.addCurve(to: CGPoint(x: 47.46, y: 33.68), controlPoint1: CGPoint(x: 48.63, y: 35.01), controlPoint2: CGPoint(x: 47.94, y: 34.42))
        bezierPath.addLine(to: CGPoint(x: 47.42, y: 33.69))
        bezierPath.addLine(to: CGPoint(x: 47.42, y: 35.56))
        bezierPath.addLine(to: CGPoint(x: 43.09, y: 35.56))
        bezierPath.addLine(to: CGPoint(x: 43.09, y: 13.84))
        bezierPath.addLine(to: CGPoint(x: 47.81, y: 13.84))
        bezierPath.addLine(to: CGPoint(x: 47.81, y: 22.84))
        bezierPath.addLine(to: CGPoint(x: 47.87, y: 22.84))
        bezierPath.addLine(to: CGPoint(x: 47.9, y: 22.81))
        bezierPath.addCurve(to: CGPoint(x: 49.63, y: 21.48), controlPoint1: CGPoint(x: 48.39, y: 22.26), controlPoint2: CGPoint(x: 48.98, y: 21.81))
        bezierPath.addLine(to: CGPoint(x: 49.58, y: 21.51))
        bezierPath.addCurve(to: CGPoint(x: 52.27, y: 20.91), controlPoint1: CGPoint(x: 50.41, y: 21.08), controlPoint2: CGPoint(x: 51.33, y: 20.88))
        bezierPath.addLine(to: CGPoint(x: 52.23, y: 20.91))
        bezierPath.addCurve(to: CGPoint(x: 55.05, y: 21.51), controlPoint1: CGPoint(x: 53.2, y: 20.89), controlPoint2: CGPoint(x: 54.17, y: 21.1))
        bezierPath.addLine(to: CGPoint(x: 55.09, y: 21.53))
        bezierPath.addCurve(to: CGPoint(x: 57.24, y: 23.21), controlPoint1: CGPoint(x: 55.92, y: 21.93), controlPoint2: CGPoint(x: 56.65, y: 22.5))
        bezierPath.addLine(to: CGPoint(x: 57.16, y: 23.11))
        bezierPath.addCurve(to: CGPoint(x: 58.53, y: 25.55), controlPoint1: CGPoint(x: 57.76, y: 23.83), controlPoint2: CGPoint(x: 58.23, y: 24.66))
        bezierPath.addLine(to: CGPoint(x: 58.53, y: 25.54))
        bezierPath.addCurve(to: CGPoint(x: 59, y: 28.33), controlPoint1: CGPoint(x: 58.84, y: 26.44), controlPoint2: CGPoint(x: 59, y: 27.38))
        bezierPath.addLine(to: CGPoint(x: 59, y: 28.45))
        bezierPath.addCurve(to: CGPoint(x: 58.51, y: 31.38), controlPoint1: CGPoint(x: 59, y: 29.45), controlPoint2: CGPoint(x: 58.83, y: 30.44))
        bezierPath.addLine(to: CGPoint(x: 58.55, y: 31.26))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 76.87, y: 35.26))
        bezierPath.addLine(to: CGPoint(x: 76.92, y: 35.24))
        bezierPath.addCurve(to: CGPoint(x: 72.33, y: 36.17), controlPoint1: CGPoint(x: 75.48, y: 35.88), controlPoint2: CGPoint(x: 73.91, y: 36.2))
        bezierPath.addLine(to: CGPoint(x: 72.38, y: 36.17))
        bezierPath.addCurve(to: CGPoint(x: 68.1, y: 35.45), controlPoint1: CGPoint(x: 70.92, y: 36.19), controlPoint2: CGPoint(x: 69.47, y: 35.95))
        bezierPath.addLine(to: CGPoint(x: 67.87, y: 35.37))
        bezierPath.addCurve(to: CGPoint(x: 62.13, y: 29.72), controlPoint1: CGPoint(x: 65.26, y: 34.36), controlPoint2: CGPoint(x: 63.18, y: 32.32))
        bezierPath.addLine(to: CGPoint(x: 62.15, y: 29.77))
        bezierPath.addCurve(to: CGPoint(x: 61.32, y: 25.32), controlPoint1: CGPoint(x: 61.58, y: 28.36), controlPoint2: CGPoint(x: 61.29, y: 26.84))
        bezierPath.addLine(to: CGPoint(x: 61.32, y: 25.47))
        bezierPath.addCurve(to: CGPoint(x: 62.13, y: 21.09), controlPoint1: CGPoint(x: 61.29, y: 23.97), controlPoint2: CGPoint(x: 61.57, y: 22.48))
        bezierPath.addLine(to: CGPoint(x: 62.19, y: 20.95))
        bezierPath.addCurve(to: CGPoint(x: 64.55, y: 17.58), controlPoint1: CGPoint(x: 62.73, y: 19.68), controlPoint2: CGPoint(x: 63.54, y: 18.53))
        bezierPath.addLine(to: CGPoint(x: 64.46, y: 17.66))
        bezierPath.addCurve(to: CGPoint(x: 67.97, y: 15.43), controlPoint1: CGPoint(x: 65.47, y: 16.69), controlPoint2: CGPoint(x: 66.66, y: 15.93))
        bezierPath.addLine(to: CGPoint(x: 67.96, y: 15.44))
        bezierPath.addCurve(to: CGPoint(x: 76.64, y: 15.44), controlPoint1: CGPoint(x: 70.76, y: 14.41), controlPoint2: CGPoint(x: 73.84, y: 14.41))
        bezierPath.addLine(to: CGPoint(x: 76.61, y: 15.42))
        bezierPath.addCurve(to: CGPoint(x: 79.99, y: 17.66), controlPoint1: CGPoint(x: 77.91, y: 15.87), controlPoint2: CGPoint(x: 79.07, y: 16.64))
        bezierPath.addLine(to: CGPoint(x: 76.67, y: 21))
        bezierPath.addLine(to: CGPoint(x: 76.68, y: 21.01))
        bezierPath.addCurve(to: CGPoint(x: 74.86, y: 19.6), controlPoint1: CGPoint(x: 76.22, y: 20.38), controlPoint2: CGPoint(x: 75.59, y: 19.89))
        bezierPath.addLine(to: CGPoint(x: 74.87, y: 19.6))
        bezierPath.addCurve(to: CGPoint(x: 72.57, y: 19.13), controlPoint1: CGPoint(x: 74.14, y: 19.29), controlPoint2: CGPoint(x: 73.36, y: 19.13))
        bezierPath.addLine(to: CGPoint(x: 72.5, y: 19.13))
        bezierPath.addCurve(to: CGPoint(x: 70.15, y: 19.61), controlPoint1: CGPoint(x: 71.69, y: 19.13), controlPoint2: CGPoint(x: 70.9, y: 19.29))
        bezierPath.addLine(to: CGPoint(x: 70.15, y: 19.61))
        bezierPath.addCurve(to: CGPoint(x: 68.3, y: 20.93), controlPoint1: CGPoint(x: 69.46, y: 19.92), controlPoint2: CGPoint(x: 68.83, y: 20.37))
        bezierPath.addLine(to: CGPoint(x: 68.29, y: 20.94))
        bezierPath.addCurve(to: CGPoint(x: 67.11, y: 22.9), controlPoint1: CGPoint(x: 67.78, y: 21.51), controlPoint2: CGPoint(x: 67.38, y: 22.18))
        bezierPath.addLine(to: CGPoint(x: 67.13, y: 22.86))
        bezierPath.addCurve(to: CGPoint(x: 66.67, y: 25.34), controlPoint1: CGPoint(x: 66.83, y: 23.65), controlPoint2: CGPoint(x: 66.67, y: 24.49))
        bezierPath.addLine(to: CGPoint(x: 66.67, y: 25.35))
        bezierPath.addCurve(to: CGPoint(x: 67.1, y: 27.89), controlPoint1: CGPoint(x: 66.66, y: 26.22), controlPoint2: CGPoint(x: 66.8, y: 27.08))
        bezierPath.addLine(to: CGPoint(x: 67.13, y: 27.97))
        bezierPath.addCurve(to: CGPoint(x: 68.3, y: 29.94), controlPoint1: CGPoint(x: 67.39, y: 28.7), controlPoint2: CGPoint(x: 67.79, y: 29.36))
        bezierPath.addLine(to: CGPoint(x: 68.27, y: 29.9))
        bezierPath.addCurve(to: CGPoint(x: 70.07, y: 31.18), controlPoint1: CGPoint(x: 68.78, y: 30.45), controlPoint2: CGPoint(x: 69.39, y: 30.88))
        bezierPath.addLine(to: CGPoint(x: 70.1, y: 31.2))
        bezierPath.addCurve(to: CGPoint(x: 72.42, y: 31.67), controlPoint1: CGPoint(x: 70.84, y: 31.51), controlPoint2: CGPoint(x: 71.62, y: 31.67))
        bezierPath.addLine(to: CGPoint(x: 72.42, y: 31.67))
        bezierPath.addCurve(to: CGPoint(x: 74.95, y: 31.08), controlPoint1: CGPoint(x: 73.3, y: 31.68), controlPoint2: CGPoint(x: 74.17, y: 31.48))
        bezierPath.addLine(to: CGPoint(x: 75.01, y: 31.05))
        bezierPath.addCurve(to: CGPoint(x: 76.78, y: 29.52), controlPoint1: CGPoint(x: 75.72, y: 30.69), controlPoint2: CGPoint(x: 76.33, y: 30.17))
        bezierPath.addLine(to: CGPoint(x: 80.18, y: 32.79))
        bezierPath.addLine(to: CGPoint(x: 80.17, y: 32.8))
        bezierPath.addCurve(to: CGPoint(x: 76.85, y: 35.26), controlPoint1: CGPoint(x: 79.25, y: 33.85), controlPoint2: CGPoint(x: 78.12, y: 34.69))
        bezierPath.addLine(to: CGPoint(x: 76.87, y: 35.26))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 28.05, y: 27.66))
        bezierPath.addLine(to: CGPoint(x: 33.18, y: 27.66))
        bezierPath.addLine(to: CGPoint(x: 30.65, y: 20.66))
        bezierPath.addLine(to: CGPoint(x: 28.05, y: 27.66))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 53.6, y: 25.86))
        bezierPath.addLine(to: CGPoint(x: 53.58, y: 25.84))
        bezierPath.addCurve(to: CGPoint(x: 52.52, y: 25), controlPoint1: CGPoint(x: 53.29, y: 25.49), controlPoint2: CGPoint(x: 52.93, y: 25.2))
        bezierPath.addLine(to: CGPoint(x: 52.51, y: 24.99))
        bezierPath.addCurve(to: CGPoint(x: 51.03, y: 24.69), controlPoint1: CGPoint(x: 52.05, y: 24.78), controlPoint2: CGPoint(x: 51.54, y: 24.67))
        bezierPath.addLine(to: CGPoint(x: 51.06, y: 24.69))
        bezierPath.addCurve(to: CGPoint(x: 49.61, y: 25.01), controlPoint1: CGPoint(x: 50.55, y: 24.68), controlPoint2: CGPoint(x: 50.06, y: 24.79))
        bezierPath.addLine(to: CGPoint(x: 49.61, y: 25.01))
        bezierPath.addCurve(to: CGPoint(x: 48.52, y: 25.88), controlPoint1: CGPoint(x: 49.19, y: 25.22), controlPoint2: CGPoint(x: 48.82, y: 25.51))
        bezierPath.addLine(to: CGPoint(x: 48.55, y: 25.84))
        bezierPath.addCurve(to: CGPoint(x: 47.61, y: 28.36), controlPoint1: CGPoint(x: 47.94, y: 26.54), controlPoint2: CGPoint(x: 47.61, y: 27.43))
        bezierPath.addLine(to: CGPoint(x: 47.61, y: 28.35))
        bezierPath.addCurve(to: CGPoint(x: 48.55, y: 31), controlPoint1: CGPoint(x: 47.58, y: 29.32), controlPoint2: CGPoint(x: 47.91, y: 30.27))
        bezierPath.addLine(to: CGPoint(x: 48.56, y: 31.02))
        bezierPath.addCurve(to: CGPoint(x: 49.67, y: 31.85), controlPoint1: CGPoint(x: 48.87, y: 31.37), controlPoint2: CGPoint(x: 49.25, y: 31.65))
        bezierPath.addLine(to: CGPoint(x: 49.63, y: 31.83))
        bezierPath.addCurve(to: CGPoint(x: 51.08, y: 32.15), controlPoint1: CGPoint(x: 50.08, y: 32.05), controlPoint2: CGPoint(x: 50.57, y: 32.16))
        bezierPath.addLine(to: CGPoint(x: 51.07, y: 32.15))
        bezierPath.addCurve(to: CGPoint(x: 52.54, y: 31.82), controlPoint1: CGPoint(x: 51.58, y: 32.16), controlPoint2: CGPoint(x: 52.09, y: 32.05))
        bezierPath.addLine(to: CGPoint(x: 52.54, y: 31.83))
        bezierPath.addCurve(to: CGPoint(x: 53.61, y: 30.99), controlPoint1: CGPoint(x: 52.95, y: 31.63), controlPoint2: CGPoint(x: 53.32, y: 31.34))
        bezierPath.addLine(to: CGPoint(x: 53.61, y: 30.99))
        bezierPath.addCurve(to: CGPoint(x: 54.24, y: 29.82), controlPoint1: CGPoint(x: 53.89, y: 30.64), controlPoint2: CGPoint(x: 54.11, y: 30.24))
        bezierPath.addLine(to: CGPoint(x: 54.26, y: 29.76))
        bezierPath.addCurve(to: CGPoint(x: 54.46, y: 28.35), controlPoint1: CGPoint(x: 54.4, y: 29.31), controlPoint2: CGPoint(x: 54.47, y: 28.83))
        bezierPath.addLine(to: CGPoint(x: 54.46, y: 28.43))
        bezierPath.addCurve(to: CGPoint(x: 54.24, y: 26.98), controlPoint1: CGPoint(x: 54.47, y: 27.94), controlPoint2: CGPoint(x: 54.4, y: 27.45))
        bezierPath.addLine(to: CGPoint(x: 54.25, y: 27))
        bezierPath.addCurve(to: CGPoint(x: 53.62, y: 25.88), controlPoint1: CGPoint(x: 54.11, y: 26.59), controlPoint2: CGPoint(x: 53.89, y: 26.21))
        bezierPath.addLine(to: CGPoint(x: 53.6, y: 25.86))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTitleCase(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Title_Case
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 30.83, y: 27.71))
        bezierPath.addLine(to: CGPoint(x: 36, y: 27.71))
        bezierPath.addLine(to: CGPoint(x: 33.47, y: 20.71))
        bezierPath.addLine(to: CGPoint(x: 30.83, y: 27.71))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 56.38, y: 25.91))
        bezierPath.addLine(to: CGPoint(x: 56.36, y: 25.89))
        bezierPath.addCurve(to: CGPoint(x: 52.34, y: 25.11), controlPoint1: CGPoint(x: 55.35, y: 24.76), controlPoint2: CGPoint(x: 53.71, y: 24.44))
        bezierPath.addLine(to: CGPoint(x: 52.4, y: 25.08))
        bezierPath.addCurve(to: CGPoint(x: 51.33, y: 25.89), controlPoint1: CGPoint(x: 52, y: 25.28), controlPoint2: CGPoint(x: 51.63, y: 25.55))
        bezierPath.addLine(to: CGPoint(x: 51.32, y: 25.9))
        bezierPath.addCurve(to: CGPoint(x: 50.61, y: 27.1), controlPoint1: CGPoint(x: 51.02, y: 26.26), controlPoint2: CGPoint(x: 50.78, y: 26.66))
        bezierPath.addLine(to: CGPoint(x: 50.61, y: 27.1))
        bezierPath.addCurve(to: CGPoint(x: 50.61, y: 29.81), controlPoint1: CGPoint(x: 50.29, y: 27.98), controlPoint2: CGPoint(x: 50.29, y: 28.93))
        bezierPath.addLine(to: CGPoint(x: 50.6, y: 29.79))
        bezierPath.addCurve(to: CGPoint(x: 51.31, y: 30.98), controlPoint1: CGPoint(x: 50.77, y: 30.22), controlPoint2: CGPoint(x: 51.01, y: 30.63))
        bezierPath.addLine(to: CGPoint(x: 51.32, y: 31))
        bezierPath.addCurve(to: CGPoint(x: 52.39, y: 31.84), controlPoint1: CGPoint(x: 51.62, y: 31.34), controlPoint2: CGPoint(x: 51.98, y: 31.63))
        bezierPath.addLine(to: CGPoint(x: 52.4, y: 31.84))
        bezierPath.addCurve(to: CGPoint(x: 55.31, y: 31.84), controlPoint1: CGPoint(x: 53.33, y: 32.25), controlPoint2: CGPoint(x: 54.38, y: 32.25))
        bezierPath.addLine(to: CGPoint(x: 55.3, y: 31.85))
        bezierPath.addCurve(to: CGPoint(x: 56.38, y: 31), controlPoint1: CGPoint(x: 55.71, y: 31.64), controlPoint2: CGPoint(x: 56.08, y: 31.36))
        bezierPath.addLine(to: CGPoint(x: 56.38, y: 31))
        bezierPath.addCurve(to: CGPoint(x: 57.01, y: 29.77), controlPoint1: CGPoint(x: 56.67, y: 30.63), controlPoint2: CGPoint(x: 56.88, y: 30.21))
        bezierPath.addLine(to: CGPoint(x: 57.01, y: 29.78))
        bezierPath.addCurve(to: CGPoint(x: 57.21, y: 28.42), controlPoint1: CGPoint(x: 57.14, y: 29.34), controlPoint2: CGPoint(x: 57.21, y: 28.88))
        bezierPath.addLine(to: CGPoint(x: 57.21, y: 28.43))
        bezierPath.addCurve(to: CGPoint(x: 57.01, y: 27.11), controlPoint1: CGPoint(x: 57.21, y: 27.98), controlPoint2: CGPoint(x: 57.14, y: 27.54))
        bezierPath.addLine(to: CGPoint(x: 57, y: 27.06))
        bezierPath.addCurve(to: CGPoint(x: 56.39, y: 25.93), controlPoint1: CGPoint(x: 56.87, y: 26.65), controlPoint2: CGPoint(x: 56.67, y: 26.26))
        bezierPath.addLine(to: CGPoint(x: 56.38, y: 25.91))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 74.27, y: 0))
        bezierPath.addLine(to: CGPoint(x: 25.73, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 11.58, y: 0), controlPoint2: CGPoint(x: 0, y: 11.25))
        bezierPath.addCurve(to: CGPoint(x: 25.73, y: 50), controlPoint1: CGPoint(x: 0, y: 38.75), controlPoint2: CGPoint(x: 11.58, y: 50))
        bezierPath.addLine(to: CGPoint(x: 74.27, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 25), controlPoint1: CGPoint(x: 88.42, y: 50), controlPoint2: CGPoint(x: 100, y: 38.75))
        bezierPath.addCurve(to: CGPoint(x: 74.27, y: 0), controlPoint1: CGPoint(x: 100, y: 11.25), controlPoint2: CGPoint(x: 88.42, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 38.9, y: 35.66))
        bezierPath.addLine(to: CGPoint(x: 37.31, y: 31.66))
        bezierPath.addLine(to: CGPoint(x: 29.42, y: 31.66))
        bezierPath.addLine(to: CGPoint(x: 27.92, y: 35.66))
        bezierPath.addLine(to: CGPoint(x: 22.57, y: 35.66))
        bezierPath.addLine(to: CGPoint(x: 31.12, y: 15.27))
        bezierPath.addLine(to: CGPoint(x: 35.9, y: 15.27))
        bezierPath.addLine(to: CGPoint(x: 44.37, y: 35.66))
        bezierPath.addLine(to: CGPoint(x: 38.9, y: 35.66))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 61.33, y: 31.31))
        bezierPath.addLine(to: CGPoint(x: 61.31, y: 31.36))
        bezierPath.addCurve(to: CGPoint(x: 59.98, y: 33.76), controlPoint1: CGPoint(x: 61.03, y: 32.24), controlPoint2: CGPoint(x: 60.58, y: 33.05))
        bezierPath.addLine(to: CGPoint(x: 60, y: 33.74))
        bezierPath.addCurve(to: CGPoint(x: 57.9, y: 35.41), controlPoint1: CGPoint(x: 59.42, y: 34.43), controlPoint2: CGPoint(x: 58.71, y: 35))
        bezierPath.addLine(to: CGPoint(x: 57.9, y: 35.41))
        bezierPath.addCurve(to: CGPoint(x: 52.32, y: 35.46), controlPoint1: CGPoint(x: 56.14, y: 36.23), controlPoint2: CGPoint(x: 54.1, y: 36.25))
        bezierPath.addLine(to: CGPoint(x: 52.27, y: 35.43))
        bezierPath.addCurve(to: CGPoint(x: 50.27, y: 33.76), controlPoint1: CGPoint(x: 51.45, y: 35.09), controlPoint2: CGPoint(x: 50.76, y: 34.5))
        bezierPath.addLine(to: CGPoint(x: 50.21, y: 33.74))
        bezierPath.addLine(to: CGPoint(x: 50.21, y: 35.62))
        bezierPath.addLine(to: CGPoint(x: 45.87, y: 35.62))
        bezierPath.addLine(to: CGPoint(x: 45.87, y: 13.88))
        bezierPath.addLine(to: CGPoint(x: 50.59, y: 13.88))
        bezierPath.addLine(to: CGPoint(x: 50.59, y: 22.88))
        bezierPath.addLine(to: CGPoint(x: 50.65, y: 22.88))
        bezierPath.addLine(to: CGPoint(x: 50.68, y: 22.84))
        bezierPath.addCurve(to: CGPoint(x: 52.37, y: 21.55), controlPoint1: CGPoint(x: 51.16, y: 22.31), controlPoint2: CGPoint(x: 51.73, y: 21.88))
        bezierPath.addLine(to: CGPoint(x: 52.39, y: 21.54))
        bezierPath.addCurve(to: CGPoint(x: 55.01, y: 20.91), controlPoint1: CGPoint(x: 53.19, y: 21.11), controlPoint2: CGPoint(x: 54.1, y: 20.89))
        bezierPath.addLine(to: CGPoint(x: 55, y: 20.91))
        bezierPath.addCurve(to: CGPoint(x: 57.84, y: 21.54), controlPoint1: CGPoint(x: 55.98, y: 20.89), controlPoint2: CGPoint(x: 56.96, y: 21.11))
        bezierPath.addLine(to: CGPoint(x: 57.76, y: 21.5))
        bezierPath.addCurve(to: CGPoint(x: 60, y: 23.15), controlPoint1: CGPoint(x: 58.62, y: 21.88), controlPoint2: CGPoint(x: 59.38, y: 22.45))
        bezierPath.addLine(to: CGPoint(x: 59.98, y: 23.14))
        bezierPath.addCurve(to: CGPoint(x: 61.35, y: 25.55), controlPoint1: CGPoint(x: 60.58, y: 23.85), controlPoint2: CGPoint(x: 61.04, y: 24.67))
        bezierPath.addLine(to: CGPoint(x: 61.35, y: 25.56))
        bezierPath.addCurve(to: CGPoint(x: 61.82, y: 28.36), controlPoint1: CGPoint(x: 61.66, y: 26.47), controlPoint2: CGPoint(x: 61.82, y: 27.41))
        bezierPath.addLine(to: CGPoint(x: 61.82, y: 28.38))
        bezierPath.addCurve(to: CGPoint(x: 61.33, y: 31.31), controlPoint1: CGPoint(x: 61.82, y: 29.38), controlPoint2: CGPoint(x: 61.65, y: 30.37))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 69.11, y: 29.9))
        bezierPath.addLine(to: CGPoint(x: 69.12, y: 29.92))
        bezierPath.addCurve(to: CGPoint(x: 69.82, y: 31.1), controlPoint1: CGPoint(x: 69.27, y: 30.36), controlPoint2: CGPoint(x: 69.51, y: 30.76))
        bezierPath.addLine(to: CGPoint(x: 69.79, y: 31.07))
        bezierPath.addCurve(to: CGPoint(x: 70.86, y: 31.86), controlPoint1: CGPoint(x: 70.09, y: 31.4), controlPoint2: CGPoint(x: 70.45, y: 31.67))
        bezierPath.addLine(to: CGPoint(x: 70.84, y: 31.84))
        bezierPath.addCurve(to: CGPoint(x: 72.23, y: 32.14), controlPoint1: CGPoint(x: 71.27, y: 32.05), controlPoint2: CGPoint(x: 71.75, y: 32.15))
        bezierPath.addLine(to: CGPoint(x: 72.24, y: 32.14))
        bezierPath.addCurve(to: CGPoint(x: 73.65, y: 31.88), controlPoint1: CGPoint(x: 72.72, y: 32.14), controlPoint2: CGPoint(x: 73.2, y: 32.05))
        bezierPath.addLine(to: CGPoint(x: 73.66, y: 31.87))
        bezierPath.addCurve(to: CGPoint(x: 74.8, y: 31.09), controlPoint1: CGPoint(x: 74.1, y: 31.71), controlPoint2: CGPoint(x: 74.5, y: 31.44))
        bezierPath.addLine(to: CGPoint(x: 77.43, y: 34.27))
        bezierPath.addLine(to: CGPoint(x: 77.41, y: 34.29))
        bezierPath.addCurve(to: CGPoint(x: 75.13, y: 35.63), controlPoint1: CGPoint(x: 76.76, y: 34.89), controlPoint2: CGPoint(x: 75.98, y: 35.35))
        bezierPath.addLine(to: CGPoint(x: 75.17, y: 35.62))
        bezierPath.addCurve(to: CGPoint(x: 72.16, y: 36.12), controlPoint1: CGPoint(x: 74.2, y: 35.95), controlPoint2: CGPoint(x: 73.18, y: 36.12))
        bezierPath.addLine(to: CGPoint(x: 72.12, y: 36.12))
        bezierPath.addCurve(to: CGPoint(x: 68.99, y: 35.6), controlPoint1: CGPoint(x: 71.05, y: 36.12), controlPoint2: CGPoint(x: 70, y: 35.94))
        bezierPath.addLine(to: CGPoint(x: 69.02, y: 35.61))
        bezierPath.addCurve(to: CGPoint(x: 66.43, y: 34.08), controlPoint1: CGPoint(x: 68.06, y: 35.28), controlPoint2: CGPoint(x: 67.18, y: 34.76))
        bezierPath.addLine(to: CGPoint(x: 66.44, y: 34.09))
        bezierPath.addCurve(to: CGPoint(x: 64.74, y: 31.71), controlPoint1: CGPoint(x: 65.72, y: 33.42), controlPoint2: CGPoint(x: 65.14, y: 32.61))
        bezierPath.addLine(to: CGPoint(x: 64.74, y: 31.7))
        bezierPath.addCurve(to: CGPoint(x: 64.11, y: 28.47), controlPoint1: CGPoint(x: 64.3, y: 30.68), controlPoint2: CGPoint(x: 64.09, y: 29.58))
        bezierPath.addLine(to: CGPoint(x: 64.11, y: 28.51))
        bezierPath.addCurve(to: CGPoint(x: 64.73, y: 25.32), controlPoint1: CGPoint(x: 64.09, y: 27.41), controlPoint2: CGPoint(x: 64.3, y: 26.33))
        bezierPath.addLine(to: CGPoint(x: 64.75, y: 25.27))
        bezierPath.addCurve(to: CGPoint(x: 66.52, y: 22.84), controlPoint1: CGPoint(x: 65.16, y: 24.34), controlPoint2: CGPoint(x: 65.77, y: 23.52))
        bezierPath.addLine(to: CGPoint(x: 66.44, y: 22.91))
        bezierPath.addCurve(to: CGPoint(x: 69.04, y: 21.37), controlPoint1: CGPoint(x: 67.2, y: 22.23), controlPoint2: CGPoint(x: 68.08, y: 21.71))
        bezierPath.addLine(to: CGPoint(x: 68.99, y: 21.39))
        bezierPath.addCurve(to: CGPoint(x: 72.07, y: 20.85), controlPoint1: CGPoint(x: 69.98, y: 21.03), controlPoint2: CGPoint(x: 71.02, y: 20.85))
        bezierPath.addLine(to: CGPoint(x: 72.15, y: 20.85))
        bezierPath.addCurve(to: CGPoint(x: 73.65, y: 20.99), controlPoint1: CGPoint(x: 72.65, y: 20.85), controlPoint2: CGPoint(x: 73.16, y: 20.9))
        bezierPath.addLine(to: CGPoint(x: 73.69, y: 21))
        bezierPath.addCurve(to: CGPoint(x: 75.18, y: 21.4), controlPoint1: CGPoint(x: 74.2, y: 21.09), controlPoint2: CGPoint(x: 74.7, y: 21.22))
        bezierPath.addLine(to: CGPoint(x: 75.11, y: 21.38))
        bezierPath.addCurve(to: CGPoint(x: 76.44, y: 21.98), controlPoint1: CGPoint(x: 75.57, y: 21.53), controlPoint2: CGPoint(x: 76.02, y: 21.73))
        bezierPath.addLine(to: CGPoint(x: 76.48, y: 22.01))
        bezierPath.addCurve(to: CGPoint(x: 77.45, y: 22.78), controlPoint1: CGPoint(x: 76.83, y: 22.23), controlPoint2: CGPoint(x: 77.16, y: 22.49))
        bezierPath.addLine(to: CGPoint(x: 74.7, y: 26))
        bezierPath.addLine(to: CGPoint(x: 74.7, y: 26))
        bezierPath.addCurve(to: CGPoint(x: 73.6, y: 25.17), controlPoint1: CGPoint(x: 74.41, y: 25.64), controlPoint2: CGPoint(x: 74.03, y: 25.35))
        bezierPath.addLine(to: CGPoint(x: 73.61, y: 25.18))
        bezierPath.addCurve(to: CGPoint(x: 72.2, y: 24.85), controlPoint1: CGPoint(x: 73.17, y: 24.96), controlPoint2: CGPoint(x: 72.69, y: 24.85))
        bezierPath.addLine(to: CGPoint(x: 72.2, y: 24.85))
        bezierPath.addCurve(to: CGPoint(x: 70.83, y: 25.15), controlPoint1: CGPoint(x: 71.73, y: 24.84), controlPoint2: CGPoint(x: 71.26, y: 24.95))
        bezierPath.addLine(to: CGPoint(x: 70.86, y: 25.14))
        bezierPath.addCurve(to: CGPoint(x: 69.86, y: 25.93), controlPoint1: CGPoint(x: 70.48, y: 25.34), controlPoint2: CGPoint(x: 70.14, y: 25.6))
        bezierPath.addLine(to: CGPoint(x: 69.86, y: 25.94))
        bezierPath.addCurve(to: CGPoint(x: 69.18, y: 27.07), controlPoint1: CGPoint(x: 69.57, y: 26.27), controlPoint2: CGPoint(x: 69.34, y: 26.66))
        bezierPath.addLine(to: CGPoint(x: 69.16, y: 27.11))
        bezierPath.addCurve(to: CGPoint(x: 69.16, y: 29.96), controlPoint1: CGPoint(x: 68.85, y: 28.03), controlPoint2: CGPoint(x: 68.85, y: 29.04))
        bezierPath.addLine(to: CGPoint(x: 69.11, y: 29.9))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawUppercase(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 50)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 52.75, y: 22.36))
        bezierPath.addLine(to: CGPoint(x: 52.76, y: 22.35))
        bezierPath.addCurve(to: CGPoint(x: 53.51, y: 20.7), controlPoint1: CGPoint(x: 53.27, y: 21.97), controlPoint2: CGPoint(x: 53.55, y: 21.35))
        bezierPath.addLine(to: CGPoint(x: 53.51, y: 20.71))
        bezierPath.addCurve(to: CGPoint(x: 52.73, y: 19.21), controlPoint1: CGPoint(x: 53.55, y: 20.1), controlPoint2: CGPoint(x: 53.25, y: 19.52))
        bezierPath.addLine(to: CGPoint(x: 52.75, y: 19.21))
        bezierPath.addCurve(to: CGPoint(x: 50.41, y: 18.72), controlPoint1: CGPoint(x: 52.03, y: 18.85), controlPoint2: CGPoint(x: 51.22, y: 18.68))
        bezierPath.addLine(to: CGPoint(x: 48, y: 18.72))
        bezierPath.addLine(to: CGPoint(x: 48, y: 22.93))
        bezierPath.addLine(to: CGPoint(x: 50.6, y: 22.93))
        bezierPath.addLine(to: CGPoint(x: 50.57, y: 22.93))
        bezierPath.addCurve(to: CGPoint(x: 52.74, y: 22.37), controlPoint1: CGPoint(x: 51.33, y: 22.98), controlPoint2: CGPoint(x: 52.1, y: 22.78))
        bezierPath.addLine(to: CGPoint(x: 52.75, y: 22.36))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 53.23, y: 27))
        bezierPath.addLine(to: CGPoint(x: 53.25, y: 27.01))
        bezierPath.addCurve(to: CGPoint(x: 50.73, y: 26.52), controlPoint1: CGPoint(x: 52.46, y: 26.66), controlPoint2: CGPoint(x: 51.6, y: 26.49))
        bezierPath.addLine(to: CGPoint(x: 48, y: 26.52))
        bezierPath.addLine(to: CGPoint(x: 48, y: 31.18))
        bezierPath.addLine(to: CGPoint(x: 50.77, y: 31.18))
        bezierPath.addLine(to: CGPoint(x: 50.77, y: 31.18))
        bezierPath.addCurve(to: CGPoint(x: 51.91, y: 31.09), controlPoint1: CGPoint(x: 51.15, y: 31.18), controlPoint2: CGPoint(x: 51.53, y: 31.15))
        bezierPath.addLine(to: CGPoint(x: 52, y: 31.07))
        bezierPath.addCurve(to: CGPoint(x: 53, y: 30.76), controlPoint1: CGPoint(x: 52.35, y: 31.01), controlPoint2: CGPoint(x: 52.68, y: 30.91))
        bezierPath.addLine(to: CGPoint(x: 52.99, y: 30.76))
        bezierPath.addCurve(to: CGPoint(x: 54.14, y: 28.78), controlPoint1: CGPoint(x: 53.76, y: 30.41), controlPoint2: CGPoint(x: 54.21, y: 29.61))
        bezierPath.addLine(to: CGPoint(x: 54.14, y: 28.77))
        bezierPath.addCurve(to: CGPoint(x: 53.24, y: 27.01), controlPoint1: CGPoint(x: 54.21, y: 28.06), controlPoint2: CGPoint(x: 53.86, y: 27.36))
        bezierPath.addLine(to: CGPoint(x: 53.23, y: 27))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 28, y: 27.25))
        bezierPath.addLine(to: CGPoint(x: 33.12, y: 27.25))
        bezierPath.addLine(to: CGPoint(x: 30.59, y: 20.25))
        bezierPath.addLine(to: CGPoint(x: 28, y: 27.25))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 74.27, y: 0))
        bezierPath.addLine(to: CGPoint(x: 25.73, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 11.58, y: 0), controlPoint2: CGPoint(x: 0, y: 11.25))
        bezierPath.addCurve(to: CGPoint(x: 25.73, y: 50), controlPoint1: CGPoint(x: 0, y: 38.75), controlPoint2: CGPoint(x: 11.58, y: 50))
        bezierPath.addLine(to: CGPoint(x: 74.27, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 25), controlPoint1: CGPoint(x: 88.42, y: 50), controlPoint2: CGPoint(x: 100, y: 38.75))
        bezierPath.addCurve(to: CGPoint(x: 74.27, y: 0), controlPoint1: CGPoint(x: 100, y: 11.25), controlPoint2: CGPoint(x: 88.42, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 36, y: 35.2))
        bezierPath.addLine(to: CGPoint(x: 34.42, y: 31.2))
        bezierPath.addLine(to: CGPoint(x: 26.56, y: 31.2))
        bezierPath.addLine(to: CGPoint(x: 25.06, y: 35.2))
        bezierPath.addLine(to: CGPoint(x: 19.7, y: 35.2))
        bezierPath.addLine(to: CGPoint(x: 28.26, y: 14.8))
        bezierPath.addLine(to: CGPoint(x: 33, y: 14.8))
        bezierPath.addLine(to: CGPoint(x: 41.5, y: 35.2))
        bezierPath.addLine(to: CGPoint(x: 36, y: 35.2))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 58.41, y: 32.07))
        bezierPath.addLine(to: CGPoint(x: 58.4, y: 32.08))
        bezierPath.addCurve(to: CGPoint(x: 56.64, y: 33.9), controlPoint1: CGPoint(x: 57.97, y: 32.82), controlPoint2: CGPoint(x: 57.37, y: 33.45))
        bezierPath.addLine(to: CGPoint(x: 56.65, y: 33.9))
        bezierPath.addCurve(to: CGPoint(x: 54.19, y: 34.89), controlPoint1: CGPoint(x: 55.89, y: 34.37), controlPoint2: CGPoint(x: 55.06, y: 34.71))
        bezierPath.addLine(to: CGPoint(x: 54.1, y: 34.91))
        bezierPath.addCurve(to: CGPoint(x: 51.27, y: 35.21), controlPoint1: CGPoint(x: 53.17, y: 35.11), controlPoint2: CGPoint(x: 52.22, y: 35.21))
        bezierPath.addLine(to: CGPoint(x: 43.2, y: 35.21))
        bezierPath.addLine(to: CGPoint(x: 43.2, y: 14.8))
        bezierPath.addLine(to: CGPoint(x: 51.32, y: 14.8))
        bezierPath.addLine(to: CGPoint(x: 51.23, y: 14.8))
        bezierPath.addCurve(to: CGPoint(x: 53.65, y: 15.03), controlPoint1: CGPoint(x: 52.05, y: 14.8), controlPoint2: CGPoint(x: 52.86, y: 14.88))
        bezierPath.addLine(to: CGPoint(x: 53.79, y: 15.06))
        bezierPath.addCurve(to: CGPoint(x: 56, y: 15.88), controlPoint1: CGPoint(x: 54.57, y: 15.21), controlPoint2: CGPoint(x: 55.31, y: 15.49))
        bezierPath.addLine(to: CGPoint(x: 56.02, y: 15.9))
        bezierPath.addCurve(to: CGPoint(x: 58.27, y: 20.05), controlPoint1: CGPoint(x: 57.49, y: 16.74), controlPoint2: CGPoint(x: 58.36, y: 18.35))
        bezierPath.addLine(to: CGPoint(x: 58.27, y: 20.07))
        bezierPath.addCurve(to: CGPoint(x: 57.34, y: 22.85), controlPoint1: CGPoint(x: 58.31, y: 21.08), controlPoint2: CGPoint(x: 57.98, y: 22.07))
        bezierPath.addLine(to: CGPoint(x: 57.33, y: 22.86))
        bezierPath.addCurve(to: CGPoint(x: 54.94, y: 24.45), controlPoint1: CGPoint(x: 56.7, y: 23.61), controlPoint2: CGPoint(x: 55.87, y: 24.16))
        bezierPath.addLine(to: CGPoint(x: 54.92, y: 24.51))
        bezierPath.addLine(to: CGPoint(x: 54.89, y: 24.5))
        bezierPath.addCurve(to: CGPoint(x: 56.49, y: 25.01), controlPoint1: CGPoint(x: 55.44, y: 24.59), controlPoint2: CGPoint(x: 55.98, y: 24.76))
        bezierPath.addLine(to: CGPoint(x: 56.57, y: 25.05))
        bezierPath.addCurve(to: CGPoint(x: 57.87, y: 26.03), controlPoint1: CGPoint(x: 57.06, y: 25.3), controlPoint2: CGPoint(x: 57.5, y: 25.63))
        bezierPath.addLine(to: CGPoint(x: 57.86, y: 26.02))
        bezierPath.addCurve(to: CGPoint(x: 58.77, y: 27.44), controlPoint1: CGPoint(x: 58.25, y: 26.43), controlPoint2: CGPoint(x: 58.55, y: 26.92))
        bezierPath.addLine(to: CGPoint(x: 58.79, y: 27.49))
        bezierPath.addCurve(to: CGPoint(x: 59.1, y: 29.27), controlPoint1: CGPoint(x: 59, y: 28.06), controlPoint2: CGPoint(x: 59.11, y: 28.66))
        bezierPath.addLine(to: CGPoint(x: 59.1, y: 29.26))
        bezierPath.addCurve(to: CGPoint(x: 58.46, y: 32.04), controlPoint1: CGPoint(x: 59.13, y: 30.22), controlPoint2: CGPoint(x: 58.91, y: 31.18))
        bezierPath.addLine(to: CGPoint(x: 58.41, y: 32.07))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 77, y: 34.84))
        bezierPath.addLine(to: CGPoint(x: 76.94, y: 34.87))
        bezierPath.addCurve(to: CGPoint(x: 72.45, y: 35.74), controlPoint1: CGPoint(x: 75.52, y: 35.47), controlPoint2: CGPoint(x: 73.99, y: 35.77))
        bezierPath.addLine(to: CGPoint(x: 72.4, y: 35.74))
        bezierPath.addCurve(to: CGPoint(x: 68.02, y: 35.01), controlPoint1: CGPoint(x: 70.91, y: 35.77), controlPoint2: CGPoint(x: 69.42, y: 35.52))
        bezierPath.addLine(to: CGPoint(x: 67.96, y: 34.98))
        bezierPath.addCurve(to: CGPoint(x: 62.21, y: 29.34), controlPoint1: CGPoint(x: 65.34, y: 33.98), controlPoint2: CGPoint(x: 63.26, y: 31.94))
        bezierPath.addLine(to: CGPoint(x: 62.22, y: 29.35))
        bezierPath.addCurve(to: CGPoint(x: 61.41, y: 24.99), controlPoint1: CGPoint(x: 61.66, y: 27.97), controlPoint2: CGPoint(x: 61.38, y: 26.48))
        bezierPath.addLine(to: CGPoint(x: 61.41, y: 25.03))
        bezierPath.addCurve(to: CGPoint(x: 62.23, y: 20.62), controlPoint1: CGPoint(x: 61.38, y: 23.52), controlPoint2: CGPoint(x: 61.66, y: 22.02))
        bezierPath.addLine(to: CGPoint(x: 62.27, y: 20.52))
        bezierPath.addCurve(to: CGPoint(x: 64.62, y: 17.16), controlPoint1: CGPoint(x: 62.81, y: 19.24), controlPoint2: CGPoint(x: 63.61, y: 18.1))
        bezierPath.addLine(to: CGPoint(x: 64.63, y: 17.15))
        bezierPath.addCurve(to: CGPoint(x: 68.17, y: 14.98), controlPoint1: CGPoint(x: 65.65, y: 16.2), controlPoint2: CGPoint(x: 66.86, y: 15.46))
        bezierPath.addLine(to: CGPoint(x: 68.11, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 76.72, y: 15), controlPoint1: CGPoint(x: 70.89, y: 13.99), controlPoint2: CGPoint(x: 73.94, y: 13.99))
        bezierPath.addLine(to: CGPoint(x: 76.71, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 80.13, y: 17.27), controlPoint1: CGPoint(x: 78.02, y: 15.45), controlPoint2: CGPoint(x: 79.2, y: 16.23))
        bezierPath.addLine(to: CGPoint(x: 76.76, y: 20.57))
        bezierPath.addLine(to: CGPoint(x: 76.78, y: 20.6))
        bezierPath.addCurve(to: CGPoint(x: 74.94, y: 19.16), controlPoint1: CGPoint(x: 76.31, y: 19.96), controlPoint2: CGPoint(x: 75.68, y: 19.46))
        bezierPath.addLine(to: CGPoint(x: 74.91, y: 19.15))
        bezierPath.addCurve(to: CGPoint(x: 72.6, y: 18.7), controlPoint1: CGPoint(x: 74.18, y: 18.85), controlPoint2: CGPoint(x: 73.39, y: 18.7))
        bezierPath.addLine(to: CGPoint(x: 72.67, y: 18.7))
        bezierPath.addCurve(to: CGPoint(x: 70.31, y: 19.16), controlPoint1: CGPoint(x: 71.86, y: 18.69), controlPoint2: CGPoint(x: 71.05, y: 18.84))
        bezierPath.addLine(to: CGPoint(x: 70.27, y: 19.18))
        bezierPath.addCurve(to: CGPoint(x: 68.41, y: 20.48), controlPoint1: CGPoint(x: 69.57, y: 19.47), controlPoint2: CGPoint(x: 68.93, y: 19.92))
        bezierPath.addLine(to: CGPoint(x: 68.43, y: 20.46))
        bezierPath.addCurve(to: CGPoint(x: 67.2, y: 22.46), controlPoint1: CGPoint(x: 67.89, y: 21.04), controlPoint2: CGPoint(x: 67.47, y: 21.72))
        bezierPath.addLine(to: CGPoint(x: 67.19, y: 22.49))
        bezierPath.addCurve(to: CGPoint(x: 66.76, y: 25.06), controlPoint1: CGPoint(x: 66.89, y: 23.31), controlPoint2: CGPoint(x: 66.75, y: 24.18))
        bezierPath.addLine(to: CGPoint(x: 66.76, y: 25.05))
        bezierPath.addCurve(to: CGPoint(x: 67.21, y: 27.58), controlPoint1: CGPoint(x: 66.76, y: 25.92), controlPoint2: CGPoint(x: 66.91, y: 26.77))
        bezierPath.addLine(to: CGPoint(x: 67.2, y: 27.56))
        bezierPath.addCurve(to: CGPoint(x: 68.38, y: 29.53), controlPoint1: CGPoint(x: 67.46, y: 28.29), controlPoint2: CGPoint(x: 67.86, y: 28.95))
        bezierPath.addLine(to: CGPoint(x: 68.38, y: 29.53))
        bezierPath.addCurve(to: CGPoint(x: 70.22, y: 30.82), controlPoint1: CGPoint(x: 68.9, y: 30.09), controlPoint2: CGPoint(x: 69.53, y: 30.53))
        bezierPath.addLine(to: CGPoint(x: 70.22, y: 30.82))
        bezierPath.addCurve(to: CGPoint(x: 72.58, y: 31.28), controlPoint1: CGPoint(x: 70.97, y: 31.14), controlPoint2: CGPoint(x: 71.77, y: 31.29))
        bezierPath.addLine(to: CGPoint(x: 72.59, y: 31.28))
        bezierPath.addCurve(to: CGPoint(x: 75.11, y: 30.7), controlPoint1: CGPoint(x: 73.47, y: 31.3), controlPoint2: CGPoint(x: 74.33, y: 31.1))
        bezierPath.addLine(to: CGPoint(x: 75.12, y: 30.7))
        bezierPath.addCurve(to: CGPoint(x: 76.89, y: 29.18), controlPoint1: CGPoint(x: 75.82, y: 30.34), controlPoint2: CGPoint(x: 76.43, y: 29.82))
        bezierPath.addLine(to: CGPoint(x: 80.3, y: 32.43))
        bezierPath.addLine(to: CGPoint(x: 80.28, y: 32.46))
        bezierPath.addCurve(to: CGPoint(x: 76.99, y: 34.84), controlPoint1: CGPoint(x: 79.36, y: 33.47), controlPoint2: CGPoint(x: 78.24, y: 34.29))
        bezierPath.addLine(to: CGPoint(x: 77, y: 34.84))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCharacterSeparator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 50, y: 0))
        bezierPath.addLine(to: CGPoint(x: 50, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 50), controlPoint1: CGPoint(x: 22.39, y: 0), controlPoint2: CGPoint(x: 0, y: 22.39))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 100), controlPoint1: CGPoint(x: 0, y: 77.61), controlPoint2: CGPoint(x: 22.39, y: 100))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 50), controlPoint1: CGPoint(x: 77.61, y: 100), controlPoint2: CGPoint(x: 100, y: 77.61))
        bezierPath.addLine(to: CGPoint(x: 100, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 0), controlPoint1: CGPoint(x: 100, y: 22.39), controlPoint2: CGPoint(x: 77.61, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 67.86, y: 72.66))
        bezierPath.addLine(to: CGPoint(x: 32.14, y: 72.66))
        bezierPath.addLine(to: CGPoint(x: 32.14, y: 63.17))
        bezierPath.addLine(to: CGPoint(x: 53.71, y: 36.56))
        bezierPath.addLine(to: CGPoint(x: 32.66, y: 36.56))
        bezierPath.addLine(to: CGPoint(x: 32.66, y: 27.34))
        bezierPath.addLine(to: CGPoint(x: 67.41, y: 27.34))
        bezierPath.addLine(to: CGPoint(x: 67.41, y: 36.11))
        bezierPath.addLine(to: CGPoint(x: 45.33, y: 63.18))
        bezierPath.addLine(to: CGPoint(x: 67.86, y: 63.18))
        bezierPath.addLine(to: CGPoint(x: 67.86, y: 72.66))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawEmojiSeparator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 50, y: 0))
        bezierPath.addLine(to: CGPoint(x: 50, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 50), controlPoint1: CGPoint(x: 22.39, y: 0), controlPoint2: CGPoint(x: 0, y: 22.39))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 100), controlPoint1: CGPoint(x: 0, y: 77.61), controlPoint2: CGPoint(x: 22.39, y: 100))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 50), controlPoint1: CGPoint(x: 77.61, y: 100), controlPoint2: CGPoint(x: 100, y: 77.61))
        bezierPath.addLine(to: CGPoint(x: 100, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 0), controlPoint1: CGPoint(x: 100, y: 22.39), controlPoint2: CGPoint(x: 77.61, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 63.43, y: 29))
        bezierPath.addCurve(to: CGPoint(x: 67.63, y: 38.56), controlPoint1: CGPoint(x: 65.75, y: 29), controlPoint2: CGPoint(x: 67.63, y: 33.28))
        bezierPath.addCurve(to: CGPoint(x: 63.43, y: 48.12), controlPoint1: CGPoint(x: 67.63, y: 43.84), controlPoint2: CGPoint(x: 65.75, y: 48.12))
        bezierPath.addCurve(to: CGPoint(x: 59.24, y: 38.56), controlPoint1: CGPoint(x: 61.11, y: 48.12), controlPoint2: CGPoint(x: 59.24, y: 43.84))
        bezierPath.addCurve(to: CGPoint(x: 63.43, y: 29), controlPoint1: CGPoint(x: 59.24, y: 33.28), controlPoint2: CGPoint(x: 61.12, y: 29))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 36.57, y: 29))
        bezierPath.addCurve(to: CGPoint(x: 40.76, y: 38.56), controlPoint1: CGPoint(x: 38.88, y: 29), controlPoint2: CGPoint(x: 40.76, y: 33.28))
        bezierPath.addCurve(to: CGPoint(x: 36.57, y: 48.12), controlPoint1: CGPoint(x: 40.76, y: 43.84), controlPoint2: CGPoint(x: 38.88, y: 48.12))
        bezierPath.addCurve(to: CGPoint(x: 32.37, y: 38.56), controlPoint1: CGPoint(x: 34.26, y: 48.12), controlPoint2: CGPoint(x: 32.37, y: 43.84))
        bezierPath.addCurve(to: CGPoint(x: 36.57, y: 29), controlPoint1: CGPoint(x: 32.37, y: 33.28), controlPoint2: CGPoint(x: 34.25, y: 29))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 50, y: 73.15))
        bezierPath.addCurve(to: CGPoint(x: 30.49, y: 64.66), controlPoint1: CGPoint(x: 35.44, y: 73.15), controlPoint2: CGPoint(x: 30.69, y: 65))
        bezierPath.addLine(to: CGPoint(x: 34.29, y: 62.5))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 68.78), controlPoint1: CGPoint(x: 34.44, y: 62.75), controlPoint2: CGPoint(x: 38.15, y: 68.78))
        bezierPath.addCurve(to: CGPoint(x: 65.75, y: 62.51), controlPoint1: CGPoint(x: 62, y: 68.78), controlPoint2: CGPoint(x: 65.71, y: 62.57))
        bezierPath.addLine(to: CGPoint(x: 69.55, y: 64.67))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 73.15), controlPoint1: CGPoint(x: 69.33, y: 65), controlPoint2: CGPoint(x: 64.54, y: 73.15))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHyphenSeparator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 50, y: 0))
        bezierPath.addLine(to: CGPoint(x: 50, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 50), controlPoint1: CGPoint(x: 22.39, y: 0), controlPoint2: CGPoint(x: 0, y: 22.39))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 100), controlPoint1: CGPoint(x: 0, y: 77.61), controlPoint2: CGPoint(x: 22.39, y: 100))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 50), controlPoint1: CGPoint(x: 77.61, y: 100), controlPoint2: CGPoint(x: 100, y: 77.61))
        bezierPath.addLine(to: CGPoint(x: 100, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 0), controlPoint1: CGPoint(x: 100, y: 22.39), controlPoint2: CGPoint(x: 77.61, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 67.28, y: 53.33))
        bezierPath.addLine(to: CGPoint(x: 32.72, y: 53.33))
        bezierPath.addLine(to: CGPoint(x: 32.72, y: 46.67))
        bezierPath.addLine(to: CGPoint(x: 67.28, y: 46.67))
        bezierPath.addLine(to: CGPoint(x: 67.28, y: 53.33))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawNumberSeparator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 50.06, y: 35.57))
        bezierPath.addLine(to: CGPoint(x: 50.1, y: 35.57))
        bezierPath.addCurve(to: CGPoint(x: 44.87, y: 37.53), controlPoint1: CGPoint(x: 48.16, y: 35.47), controlPoint2: CGPoint(x: 46.27, y: 36.18))
        bezierPath.addLine(to: CGPoint(x: 44.87, y: 37.53))
        bezierPath.addCurve(to: CGPoint(x: 42.83, y: 42.84), controlPoint1: CGPoint(x: 43.5, y: 38.95), controlPoint2: CGPoint(x: 42.76, y: 40.87))
        bezierPath.addLine(to: CGPoint(x: 42.83, y: 42.85))
        bezierPath.addCurve(to: CGPoint(x: 44.82, y: 48.03), controlPoint1: CGPoint(x: 42.76, y: 44.78), controlPoint2: CGPoint(x: 43.48, y: 46.64))
        bezierPath.addLine(to: CGPoint(x: 44.81, y: 48.02))
        bezierPath.addCurve(to: CGPoint(x: 49.96, y: 50), controlPoint1: CGPoint(x: 46.17, y: 49.38), controlPoint2: CGPoint(x: 48.04, y: 50.1))
        bezierPath.addLine(to: CGPoint(x: 49.95, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 57.14, y: 43.53), controlPoint1: CGPoint(x: 53.72, y: 50.2), controlPoint2: CGPoint(x: 56.94, y: 47.3))
        bezierPath.addCurve(to: CGPoint(x: 57.14, y: 42.81), controlPoint1: CGPoint(x: 57.15, y: 43.29), controlPoint2: CGPoint(x: 57.15, y: 43.05))
        bezierPath.addLine(to: CGPoint(x: 57.14, y: 42.84))
        bezierPath.addCurve(to: CGPoint(x: 55.22, y: 37.72), controlPoint1: CGPoint(x: 57.17, y: 40.96), controlPoint2: CGPoint(x: 56.49, y: 39.13))
        bezierPath.addLine(to: CGPoint(x: 55.23, y: 37.73))
        bezierPath.addCurve(to: CGPoint(x: 50.02, y: 35.57), controlPoint1: CGPoint(x: 53.91, y: 36.26), controlPoint2: CGPoint(x: 51.99, y: 35.47))
        bezierPath.addLine(to: CGPoint(x: 50.06, y: 35.57))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 50, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 50, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 50), controlPoint1: CGPoint(x: 22.39, y: 0), controlPoint2: CGPoint(x: 0, y: 22.39))
        bezier2Path.addCurve(to: CGPoint(x: 50, y: 100), controlPoint1: CGPoint(x: 0, y: 77.61), controlPoint2: CGPoint(x: 22.39, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 50), controlPoint1: CGPoint(x: 77.61, y: 100), controlPoint2: CGPoint(x: 100, y: 77.61))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 50))
        bezier2Path.addCurve(to: CGPoint(x: 50, y: 0), controlPoint1: CGPoint(x: 100, y: 22.39), controlPoint2: CGPoint(x: 77.61, y: 0))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 66.42, y: 50.26))
        bezier2Path.addLine(to: CGPoint(x: 66.56, y: 49.93))
        bezier2Path.addCurve(to: CGPoint(x: 63.1, y: 56.43), controlPoint1: CGPoint(x: 65.6, y: 52.2), controlPoint2: CGPoint(x: 64.44, y: 54.37))
        bezier2Path.addLine(to: CGPoint(x: 51.84, y: 73.26))
        bezier2Path.addLine(to: CGPoint(x: 38.84, y: 73.26))
        bezier2Path.addLine(to: CGPoint(x: 50.13, y: 57.65))
        bezier2Path.addLine(to: CGPoint(x: 50.26, y: 57.46))
        bezier2Path.addLine(to: CGPoint(x: 50.24, y: 57.47))
        bezier2Path.addCurve(to: CGPoint(x: 48.68, y: 57.84), controlPoint1: CGPoint(x: 49.73, y: 57.64), controlPoint2: CGPoint(x: 49.21, y: 57.77))
        bezier2Path.addLine(to: CGPoint(x: 48.69, y: 57.84))
        bezier2Path.addCurve(to: CGPoint(x: 47.04, y: 57.97), controlPoint1: CGPoint(x: 48.14, y: 57.93), controlPoint2: CGPoint(x: 47.59, y: 57.97))
        bezier2Path.addLine(to: CGPoint(x: 46.96, y: 57.97))
        bezier2Path.addCurve(to: CGPoint(x: 41.26, y: 56.86), controlPoint1: CGPoint(x: 45.01, y: 57.97), controlPoint2: CGPoint(x: 43.07, y: 57.59))
        bezier2Path.addLine(to: CGPoint(x: 41.38, y: 56.91))
        bezier2Path.addCurve(to: CGPoint(x: 36.61, y: 53.87), controlPoint1: CGPoint(x: 39.6, y: 56.23), controlPoint2: CGPoint(x: 37.98, y: 55.19))
        bezier2Path.addLine(to: CGPoint(x: 36.61, y: 53.87))
        bezier2Path.addCurve(to: CGPoint(x: 32.18, y: 43.18), controlPoint1: CGPoint(x: 33.71, y: 51.07), controlPoint2: CGPoint(x: 32.11, y: 47.2))
        bezier2Path.addLine(to: CGPoint(x: 32.18, y: 43.23))
        bezier2Path.addCurve(to: CGPoint(x: 33.61, y: 36.22), controlPoint1: CGPoint(x: 32.14, y: 40.82), controlPoint2: CGPoint(x: 32.63, y: 38.42))
        bezier2Path.addLine(to: CGPoint(x: 33.55, y: 36.34))
        bezier2Path.addCurve(to: CGPoint(x: 37.27, y: 31.22), controlPoint1: CGPoint(x: 34.42, y: 34.39), controlPoint2: CGPoint(x: 35.69, y: 32.65))
        bezier2Path.addLine(to: CGPoint(x: 37.36, y: 31.14))
        bezier2Path.addCurve(to: CGPoint(x: 42.93, y: 27.93), controlPoint1: CGPoint(x: 38.99, y: 29.72), controlPoint2: CGPoint(x: 40.88, y: 28.63))
        bezier2Path.addLine(to: CGPoint(x: 43.23, y: 27.83))
        bezier2Path.addCurve(to: CGPoint(x: 57.19, y: 27.95), controlPoint1: CGPoint(x: 47.78, y: 26.35), controlPoint2: CGPoint(x: 52.68, y: 26.39))
        bezier2Path.addLine(to: CGPoint(x: 56.88, y: 27.84))
        bezier2Path.addCurve(to: CGPoint(x: 62.59, y: 31.07), controlPoint1: CGPoint(x: 58.98, y: 28.53), controlPoint2: CGPoint(x: 60.92, y: 29.62))
        bezier2Path.addLine(to: CGPoint(x: 62.7, y: 31.17))
        bezier2Path.addCurve(to: CGPoint(x: 66.51, y: 36.41), controlPoint1: CGPoint(x: 64.32, y: 32.63), controlPoint2: CGPoint(x: 65.62, y: 34.42))
        bezier2Path.addLine(to: CGPoint(x: 66.46, y: 36.31))
        bezier2Path.addCurve(to: CGPoint(x: 67.82, y: 42.99), controlPoint1: CGPoint(x: 67.4, y: 38.41), controlPoint2: CGPoint(x: 67.86, y: 40.69))
        bezier2Path.addLine(to: CGPoint(x: 67.82, y: 42.85))
        bezier2Path.addCurve(to: CGPoint(x: 66.46, y: 50.15), controlPoint1: CGPoint(x: 67.86, y: 45.35), controlPoint2: CGPoint(x: 67.4, y: 47.83))
        bezier2Path.addLine(to: CGPoint(x: 66.42, y: 50.26))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRandomSeparator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 55.66, y: 44.11))
        bezierPath.addLine(to: CGPoint(x: 55.7, y: 44.15))
        bezierPath.addCurve(to: CGPoint(x: 53.29, y: 42.43), controlPoint1: CGPoint(x: 55.02, y: 43.42), controlPoint2: CGPoint(x: 54.2, y: 42.84))
        bezierPath.addLine(to: CGPoint(x: 53.29, y: 42.43))
        bezierPath.addCurve(to: CGPoint(x: 50.08, y: 41.78), controlPoint1: CGPoint(x: 52.28, y: 41.98), controlPoint2: CGPoint(x: 51.18, y: 41.76))
        bezierPath.addLine(to: CGPoint(x: 50.09, y: 41.78))
        bezierPath.addCurve(to: CGPoint(x: 44.57, y: 44.07), controlPoint1: CGPoint(x: 48.02, y: 41.74), controlPoint2: CGPoint(x: 46.01, y: 42.57))
        bezierPath.addLine(to: CGPoint(x: 44.53, y: 44.11))
        bezierPath.addCurve(to: CGPoint(x: 42.98, y: 46.68), controlPoint1: CGPoint(x: 43.84, y: 44.85), controlPoint2: CGPoint(x: 43.31, y: 45.73))
        bezierPath.addLine(to: CGPoint(x: 43.01, y: 46.6))
        bezierPath.addCurve(to: CGPoint(x: 42.96, y: 52.7), controlPoint1: CGPoint(x: 42.33, y: 48.57), controlPoint2: CGPoint(x: 42.32, y: 50.72))
        bezierPath.addLine(to: CGPoint(x: 43.02, y: 52.87))
        bezierPath.addCurve(to: CGPoint(x: 44.57, y: 55.41), controlPoint1: CGPoint(x: 43.36, y: 53.81), controlPoint2: CGPoint(x: 43.89, y: 54.68))
        bezierPath.addLine(to: CGPoint(x: 44.49, y: 55.32))
        bezierPath.addCurve(to: CGPoint(x: 46.88, y: 57.06), controlPoint1: CGPoint(x: 45.16, y: 56.06), controlPoint2: CGPoint(x: 45.97, y: 56.65))
        bezierPath.addLine(to: CGPoint(x: 46.91, y: 57.07))
        bezierPath.addCurve(to: CGPoint(x: 50.06, y: 57.71), controlPoint1: CGPoint(x: 47.9, y: 57.51), controlPoint2: CGPoint(x: 48.97, y: 57.73))
        bezierPath.addLine(to: CGPoint(x: 50.06, y: 57.71))
        bezierPath.addCurve(to: CGPoint(x: 53.27, y: 57.06), controlPoint1: CGPoint(x: 51.16, y: 57.73), controlPoint2: CGPoint(x: 52.26, y: 57.51))
        bezierPath.addLine(to: CGPoint(x: 53.27, y: 57.06))
        bezierPath.addCurve(to: CGPoint(x: 55.66, y: 55.32), controlPoint1: CGPoint(x: 54.18, y: 56.65), controlPoint2: CGPoint(x: 54.99, y: 56.06))
        bezierPath.addLine(to: CGPoint(x: 55.6, y: 55.38))
        bezierPath.addCurve(to: CGPoint(x: 57.12, y: 52.9), controlPoint1: CGPoint(x: 56.27, y: 54.67), controlPoint2: CGPoint(x: 56.79, y: 53.82))
        bezierPath.addLine(to: CGPoint(x: 57.14, y: 52.86))
        bezierPath.addCurve(to: CGPoint(x: 57.19, y: 46.76), controlPoint1: CGPoint(x: 57.82, y: 50.89), controlPoint2: CGPoint(x: 57.83, y: 48.74))
        bezierPath.addLine(to: CGPoint(x: 57.13, y: 46.58))
        bezierPath.addCurve(to: CGPoint(x: 55.61, y: 44.06), controlPoint1: CGPoint(x: 56.81, y: 45.65), controlPoint2: CGPoint(x: 56.29, y: 44.79))
        bezierPath.addLine(to: CGPoint(x: 55.66, y: 44.11))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 50, y: 0))
        bezier2Path.addLine(to: CGPoint(x: 50, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: 50), controlPoint1: CGPoint(x: 22.39, y: 0), controlPoint2: CGPoint(x: 0, y: 22.39))
        bezier2Path.addCurve(to: CGPoint(x: 50, y: 100), controlPoint1: CGPoint(x: 0, y: 77.61), controlPoint2: CGPoint(x: 22.39, y: 100))
        bezier2Path.addCurve(to: CGPoint(x: 100, y: 50), controlPoint1: CGPoint(x: 77.61, y: 100), controlPoint2: CGPoint(x: 100, y: 77.61))
        bezier2Path.addLine(to: CGPoint(x: 100, y: 50))
        bezier2Path.addCurve(to: CGPoint(x: 50, y: 0), controlPoint1: CGPoint(x: 100, y: 22.39), controlPoint2: CGPoint(x: 77.61, y: 0))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 65.29, y: 45.39))
        bezier2Path.addLine(to: CGPoint(x: 65.3, y: 45.43))
        bezier2Path.addCurve(to: CGPoint(x: 65.81, y: 49.88), controlPoint1: CGPoint(x: 65.66, y: 46.89), controlPoint2: CGPoint(x: 65.83, y: 48.38))
        bezier2Path.addLine(to: CGPoint(x: 65.81, y: 49.57))
        bezier2Path.addCurve(to: CGPoint(x: 65.2, y: 54.18), controlPoint1: CGPoint(x: 65.81, y: 51.12), controlPoint2: CGPoint(x: 65.61, y: 52.67))
        bezier2Path.addLine(to: CGPoint(x: 65.18, y: 54.28))
        bezier2Path.addCurve(to: CGPoint(x: 63.43, y: 58.3), controlPoint1: CGPoint(x: 64.82, y: 55.71), controlPoint2: CGPoint(x: 64.23, y: 57.07))
        bezier2Path.addLine(to: CGPoint(x: 68.75, y: 63.38))
        bezier2Path.addLine(to: CGPoint(x: 63.57, y: 68.75))
        bezier2Path.addLine(to: CGPoint(x: 58.19, y: 63.38))
        bezier2Path.addLine(to: CGPoint(x: 58.2, y: 63.38))
        bezier2Path.addCurve(to: CGPoint(x: 50.03, y: 65.49), controlPoint1: CGPoint(x: 55.74, y: 64.85), controlPoint2: CGPoint(x: 52.9, y: 65.59))
        bezier2Path.addLine(to: CGPoint(x: 50.19, y: 65.49))
        bezier2Path.addCurve(to: CGPoint(x: 45.89, y: 64.89), controlPoint1: CGPoint(x: 48.74, y: 65.49), controlPoint2: CGPoint(x: 47.29, y: 65.29))
        bezier2Path.addLine(to: CGPoint(x: 45.82, y: 64.87))
        bezier2Path.addCurve(to: CGPoint(x: 41.99, y: 63.28), controlPoint1: CGPoint(x: 44.48, y: 64.51), controlPoint2: CGPoint(x: 43.2, y: 63.98))
        bezier2Path.addLine(to: CGPoint(x: 36.5, y: 68.75))
        bezier2Path.addLine(to: CGPoint(x: 31.18, y: 63.44))
        bezier2Path.addLine(to: CGPoint(x: 36.69, y: 58))
        bezier2Path.addLine(to: CGPoint(x: 36.73, y: 58.07))
        bezier2Path.addCurve(to: CGPoint(x: 35.04, y: 54.08), controlPoint1: CGPoint(x: 35.96, y: 56.84), controlPoint2: CGPoint(x: 35.39, y: 55.49))
        bezier2Path.addLine(to: CGPoint(x: 35.05, y: 54.11))
        bezier2Path.addCurve(to: CGPoint(x: 34.45, y: 49.87), controlPoint1: CGPoint(x: 34.68, y: 52.72), controlPoint2: CGPoint(x: 34.48, y: 51.3))
        bezier2Path.addLine(to: CGPoint(x: 34.45, y: 49.55))
        bezier2Path.addCurve(to: CGPoint(x: 34.94, y: 45.26), controlPoint1: CGPoint(x: 34.45, y: 48.11), controlPoint2: CGPoint(x: 34.61, y: 46.67))
        bezier2Path.addLine(to: CGPoint(x: 34.93, y: 45.3))
        bezier2Path.addCurve(to: CGPoint(x: 36.49, y: 41.54), controlPoint1: CGPoint(x: 35.24, y: 43.97), controlPoint2: CGPoint(x: 35.76, y: 42.7))
        bezier2Path.addLine(to: CGPoint(x: 31.25, y: 36.4))
        bezier2Path.addLine(to: CGPoint(x: 36.5, y: 31.22))
        bezier2Path.addLine(to: CGPoint(x: 41.74, y: 36.4))
        bezier2Path.addLine(to: CGPoint(x: 41.8, y: 36.36))
        bezier2Path.addCurve(to: CGPoint(x: 45.91, y: 34.62), controlPoint1: CGPoint(x: 43.1, y: 35.62), controlPoint2: CGPoint(x: 44.47, y: 35.03))
        bezier2Path.addLine(to: CGPoint(x: 45.77, y: 34.66))
        bezier2Path.addCurve(to: CGPoint(x: 50.2, y: 34), controlPoint1: CGPoint(x: 47.2, y: 34.22), controlPoint2: CGPoint(x: 48.7, y: 34))
        bezier2Path.addLine(to: CGPoint(x: 49.98, y: 34))
        bezier2Path.addCurve(to: CGPoint(x: 54.3, y: 34.57), controlPoint1: CGPoint(x: 51.44, y: 34), controlPoint2: CGPoint(x: 52.89, y: 34.19))
        bezier2Path.addLine(to: CGPoint(x: 54.45, y: 34.61))
        bezier2Path.addCurve(to: CGPoint(x: 58.37, y: 36.23), controlPoint1: CGPoint(x: 55.82, y: 34.98), controlPoint2: CGPoint(x: 57.14, y: 35.52))
        bezier2Path.addLine(to: CGPoint(x: 63.44, y: 31.19))
        bezier2Path.addLine(to: CGPoint(x: 68.82, y: 36.37))
        bezier2Path.addLine(to: CGPoint(x: 63.63, y: 41.49))
        bezier2Path.addLine(to: CGPoint(x: 63.63, y: 41.48))
        bezier2Path.addCurve(to: CGPoint(x: 65.3, y: 45.42), controlPoint1: CGPoint(x: 64.39, y: 42.7), controlPoint2: CGPoint(x: 64.95, y: 44.03))
        bezier2Path.addLine(to: CGPoint(x: 65.29, y: 45.39))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSpaceSeparator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 50, y: 0))
        bezierPath.addLine(to: CGPoint(x: 50, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 50), controlPoint1: CGPoint(x: 22.39, y: 0), controlPoint2: CGPoint(x: 0, y: 22.39))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 100), controlPoint1: CGPoint(x: 0, y: 77.61), controlPoint2: CGPoint(x: 22.39, y: 100))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 50), controlPoint1: CGPoint(x: 77.61, y: 100), controlPoint2: CGPoint(x: 100, y: 77.61))
        bezierPath.addLine(to: CGPoint(x: 100, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 0), controlPoint1: CGPoint(x: 100, y: 22.39), controlPoint2: CGPoint(x: 77.61, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 78.42, y: 68.5))
        bezierPath.addLine(to: CGPoint(x: 21.58, y: 68.5))
        bezierPath.addLine(to: CGPoint(x: 21.58, y: 54.68))
        bezierPath.addLine(to: CGPoint(x: 28.11, y: 54.68))
        bezierPath.addLine(to: CGPoint(x: 28.11, y: 60.38))
        bezierPath.addLine(to: CGPoint(x: 71.89, y: 60.38))
        bezierPath.addLine(to: CGPoint(x: 71.89, y: 54.68))
        bezierPath.addLine(to: CGPoint(x: 78.42, y: 54.68))
        bezierPath.addLine(to: CGPoint(x: 78.42, y: 68.5))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSymbolSeparator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 38.16, y: 42.1))
        bezierPath.addLine(to: CGPoint(x: 38.13, y: 42.13))
        bezierPath.addCurve(to: CGPoint(x: 39.63, y: 38.68), controlPoint1: CGPoint(x: 39.09, y: 41.23), controlPoint2: CGPoint(x: 39.63, y: 39.99))
        bezierPath.addLine(to: CGPoint(x: 39.63, y: 38.65))
        bezierPath.addCurve(to: CGPoint(x: 34.63, y: 33.65), controlPoint1: CGPoint(x: 39.63, y: 35.89), controlPoint2: CGPoint(x: 37.39, y: 33.65))
        bezierPath.addCurve(to: CGPoint(x: 31.16, y: 35.05), controlPoint1: CGPoint(x: 33.33, y: 33.65), controlPoint2: CGPoint(x: 32.09, y: 34.15))
        bezierPath.addLine(to: CGPoint(x: 31.12, y: 35.09))
        bezierPath.addCurve(to: CGPoint(x: 29.65, y: 38.63), controlPoint1: CGPoint(x: 30.16, y: 36.02), controlPoint2: CGPoint(x: 29.63, y: 37.3))
        bezierPath.addLine(to: CGPoint(x: 29.65, y: 38.6))
        bezierPath.addCurve(to: CGPoint(x: 31.09, y: 42.07), controlPoint1: CGPoint(x: 29.63, y: 39.9), controlPoint2: CGPoint(x: 30.15, y: 41.16))
        bezierPath.addLine(to: CGPoint(x: 31.15, y: 42.13))
        bezierPath.addCurve(to: CGPoint(x: 38.16, y: 42.06), controlPoint1: CGPoint(x: 33.11, y: 44.02), controlPoint2: CGPoint(x: 36.23, y: 43.99))
        bezierPath.addLine(to: CGPoint(x: 38.16, y: 42.1))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 68.85, y: 57.71))
        bezier2Path.addLine(to: CGPoint(x: 68.84, y: 57.7))
        bezier2Path.addCurve(to: CGPoint(x: 61.77, y: 57.83), controlPoint1: CGPoint(x: 66.86, y: 55.79), controlPoint2: CGPoint(x: 63.69, y: 55.84))
        bezier2Path.addCurve(to: CGPoint(x: 60.37, y: 61.3), controlPoint1: CGPoint(x: 60.87, y: 58.76), controlPoint2: CGPoint(x: 60.37, y: 60))
        bezier2Path.addLine(to: CGPoint(x: 60.37, y: 61.25))
        bezier2Path.addCurve(to: CGPoint(x: 61.86, y: 64.77), controlPoint1: CGPoint(x: 60.35, y: 62.58), controlPoint2: CGPoint(x: 60.89, y: 63.86))
        bezier2Path.addLine(to: CGPoint(x: 61.86, y: 64.77))
        bezier2Path.addCurve(to: CGPoint(x: 65.37, y: 66.19), controlPoint1: CGPoint(x: 62.79, y: 65.7), controlPoint2: CGPoint(x: 64.06, y: 66.21))
        bezier2Path.addLine(to: CGPoint(x: 65.38, y: 66.19))
        bezier2Path.addCurve(to: CGPoint(x: 67.31, y: 65.8), controlPoint1: CGPoint(x: 66.04, y: 66.19), controlPoint2: CGPoint(x: 66.7, y: 66.06))
        bezier2Path.addLine(to: CGPoint(x: 67.27, y: 65.81))
        bezier2Path.addCurve(to: CGPoint(x: 68.85, y: 64.75), controlPoint1: CGPoint(x: 67.86, y: 65.56), controlPoint2: CGPoint(x: 68.4, y: 65.2))
        bezier2Path.addLine(to: CGPoint(x: 68.84, y: 64.76))
        bezier2Path.addCurve(to: CGPoint(x: 69.93, y: 63.21), controlPoint1: CGPoint(x: 69.29, y: 64.31), controlPoint2: CGPoint(x: 69.66, y: 63.78))
        bezier2Path.addLine(to: CGPoint(x: 69.96, y: 63.14))
        bezier2Path.addCurve(to: CGPoint(x: 70.35, y: 61.21), controlPoint1: CGPoint(x: 70.23, y: 62.54), controlPoint2: CGPoint(x: 70.36, y: 61.88))
        bezier2Path.addLine(to: CGPoint(x: 70.35, y: 61.26))
        bezier2Path.addCurve(to: CGPoint(x: 69.93, y: 59.29), controlPoint1: CGPoint(x: 70.35, y: 60.58), controlPoint2: CGPoint(x: 70.21, y: 59.91))
        bezier2Path.addLine(to: CGPoint(x: 69.93, y: 59.29))
        bezier2Path.addCurve(to: CGPoint(x: 68.83, y: 57.69), controlPoint1: CGPoint(x: 69.67, y: 58.7), controlPoint2: CGPoint(x: 69.29, y: 58.15))
        bezier2Path.addLine(to: CGPoint(x: 68.85, y: 57.71))
        bezier2Path.close()
        fillColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 50, y: 0))
        bezier3Path.addLine(to: CGPoint(x: 50, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 50), controlPoint1: CGPoint(x: 22.39, y: 0), controlPoint2: CGPoint(x: 0, y: 22.39))
        bezier3Path.addCurve(to: CGPoint(x: 50, y: 100), controlPoint1: CGPoint(x: 0, y: 77.61), controlPoint2: CGPoint(x: 22.39, y: 100))
        bezier3Path.addCurve(to: CGPoint(x: 100, y: 50), controlPoint1: CGPoint(x: 77.61, y: 100), controlPoint2: CGPoint(x: 100, y: 77.61))
        bezier3Path.addLine(to: CGPoint(x: 100, y: 50))
        bezier3Path.addCurve(to: CGPoint(x: 50, y: 0), controlPoint1: CGPoint(x: 100, y: 22.39), controlPoint2: CGPoint(x: 77.61, y: 0))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 26, y: 47.15))
        bezier3Path.addLine(to: CGPoint(x: 26.03, y: 47.18))
        bezier3Path.addCurve(to: CGPoint(x: 23.4, y: 43.28), controlPoint1: CGPoint(x: 24.91, y: 46.06), controlPoint2: CGPoint(x: 24.01, y: 44.73))
        bezier3Path.addLine(to: CGPoint(x: 23.42, y: 43.33))
        bezier3Path.addCurve(to: CGPoint(x: 22.41, y: 38.59), controlPoint1: CGPoint(x: 22.75, y: 41.84), controlPoint2: CGPoint(x: 22.41, y: 40.22))
        bezier3Path.addLine(to: CGPoint(x: 22.41, y: 38.6))
        bezier3Path.addCurve(to: CGPoint(x: 23.43, y: 33.79), controlPoint1: CGPoint(x: 22.41, y: 36.94), controlPoint2: CGPoint(x: 22.76, y: 35.3))
        bezier3Path.addLine(to: CGPoint(x: 23.4, y: 33.87))
        bezier3Path.addCurve(to: CGPoint(x: 26.03, y: 29.97), controlPoint1: CGPoint(x: 24.01, y: 32.42), controlPoint2: CGPoint(x: 24.91, y: 31.09))
        bezier3Path.addLine(to: CGPoint(x: 25.97, y: 30.03))
        bezier3Path.addCurve(to: CGPoint(x: 29.9, y: 27.43), controlPoint1: CGPoint(x: 27.09, y: 28.91), controlPoint2: CGPoint(x: 28.43, y: 28.02))
        bezier3Path.addLine(to: CGPoint(x: 29.91, y: 27.42))
        bezier3Path.addCurve(to: CGPoint(x: 39.31, y: 27.42), controlPoint1: CGPoint(x: 32.93, y: 26.21), controlPoint2: CGPoint(x: 36.29, y: 26.21))
        bezier3Path.addLine(to: CGPoint(x: 39.37, y: 27.45))
        bezier3Path.addCurve(to: CGPoint(x: 43.3, y: 30.05), controlPoint1: CGPoint(x: 40.84, y: 28.04), controlPoint2: CGPoint(x: 42.18, y: 28.93))
        bezier3Path.addLine(to: CGPoint(x: 43.22, y: 29.97))
        bezier3Path.addCurve(to: CGPoint(x: 45.85, y: 33.87), controlPoint1: CGPoint(x: 44.34, y: 31.09), controlPoint2: CGPoint(x: 45.24, y: 32.42))
        bezier3Path.addLine(to: CGPoint(x: 45.82, y: 33.79))
        bezier3Path.addCurve(to: CGPoint(x: 46.84, y: 38.6), controlPoint1: CGPoint(x: 46.49, y: 35.3), controlPoint2: CGPoint(x: 46.84, y: 36.94))
        bezier3Path.addLine(to: CGPoint(x: 46.84, y: 38.59))
        bezier3Path.addCurve(to: CGPoint(x: 45.83, y: 43.33), controlPoint1: CGPoint(x: 46.84, y: 40.22), controlPoint2: CGPoint(x: 46.5, y: 41.84))
        bezier3Path.addLine(to: CGPoint(x: 45.83, y: 43.32))
        bezier3Path.addCurve(to: CGPoint(x: 39.45, y: 49.71), controlPoint1: CGPoint(x: 44.61, y: 46.2), controlPoint2: CGPoint(x: 42.32, y: 48.49))
        bezier3Path.addLine(to: CGPoint(x: 39.4, y: 49.73))
        bezier3Path.addCurve(to: CGPoint(x: 29.88, y: 49.73), controlPoint1: CGPoint(x: 36.36, y: 51.02), controlPoint2: CGPoint(x: 32.92, y: 51.02))
        bezier3Path.addLine(to: CGPoint(x: 29.81, y: 49.7))
        bezier3Path.addCurve(to: CGPoint(x: 25.94, y: 47.09), controlPoint1: CGPoint(x: 28.37, y: 49.09), controlPoint2: CGPoint(x: 27.05, y: 48.2))
        bezier3Path.addLine(to: CGPoint(x: 26, y: 47.15))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 39.57, y: 74.77))
        bezier3Path.addLine(to: CGPoint(x: 33.87, y: 72))
        bezier3Path.addLine(to: CGPoint(x: 60.3, y: 25.23))
        bezier3Path.addLine(to: CGPoint(x: 66.3, y: 28.11))
        bezier3Path.addLine(to: CGPoint(x: 39.57, y: 74.77))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 76.57, y: 65.97))
        bezier3Path.addLine(to: CGPoint(x: 76.57, y: 65.98))
        bezier3Path.addCurve(to: CGPoint(x: 70.18, y: 72.37), controlPoint1: CGPoint(x: 75.35, y: 68.86), controlPoint2: CGPoint(x: 73.05, y: 71.15))
        bezier3Path.addLine(to: CGPoint(x: 70.12, y: 72.39))
        bezier3Path.addCurve(to: CGPoint(x: 60.6, y: 72.39), controlPoint1: CGPoint(x: 67.08, y: 73.68), controlPoint2: CGPoint(x: 63.64, y: 73.68))
        bezier3Path.addLine(to: CGPoint(x: 60.54, y: 72.37))
        bezier3Path.addCurve(to: CGPoint(x: 54.15, y: 65.98), controlPoint1: CGPoint(x: 57.66, y: 71.14), controlPoint2: CGPoint(x: 55.37, y: 68.85))
        bezier3Path.addLine(to: CGPoint(x: 54.15, y: 65.98))
        bezier3Path.addCurve(to: CGPoint(x: 54.15, y: 56.61), controlPoint1: CGPoint(x: 52.88, y: 62.99), controlPoint2: CGPoint(x: 52.88, y: 59.6))
        bezier3Path.addLine(to: CGPoint(x: 54.17, y: 56.58))
        bezier3Path.addCurve(to: CGPoint(x: 60.55, y: 50.19), controlPoint1: CGPoint(x: 55.39, y: 53.7), controlPoint2: CGPoint(x: 57.68, y: 51.41))
        bezier3Path.addLine(to: CGPoint(x: 60.6, y: 50.17))
        bezier3Path.addCurve(to: CGPoint(x: 70.12, y: 50.17), controlPoint1: CGPoint(x: 63.64, y: 48.88), controlPoint2: CGPoint(x: 67.08, y: 48.88))
        bezier3Path.addLine(to: CGPoint(x: 70.17, y: 50.19))
        bezier3Path.addCurve(to: CGPoint(x: 76.55, y: 56.58), controlPoint1: CGPoint(x: 73.04, y: 51.41), controlPoint2: CGPoint(x: 75.33, y: 53.7))
        bezier3Path.addLine(to: CGPoint(x: 76.57, y: 56.61))
        bezier3Path.addCurve(to: CGPoint(x: 76.57, y: 65.98), controlPoint1: CGPoint(x: 77.84, y: 59.6), controlPoint2: CGPoint(x: 77.84, y: 62.99))
        bezier3Path.addLine(to: CGPoint(x: 76.57, y: 65.97))
        bezier3Path.close()
        fillColor.setFill()
        bezier3Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawUnderscoreSeparator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 50, y: 0))
        bezierPath.addLine(to: CGPoint(x: 50, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 50), controlPoint1: CGPoint(x: 22.39, y: 0), controlPoint2: CGPoint(x: 0, y: 22.39))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 100), controlPoint1: CGPoint(x: 0, y: 77.61), controlPoint2: CGPoint(x: 22.39, y: 100))
        bezierPath.addCurve(to: CGPoint(x: 100, y: 50), controlPoint1: CGPoint(x: 77.61, y: 100), controlPoint2: CGPoint(x: 100, y: 77.61))
        bezierPath.addLine(to: CGPoint(x: 100, y: 50))
        bezierPath.addCurve(to: CGPoint(x: 50, y: 0), controlPoint1: CGPoint(x: 100, y: 22.39), controlPoint2: CGPoint(x: 77.61, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 66, y: 72.27))
        bezierPath.addLine(to: CGPoint(x: 34, y: 72.27))
        bezierPath.addLine(to: CGPoint(x: 34, y: 66.58))
        bezierPath.addLine(to: CGPoint(x: 66, y: 66.58))
        bezierPath.addLine(to: CGPoint(x: 66, y: 72.27))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawNoSeparator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
        fillColor.setFill()
        ovalPath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class func imageOfPreferencesButton(strokeColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 19, height: 19), false, 0)
            StyleKit.drawPreferencesButton(strokeColor: strokeColor)

        let imageOfPreferencesButton = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfPreferencesButton
    }

    @objc dynamic public class var imageOfMenuIcon: UIImage {
        if Cache.imageOfMenuIcon != nil {
            return Cache.imageOfMenuIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            StyleKit.drawMenuIcon()

        Cache.imageOfMenuIcon = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfMenuIcon!
    }

    @objc dynamic public class func imageOfAdvancedType(typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawAdvancedType(typeColor: typeColor)

        let imageOfAdvancedType = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfAdvancedType
    }

    @objc dynamic public class func imageOfPassphraseType(typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawPassphraseType(typeColor: typeColor)

        let imageOfPassphraseType = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfPassphraseType
    }

    @objc dynamic public class func imageOfPatternType(typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawPatternType(typeColor: typeColor)

        let imageOfPatternType = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfPatternType
    }

    @objc dynamic public class func imageOfPronounceableType(typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawPronounceableType(typeColor: typeColor)

        let imageOfPronounceableType = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfPronounceableType
    }

    @objc dynamic public class func imageOfRandomType(typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawRandomType(typeColor: typeColor)

        let imageOfRandomType = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfRandomType
    }

    @objc dynamic public class func imageOfStoredType(typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawStoredType(typeColor: typeColor)

        let imageOfStoredType = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfStoredType
    }

    @objc dynamic public class func imageOfZoom1(zoomStroke: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
            StyleKit.drawZoom1(zoomStroke: zoomStroke)

        let imageOfZoom1 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfZoom1
    }

    @objc dynamic public class func imageOfZoom(zoomStroke: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
            StyleKit.drawZoom(zoomStroke: zoomStroke)

        let imageOfZoom = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfZoom
    }

    @objc dynamic public class var imageOfDeleteButon: UIImage {
        if Cache.imageOfDeleteButon != nil {
            return Cache.imageOfDeleteButon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawDeleteButon()

        Cache.imageOfDeleteButon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDeleteButon!
    }

    @objc dynamic public class var imageOfPasswordHeader: UIImage {
        if Cache.imageOfPasswordHeader != nil {
            return Cache.imageOfPasswordHeader!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 80, height: 20), false, 0)
            StyleKit.drawPasswordHeader()

        Cache.imageOfPasswordHeader = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPasswordHeader!
    }

    @objc dynamic public class var imageOfPasswordStrengthHeader: UIImage {
        if Cache.imageOfPasswordStrengthHeader != nil {
            return Cache.imageOfPasswordStrengthHeader!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawPasswordStrengthHeader()

        Cache.imageOfPasswordStrengthHeader = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPasswordStrengthHeader!
    }

    @objc dynamic public class var imageOfPasswordTypeHeader: UIImage {
        if Cache.imageOfPasswordTypeHeader != nil {
            return Cache.imageOfPasswordTypeHeader!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawPasswordTypeHeader()

        Cache.imageOfPasswordTypeHeader = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPasswordTypeHeader!
    }

    @objc dynamic public class var imageOfGradientBackground: UIImage {
        if Cache.imageOfGradientBackground != nil {
            return Cache.imageOfGradientBackground!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 1024, height: 1024), false, 0)
            StyleKit.drawGradientBackground()

        Cache.imageOfGradientBackground = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfGradientBackground!
    }

    @objc dynamic public class var imageOfLowercase: UIImage {
        if Cache.imageOfLowercase != nil {
            return Cache.imageOfLowercase!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 50), false, 0)
            StyleKit.drawLowercase()

        Cache.imageOfLowercase = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfLowercase!
    }

    @objc dynamic public class var imageOfMixedCase: UIImage {
        if Cache.imageOfMixedCase != nil {
            return Cache.imageOfMixedCase!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 50), false, 0)
            StyleKit.drawMixedCase()

        Cache.imageOfMixedCase = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfMixedCase!
    }

    @objc dynamic public class var imageOfTitleCase: UIImage {
        if Cache.imageOfTitleCase != nil {
            return Cache.imageOfTitleCase!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 50), false, 0)
            StyleKit.drawTitleCase()

        Cache.imageOfTitleCase = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfTitleCase!
    }

    @objc dynamic public class var imageOfUppercase: UIImage {
        if Cache.imageOfUppercase != nil {
            return Cache.imageOfUppercase!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 50), false, 0)
            StyleKit.drawUppercase()

        Cache.imageOfUppercase = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfUppercase!
    }

    @objc dynamic public class var imageOfCharacterSeparator: UIImage {
        if Cache.imageOfCharacterSeparator != nil {
            return Cache.imageOfCharacterSeparator!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 100), false, 0)
            StyleKit.drawCharacterSeparator()

        Cache.imageOfCharacterSeparator = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCharacterSeparator!
    }

    @objc dynamic public class var imageOfEmojiSeparator: UIImage {
        if Cache.imageOfEmojiSeparator != nil {
            return Cache.imageOfEmojiSeparator!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 100), false, 0)
            StyleKit.drawEmojiSeparator()

        Cache.imageOfEmojiSeparator = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfEmojiSeparator!
    }

    @objc dynamic public class var imageOfHyphenSeparator: UIImage {
        if Cache.imageOfHyphenSeparator != nil {
            return Cache.imageOfHyphenSeparator!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 100), false, 0)
            StyleKit.drawHyphenSeparator()

        Cache.imageOfHyphenSeparator = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHyphenSeparator!
    }

    @objc dynamic public class var imageOfNumberSeparator: UIImage {
        if Cache.imageOfNumberSeparator != nil {
            return Cache.imageOfNumberSeparator!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 100), false, 0)
            StyleKit.drawNumberSeparator()

        Cache.imageOfNumberSeparator = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfNumberSeparator!
    }

    @objc dynamic public class var imageOfRandomSeparator: UIImage {
        if Cache.imageOfRandomSeparator != nil {
            return Cache.imageOfRandomSeparator!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 100), false, 0)
            StyleKit.drawRandomSeparator()

        Cache.imageOfRandomSeparator = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfRandomSeparator!
    }

    @objc dynamic public class var imageOfSpaceSeparator: UIImage {
        if Cache.imageOfSpaceSeparator != nil {
            return Cache.imageOfSpaceSeparator!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 100), false, 0)
            StyleKit.drawSpaceSeparator()

        Cache.imageOfSpaceSeparator = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSpaceSeparator!
    }

    @objc dynamic public class var imageOfSymbolSeparator: UIImage {
        if Cache.imageOfSymbolSeparator != nil {
            return Cache.imageOfSymbolSeparator!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 100), false, 0)
            StyleKit.drawSymbolSeparator()

        Cache.imageOfSymbolSeparator = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSymbolSeparator!
    }

    @objc dynamic public class var imageOfUnderscoreSeparator: UIImage {
        if Cache.imageOfUnderscoreSeparator != nil {
            return Cache.imageOfUnderscoreSeparator!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 100), false, 0)
            StyleKit.drawUnderscoreSeparator()

        Cache.imageOfUnderscoreSeparator = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfUnderscoreSeparator!
    }

    @objc dynamic public class var imageOfNoSeparator: UIImage {
        if Cache.imageOfNoSeparator != nil {
            return Cache.imageOfNoSeparator!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 100, height: 100), false, 0)
            StyleKit.drawNoSeparator()

        Cache.imageOfNoSeparator = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfNoSeparator!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var menuIconTargets: [AnyObject]! {
        get { return Cache.menuIconTargets }
        set {
            Cache.menuIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfMenuIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var deleteButonTargets: [AnyObject]! {
        get { return Cache.deleteButonTargets }
        set {
            Cache.deleteButonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfDeleteButon)
            }
        }
    }

    @objc @IBOutlet dynamic var passwordHeaderTargets: [AnyObject]! {
        get { return Cache.passwordHeaderTargets }
        set {
            Cache.passwordHeaderTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfPasswordHeader)
            }
        }
    }

    @objc @IBOutlet dynamic var passwordStrengthHeaderTargets: [AnyObject]! {
        get { return Cache.passwordStrengthHeaderTargets }
        set {
            Cache.passwordStrengthHeaderTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfPasswordStrengthHeader)
            }
        }
    }

    @objc @IBOutlet dynamic var passwordTypeHeaderTargets: [AnyObject]! {
        get { return Cache.passwordTypeHeaderTargets }
        set {
            Cache.passwordTypeHeaderTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfPasswordTypeHeader)
            }
        }
    }

    @objc @IBOutlet dynamic var gradientBackgroundTargets: [AnyObject]! {
        get { return Cache.gradientBackgroundTargets }
        set {
            Cache.gradientBackgroundTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfGradientBackground)
            }
        }
    }

    @objc @IBOutlet dynamic var lowercaseTargets: [AnyObject]! {
        get { return Cache.lowercaseTargets }
        set {
            Cache.lowercaseTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfLowercase)
            }
        }
    }

    @objc @IBOutlet dynamic var mixedCaseTargets: [AnyObject]! {
        get { return Cache.mixedCaseTargets }
        set {
            Cache.mixedCaseTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfMixedCase)
            }
        }
    }

    @objc @IBOutlet dynamic var titleCaseTargets: [AnyObject]! {
        get { return Cache.titleCaseTargets }
        set {
            Cache.titleCaseTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfTitleCase)
            }
        }
    }

    @objc @IBOutlet dynamic var uppercaseTargets: [AnyObject]! {
        get { return Cache.uppercaseTargets }
        set {
            Cache.uppercaseTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfUppercase)
            }
        }
    }

    @objc @IBOutlet dynamic var characterSeparatorTargets: [AnyObject]! {
        get { return Cache.characterSeparatorTargets }
        set {
            Cache.characterSeparatorTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfCharacterSeparator)
            }
        }
    }

    @objc @IBOutlet dynamic var emojiSeparatorTargets: [AnyObject]! {
        get { return Cache.emojiSeparatorTargets }
        set {
            Cache.emojiSeparatorTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfEmojiSeparator)
            }
        }
    }

    @objc @IBOutlet dynamic var hyphenSeparatorTargets: [AnyObject]! {
        get { return Cache.hyphenSeparatorTargets }
        set {
            Cache.hyphenSeparatorTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfHyphenSeparator)
            }
        }
    }

    @objc @IBOutlet dynamic var numberSeparatorTargets: [AnyObject]! {
        get { return Cache.numberSeparatorTargets }
        set {
            Cache.numberSeparatorTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfNumberSeparator)
            }
        }
    }

    @objc @IBOutlet dynamic var randomSeparatorTargets: [AnyObject]! {
        get { return Cache.randomSeparatorTargets }
        set {
            Cache.randomSeparatorTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfRandomSeparator)
            }
        }
    }

    @objc @IBOutlet dynamic var spaceSeparatorTargets: [AnyObject]! {
        get { return Cache.spaceSeparatorTargets }
        set {
            Cache.spaceSeparatorTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfSpaceSeparator)
            }
        }
    }

    @objc @IBOutlet dynamic var symbolSeparatorTargets: [AnyObject]! {
        get { return Cache.symbolSeparatorTargets }
        set {
            Cache.symbolSeparatorTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfSymbolSeparator)
            }
        }
    }

    @objc @IBOutlet dynamic var underscoreSeparatorTargets: [AnyObject]! {
        get { return Cache.underscoreSeparatorTargets }
        set {
            Cache.underscoreSeparatorTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfUnderscoreSeparator)
            }
        }
    }

    @objc @IBOutlet dynamic var noSeparatorTargets: [AnyObject]! {
        get { return Cache.noSeparatorTargets }
        set {
            Cache.noSeparatorTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfNoSeparator)
            }
        }
    }




    @objc(StyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
