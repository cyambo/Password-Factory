//
//  StyleKit.swift
//  Password Factory
//
//  Created by Cristiana Yambo on 12/5/17.
//  Copyright Â© 2017 Password Factory. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfMenuIcon: UIImage?
        static var menuIconTargets: [AnyObject]?
        static var imageOfPasswordHeader: UIImage?
        static var passwordHeaderTargets: [AnyObject]?
        static var imageOfPasswordStrengthHeader: UIImage?
        static var passwordStrengthHeaderTargets: [AnyObject]?
        static var imageOfPasswordTypeHeader: UIImage?
        static var passwordTypeHeaderTargets: [AnyObject]?
        static var imageOfGradientBackground: UIImage?
        static var gradientBackgroundTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawStrengthMeter(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 400, height: 50), resizing: ResizingBehavior = .aspectFit, strengthColor: UIColor = UIColor(red: 0.887, green: 0.168, blue: 0.090, alpha: 1.000), strength: CGFloat = 0.25, size: CGSize = CGSize(width: 400, height: 50)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 400, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 400, y: resizedFrame.height / 50)


        //// Strength Level Drawing
        context.saveGState()
        context.scaleBy(x: strength, y: 1)

        let strengthLevelPath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: size.width, height: size.height))
        strengthColor.setFill()
        strengthLevelPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPreferencesButton(strokeColor: UIColor = UIColor(red: 0.310, green: 0.678, blue: 0.984, alpha: 1.000)) {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9.5, y: 12.7))
        bezierPath.addCurve(to: CGPoint(x: 6.3, y: 9.5), controlPoint1: CGPoint(x: 7.74, y: 12.7), controlPoint2: CGPoint(x: 6.3, y: 11.26))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 6.3), controlPoint1: CGPoint(x: 6.3, y: 7.74), controlPoint2: CGPoint(x: 7.74, y: 6.3))
        bezierPath.addCurve(to: CGPoint(x: 12.7, y: 9.5), controlPoint1: CGPoint(x: 11.26, y: 6.3), controlPoint2: CGPoint(x: 12.7, y: 7.74))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 12.7), controlPoint1: CGPoint(x: 12.7, y: 11.26), controlPoint2: CGPoint(x: 11.26, y: 12.7))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 17.78, y: 10.74))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10.41), controlPoint1: CGPoint(x: 17.9, y: 10.69), controlPoint2: CGPoint(x: 18, y: 10.54))
        bezierPath.addLine(to: CGPoint(x: 18, y: 8.59))
        bezierPath.addCurve(to: CGPoint(x: 17.78, y: 8.26), controlPoint1: CGPoint(x: 18, y: 8.46), controlPoint2: CGPoint(x: 17.9, y: 8.31))
        bezierPath.addLine(to: CGPoint(x: 16.11, y: 7.59))
        bezierPath.addCurve(to: CGPoint(x: 15.81, y: 7.28), controlPoint1: CGPoint(x: 15.99, y: 7.54), controlPoint2: CGPoint(x: 15.85, y: 7.4))
        bezierPath.addLine(to: CGPoint(x: 15.53, y: 6.61))
        bezierPath.addCurve(to: CGPoint(x: 15.52, y: 6.18), controlPoint1: CGPoint(x: 15.47, y: 6.49), controlPoint2: CGPoint(x: 15.47, y: 6.3))
        bezierPath.addLine(to: CGPoint(x: 16.23, y: 4.52))
        bezierPath.addCurve(to: CGPoint(x: 16.16, y: 4.14), controlPoint1: CGPoint(x: 16.28, y: 4.4), controlPoint2: CGPoint(x: 16.25, y: 4.23))
        bezierPath.addLine(to: CGPoint(x: 14.86, y: 2.84))
        bezierPath.addCurve(to: CGPoint(x: 14.48, y: 2.77), controlPoint1: CGPoint(x: 14.77, y: 2.75), controlPoint2: CGPoint(x: 14.6, y: 2.72))
        bezierPath.addLine(to: CGPoint(x: 12.82, y: 3.48))
        bezierPath.addCurve(to: CGPoint(x: 12.39, y: 3.47), controlPoint1: CGPoint(x: 12.7, y: 3.53), controlPoint2: CGPoint(x: 12.51, y: 3.53))
        bezierPath.addLine(to: CGPoint(x: 11.72, y: 3.19))
        bezierPath.addCurve(to: CGPoint(x: 11.41, y: 2.89), controlPoint1: CGPoint(x: 11.6, y: 3.15), controlPoint2: CGPoint(x: 11.46, y: 3.01))
        bezierPath.addLine(to: CGPoint(x: 10.74, y: 1.22))
        bezierPath.addCurve(to: CGPoint(x: 10.41, y: 1), controlPoint1: CGPoint(x: 10.69, y: 1.1), controlPoint2: CGPoint(x: 10.54, y: 1))
        bezierPath.addLine(to: CGPoint(x: 8.59, y: 1))
        bezierPath.addCurve(to: CGPoint(x: 8.26, y: 1.22), controlPoint1: CGPoint(x: 8.46, y: 1), controlPoint2: CGPoint(x: 8.31, y: 1.1))
        bezierPath.addLine(to: CGPoint(x: 7.59, y: 2.89))
        bezierPath.addCurve(to: CGPoint(x: 7.28, y: 3.19), controlPoint1: CGPoint(x: 7.54, y: 3.01), controlPoint2: CGPoint(x: 7.4, y: 3.15))
        bezierPath.addLine(to: CGPoint(x: 6.61, y: 3.47))
        bezierPath.addCurve(to: CGPoint(x: 6.18, y: 3.48), controlPoint1: CGPoint(x: 6.49, y: 3.53), controlPoint2: CGPoint(x: 6.3, y: 3.53))
        bezierPath.addLine(to: CGPoint(x: 4.52, y: 2.77))
        bezierPath.addCurve(to: CGPoint(x: 4.14, y: 2.84), controlPoint1: CGPoint(x: 4.4, y: 2.72), controlPoint2: CGPoint(x: 4.23, y: 2.75))
        bezierPath.addLine(to: CGPoint(x: 2.84, y: 4.14))
        bezierPath.addCurve(to: CGPoint(x: 2.77, y: 4.52), controlPoint1: CGPoint(x: 2.75, y: 4.23), controlPoint2: CGPoint(x: 2.72, y: 4.4))
        bezierPath.addLine(to: CGPoint(x: 3.48, y: 6.18))
        bezierPath.addCurve(to: CGPoint(x: 3.47, y: 6.61), controlPoint1: CGPoint(x: 3.53, y: 6.3), controlPoint2: CGPoint(x: 3.53, y: 6.49))
        bezierPath.addLine(to: CGPoint(x: 3.19, y: 7.28))
        bezierPath.addCurve(to: CGPoint(x: 2.89, y: 7.59), controlPoint1: CGPoint(x: 3.15, y: 7.4), controlPoint2: CGPoint(x: 3.01, y: 7.54))
        bezierPath.addLine(to: CGPoint(x: 1.22, y: 8.26))
        bezierPath.addCurve(to: CGPoint(x: 1, y: 8.59), controlPoint1: CGPoint(x: 1.1, y: 8.31), controlPoint2: CGPoint(x: 1, y: 8.46))
        bezierPath.addLine(to: CGPoint(x: 1, y: 10.41))
        bezierPath.addCurve(to: CGPoint(x: 1.22, y: 10.74), controlPoint1: CGPoint(x: 1, y: 10.54), controlPoint2: CGPoint(x: 1.1, y: 10.69))
        bezierPath.addLine(to: CGPoint(x: 2.89, y: 11.41))
        bezierPath.addCurve(to: CGPoint(x: 3.19, y: 11.72), controlPoint1: CGPoint(x: 3.01, y: 11.46), controlPoint2: CGPoint(x: 3.15, y: 11.6))
        bezierPath.addLine(to: CGPoint(x: 3.47, y: 12.39))
        bezierPath.addCurve(to: CGPoint(x: 3.48, y: 12.82), controlPoint1: CGPoint(x: 3.53, y: 12.51), controlPoint2: CGPoint(x: 3.53, y: 12.7))
        bezierPath.addLine(to: CGPoint(x: 2.77, y: 14.48))
        bezierPath.addCurve(to: CGPoint(x: 2.84, y: 14.86), controlPoint1: CGPoint(x: 2.72, y: 14.6), controlPoint2: CGPoint(x: 2.75, y: 14.77))
        bezierPath.addLine(to: CGPoint(x: 4.14, y: 16.16))
        bezierPath.addCurve(to: CGPoint(x: 4.52, y: 16.23), controlPoint1: CGPoint(x: 4.23, y: 16.25), controlPoint2: CGPoint(x: 4.4, y: 16.28))
        bezierPath.addLine(to: CGPoint(x: 6.18, y: 15.52))
        bezierPath.addCurve(to: CGPoint(x: 6.61, y: 15.53), controlPoint1: CGPoint(x: 6.3, y: 15.47), controlPoint2: CGPoint(x: 6.49, y: 15.47))
        bezierPath.addLine(to: CGPoint(x: 7.28, y: 15.81))
        bezierPath.addCurve(to: CGPoint(x: 7.59, y: 16.11), controlPoint1: CGPoint(x: 7.4, y: 15.85), controlPoint2: CGPoint(x: 7.54, y: 15.99))
        bezierPath.addLine(to: CGPoint(x: 8.26, y: 17.78))
        bezierPath.addCurve(to: CGPoint(x: 8.59, y: 18), controlPoint1: CGPoint(x: 8.31, y: 17.9), controlPoint2: CGPoint(x: 8.46, y: 18))
        bezierPath.addLine(to: CGPoint(x: 10.41, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 10.74, y: 17.78), controlPoint1: CGPoint(x: 10.54, y: 18), controlPoint2: CGPoint(x: 10.69, y: 17.9))
        bezierPath.addLine(to: CGPoint(x: 11.41, y: 16.11))
        bezierPath.addCurve(to: CGPoint(x: 11.72, y: 15.81), controlPoint1: CGPoint(x: 11.46, y: 15.99), controlPoint2: CGPoint(x: 11.6, y: 15.85))
        bezierPath.addLine(to: CGPoint(x: 12.39, y: 15.53))
        bezierPath.addCurve(to: CGPoint(x: 12.82, y: 15.52), controlPoint1: CGPoint(x: 12.51, y: 15.47), controlPoint2: CGPoint(x: 12.7, y: 15.47))
        bezierPath.addLine(to: CGPoint(x: 14.48, y: 16.23))
        bezierPath.addCurve(to: CGPoint(x: 14.86, y: 16.16), controlPoint1: CGPoint(x: 14.6, y: 16.28), controlPoint2: CGPoint(x: 14.77, y: 16.25))
        bezierPath.addLine(to: CGPoint(x: 16.16, y: 14.86))
        bezierPath.addCurve(to: CGPoint(x: 16.23, y: 14.48), controlPoint1: CGPoint(x: 16.25, y: 14.77), controlPoint2: CGPoint(x: 16.28, y: 14.6))
        bezierPath.addLine(to: CGPoint(x: 15.52, y: 12.82))
        bezierPath.addCurve(to: CGPoint(x: 15.53, y: 12.39), controlPoint1: CGPoint(x: 15.47, y: 12.7), controlPoint2: CGPoint(x: 15.47, y: 12.51))
        bezierPath.addLine(to: CGPoint(x: 15.81, y: 11.72))
        bezierPath.addCurve(to: CGPoint(x: 16.11, y: 11.41), controlPoint1: CGPoint(x: 15.85, y: 11.6), controlPoint2: CGPoint(x: 15.99, y: 11.46))
        bezierPath.addLine(to: CGPoint(x: 17.78, y: 10.74))
        bezierPath.close()
        strokeColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    @objc dynamic public class func drawMenuIcon() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 23.74, y: 21.66))
        bezierPath.addLine(to: CGPoint(x: 16.84, y: 14.76))
        bezierPath.addCurve(to: CGPoint(x: 17.54, y: 12.82), controlPoint1: CGPoint(x: 17.21, y: 14.14), controlPoint2: CGPoint(x: 17.44, y: 13.48))
        bezierPath.addCurve(to: CGPoint(x: 17.58, y: 12.59), controlPoint1: CGPoint(x: 17.56, y: 12.74), controlPoint2: CGPoint(x: 17.57, y: 12.66))
        bezierPath.addCurve(to: CGPoint(x: 17.58, y: 12.53), controlPoint1: CGPoint(x: 17.58, y: 12.57), controlPoint2: CGPoint(x: 17.58, y: 12.55))
        bezierPath.addCurve(to: CGPoint(x: 17.37, y: 10.63), controlPoint1: CGPoint(x: 17.64, y: 11.87), controlPoint2: CGPoint(x: 17.57, y: 11.22))
        bezierPath.addCurve(to: CGPoint(x: 16.45, y: 9.16), controlPoint1: CGPoint(x: 17.18, y: 10.08), controlPoint2: CGPoint(x: 16.87, y: 9.58))
        bezierPath.addCurve(to: CGPoint(x: 12.86, y: 8.05), controlPoint1: CGPoint(x: 15.51, y: 8.22), controlPoint2: CGPoint(x: 14.2, y: 7.86))
        bezierPath.addCurve(to: CGPoint(x: 9.68, y: 9.68), controlPoint1: CGPoint(x: 11.74, y: 8.2), controlPoint2: CGPoint(x: 10.6, y: 8.75))
        bezierPath.addCurve(to: CGPoint(x: 8.07, y: 14.31), controlPoint1: CGPoint(x: 8.35, y: 11), controlPoint2: CGPoint(x: 7.8, y: 12.77))
        bezierPath.addCurve(to: CGPoint(x: 9.16, y: 16.45), controlPoint1: CGPoint(x: 8.2, y: 15.11), controlPoint2: CGPoint(x: 8.57, y: 15.86))
        bezierPath.addCurve(to: CGPoint(x: 9.36, y: 16.64), controlPoint1: CGPoint(x: 9.22, y: 16.51), controlPoint2: CGPoint(x: 9.29, y: 16.58))
        bezierPath.addCurve(to: CGPoint(x: 12.47, y: 17.59), controlPoint1: CGPoint(x: 10.21, y: 17.37), controlPoint2: CGPoint(x: 11.33, y: 17.68))
        bezierPath.addCurve(to: CGPoint(x: 14.06, y: 17.19), controlPoint1: CGPoint(x: 13, y: 17.54), controlPoint2: CGPoint(x: 13.54, y: 17.41))
        bezierPath.addLine(to: CGPoint(x: 14.36, y: 17.49))
        bezierPath.addCurve(to: CGPoint(x: 14.36, y: 18.53), controlPoint1: CGPoint(x: 14.36, y: 17.49), controlPoint2: CGPoint(x: 13.84, y: 18.01))
        bezierPath.addCurve(to: CGPoint(x: 15.41, y: 18.53), controlPoint1: CGPoint(x: 14.89, y: 19.05), controlPoint2: CGPoint(x: 15.41, y: 18.53))
        bezierPath.addLine(to: CGPoint(x: 15.93, y: 18.01))
        bezierPath.addLine(to: CGPoint(x: 17.75, y: 19.83))
        bezierPath.addLine(to: CGPoint(x: 18.79, y: 19.83))
        bezierPath.addLine(to: CGPoint(x: 19.05, y: 20.09))
        bezierPath.addLine(to: CGPoint(x: 19.05, y: 21.14))
        bezierPath.addLine(to: CGPoint(x: 21.14, y: 23.22))
        bezierPath.addLine(to: CGPoint(x: 21.66, y: 23.22))
        bezierPath.addLine(to: CGPoint(x: 22.44, y: 24))
        bezierPath.addLine(to: CGPoint(x: 24, y: 24))
        bezierPath.addLine(to: CGPoint(x: 23.74, y: 21.66))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 11.22, y: 11.22))
        bezierPath.addCurve(to: CGPoint(x: 12.78, y: 11.22), controlPoint1: CGPoint(x: 11.65, y: 10.79), controlPoint2: CGPoint(x: 12.35, y: 10.79))
        bezierPath.addCurve(to: CGPoint(x: 12.78, y: 12.78), controlPoint1: CGPoint(x: 13.21, y: 11.65), controlPoint2: CGPoint(x: 13.21, y: 12.35))
        bezierPath.addCurve(to: CGPoint(x: 11.22, y: 12.78), controlPoint1: CGPoint(x: 12.35, y: 13.21), controlPoint2: CGPoint(x: 11.65, y: 13.21))
        bezierPath.addCurve(to: CGPoint(x: 11.22, y: 11.22), controlPoint1: CGPoint(x: 10.79, y: 12.35), controlPoint2: CGPoint(x: 10.79, y: 11.65))
        bezierPath.close()
        UIColor.black.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    @objc dynamic public class func drawStrengthBox(strengthColor: UIColor = UIColor(red: 0.887, green: 0.168, blue: 0.090, alpha: 1.000)) {

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 22, height: 22))
        strengthColor.setFill()
        rectanglePath.fill()
    }

    @objc dynamic public class func drawAdvancedType(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit, typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 3.7, y: 3.75)
        context.rotate(by: -30 * CGFloat.pi/180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: 0, y: -2.25))
        polygonPath.addLine(to: CGPoint(x: 1.95, y: -1.12))
        polygonPath.addLine(to: CGPoint(x: 1.95, y: 1.12))
        polygonPath.addLine(to: CGPoint(x: 0, y: 2.25))
        polygonPath.addLine(to: CGPoint(x: -1.95, y: 1.13))
        polygonPath.addLine(to: CGPoint(x: -1.95, y: -1.12))
        polygonPath.close()
        typeColor.setStroke()
        polygonPath.lineWidth = 1
        polygonPath.stroke()

        context.restoreGState()


        //// Polygon 2 Drawing
        context.saveGState()
        context.translateBy(x: 3.45, y: 15.4)
        context.rotate(by: -30 * CGFloat.pi/180)

        let polygon2Path = UIBezierPath()
        polygon2Path.move(to: CGPoint(x: 0, y: -2.25))
        polygon2Path.addLine(to: CGPoint(x: 1.95, y: -1.12))
        polygon2Path.addLine(to: CGPoint(x: 1.95, y: 1.12))
        polygon2Path.addLine(to: CGPoint(x: 0, y: 2.25))
        polygon2Path.addLine(to: CGPoint(x: -1.95, y: 1.13))
        polygon2Path.addLine(to: CGPoint(x: -1.95, y: -1.12))
        polygon2Path.close()
        typeColor.setStroke()
        polygon2Path.lineWidth = 1
        polygon2Path.stroke()

        context.restoreGState()


        //// Polygon 3 Drawing
        context.saveGState()
        context.translateBy(x: 11.75, y: 4)
        context.rotate(by: -30 * CGFloat.pi/180)

        let polygon3Path = UIBezierPath()
        polygon3Path.move(to: CGPoint(x: 0, y: -2.25))
        polygon3Path.addLine(to: CGPoint(x: 1.95, y: -1.12))
        polygon3Path.addLine(to: CGPoint(x: 1.95, y: 1.12))
        polygon3Path.addLine(to: CGPoint(x: 0, y: 2.25))
        polygon3Path.addLine(to: CGPoint(x: -1.95, y: 1.13))
        polygon3Path.addLine(to: CGPoint(x: -1.95, y: -1.12))
        polygon3Path.close()
        typeColor.setStroke()
        polygon3Path.lineWidth = 1
        polygon3Path.stroke()

        context.restoreGState()


        //// Polygon 4 Drawing
        context.saveGState()
        context.translateBy(x: 7.1, y: 10.35)
        context.rotate(by: -30 * CGFloat.pi/180)

        let polygon4Path = UIBezierPath()
        polygon4Path.move(to: CGPoint(x: 0, y: -2.25))
        polygon4Path.addLine(to: CGPoint(x: 1.95, y: -1.12))
        polygon4Path.addLine(to: CGPoint(x: 1.95, y: 1.12))
        polygon4Path.addLine(to: CGPoint(x: 0, y: 2.25))
        polygon4Path.addLine(to: CGPoint(x: -1.95, y: 1.13))
        polygon4Path.addLine(to: CGPoint(x: -1.95, y: -1.12))
        polygon4Path.close()
        typeColor.setStroke()
        polygon4Path.lineWidth = 1
        polygon4Path.stroke()

        context.restoreGState()


        //// Polygon 5 Drawing
        context.saveGState()
        context.translateBy(x: 10.65, y: 16.25)
        context.rotate(by: -30 * CGFloat.pi/180)

        let polygon5Path = UIBezierPath()
        polygon5Path.move(to: CGPoint(x: 0, y: -2.25))
        polygon5Path.addLine(to: CGPoint(x: 1.95, y: -1.12))
        polygon5Path.addLine(to: CGPoint(x: 1.95, y: 1.12))
        polygon5Path.addLine(to: CGPoint(x: 0, y: 2.25))
        polygon5Path.addLine(to: CGPoint(x: -1.95, y: 1.13))
        polygon5Path.addLine(to: CGPoint(x: -1.95, y: -1.12))
        polygon5Path.close()
        typeColor.setStroke()
        polygon5Path.lineWidth = 1
        polygon5Path.stroke()

        context.restoreGState()


        //// Polygon 6 Drawing
        context.saveGState()
        context.translateBy(x: 16.55, y: 12.25)
        context.rotate(by: -30 * CGFloat.pi/180)

        let polygon6Path = UIBezierPath()
        polygon6Path.move(to: CGPoint(x: 0, y: -2.25))
        polygon6Path.addLine(to: CGPoint(x: 1.95, y: -1.12))
        polygon6Path.addLine(to: CGPoint(x: 1.95, y: 1.12))
        polygon6Path.addLine(to: CGPoint(x: 0, y: 2.25))
        polygon6Path.addLine(to: CGPoint(x: -1.95, y: 1.13))
        polygon6Path.addLine(to: CGPoint(x: -1.95, y: -1.12))
        polygon6Path.close()
        typeColor.setStroke()
        polygon6Path.lineWidth = 1
        polygon6Path.stroke()

        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.61, y: 5.98))
        bezierPath.addLine(to: CGPoint(x: 8.23, y: 8.38))
        typeColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 4.81, y: 5.7))
        bezier2Path.addLine(to: CGPoint(x: 5.97, y: 8.38))
        typeColor.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 5.73, y: 15.38))
        bezier3Path.addLine(to: CGPoint(x: 8.4, y: 16.26))
        typeColor.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 12.93, y: 16.26))
        bezier4Path.addLine(to: CGPoint(x: 15.41, y: 14.22))
        typeColor.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 8.23, y: 12.3))
        bezier5Path.addLine(to: CGPoint(x: 9.53, y: 14.3))
        typeColor.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPassphraseType(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit, typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 2.4, y: 1.9, width: 13.6, height: 2.4), cornerRadius: 1.2)
        typeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 4, y: 11.1, width: 14.8, height: 2.4), cornerRadius: 1.2)
        typeColor.setStroke()
        rectangle2Path.lineWidth = 1
        rectangle2Path.stroke()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 1.2, y: 6.5, width: 17.6, height: 2.4), cornerRadius: 1.2)
        typeColor.setStroke()
        rectangle3Path.lineWidth = 1
        rectangle3Path.stroke()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: 1.6, y: 15.7, width: 12, height: 2.4), cornerRadius: 1.2)
        typeColor.setStroke()
        rectangle4Path.lineWidth = 1
        rectangle4Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPatternType(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit, typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 13.55, y: 13.55, width: 4.3, height: 4.3))
        typeColor.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 13.55, y: 7.85, width: 4.3, height: 4.3))
        typeColor.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 13.55, y: 2.15, width: 4.3, height: 4.3))
        typeColor.setStroke()
        oval3Path.lineWidth = 1
        oval3Path.stroke()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 7.85, y: 13.55, width: 4.3, height: 4.3))
        typeColor.setStroke()
        oval4Path.lineWidth = 1
        oval4Path.stroke()


        //// Oval 5 Drawing
        let oval5Path = UIBezierPath(ovalIn: CGRect(x: 7.85, y: 7.85, width: 4.3, height: 4.3))
        typeColor.setStroke()
        oval5Path.lineWidth = 1
        oval5Path.stroke()


        //// Oval 6 Drawing
        let oval6Path = UIBezierPath(ovalIn: CGRect(x: 7.85, y: 2.15, width: 4.3, height: 4.3))
        typeColor.setStroke()
        oval6Path.lineWidth = 1
        oval6Path.stroke()


        //// Oval 7 Drawing
        let oval7Path = UIBezierPath(ovalIn: CGRect(x: 2.15, y: 13.55, width: 4.3, height: 4.3))
        typeColor.setStroke()
        oval7Path.lineWidth = 1
        oval7Path.stroke()


        //// Oval 8 Drawing
        let oval8Path = UIBezierPath(ovalIn: CGRect(x: 2.15, y: 7.85, width: 4.3, height: 4.3))
        typeColor.setStroke()
        oval8Path.lineWidth = 1
        oval8Path.stroke()


        //// Oval 9 Drawing
        let oval9Path = UIBezierPath(ovalIn: CGRect(x: 2.15, y: 2.15, width: 4.3, height: 4.3))
        typeColor.setStroke()
        oval9Path.lineWidth = 1
        oval9Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPronounceableType(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit, typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.04, y: 3.54))
        bezierPath.addCurve(to: CGPoint(x: 2.44, y: 9.54), controlPoint1: CGPoint(x: 5.85, y: 3.54), controlPoint2: CGPoint(x: 2.44, y: 6.22))
        bezierPath.addCurve(to: CGPoint(x: 5.21, y: 14.17), controlPoint1: CGPoint(x: 2.44, y: 11.4), controlPoint2: CGPoint(x: 3.52, y: 13.07))
        bezierPath.addCurve(to: CGPoint(x: 2.44, y: 16.34), controlPoint1: CGPoint(x: 4.15, y: 15.46), controlPoint2: CGPoint(x: 1.89, y: 16.22))
        bezierPath.addCurve(to: CGPoint(x: 8.43, y: 15.4), controlPoint1: CGPoint(x: 4.48, y: 16.74), controlPoint2: CGPoint(x: 6.72, y: 16.12))
        bezierPath.addCurve(to: CGPoint(x: 10.04, y: 15.54), controlPoint1: CGPoint(x: 8.95, y: 15.49), controlPoint2: CGPoint(x: 9.49, y: 15.54))
        bezierPath.addCurve(to: CGPoint(x: 17.64, y: 9.54), controlPoint1: CGPoint(x: 14.24, y: 15.54), controlPoint2: CGPoint(x: 17.64, y: 12.85))
        bezierPath.addCurve(to: CGPoint(x: 10.04, y: 3.54), controlPoint1: CGPoint(x: 17.64, y: 6.22), controlPoint2: CGPoint(x: 14.24, y: 3.54))
        bezierPath.close()
        typeColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRandomType(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit, typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 5.28, y: 2.12, width: 3.15, height: 3.15))
        typeColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14.74, y: 11.58))
        bezierPath.addLine(to: CGPoint(x: 11.58, y: 11.58))
        bezierPath.addLine(to: CGPoint(x: 11.58, y: 8.42))
        bezierPath.addLine(to: CGPoint(x: 14.74, y: 8.42))
        bezierPath.addLine(to: CGPoint(x: 14.74, y: 11.58))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.74, y: 5.26))
        bezierPath.addLine(to: CGPoint(x: 14.74, y: 2.1))
        bezierPath.addLine(to: CGPoint(x: 11.58, y: 2.1))
        bezierPath.addLine(to: CGPoint(x: 11.58, y: 5.26))
        bezierPath.addLine(to: CGPoint(x: 8.42, y: 5.26))
        bezierPath.addLine(to: CGPoint(x: 8.42, y: 8.42))
        bezierPath.addLine(to: CGPoint(x: 5.26, y: 8.42))
        bezierPath.addLine(to: CGPoint(x: 5.26, y: 11.58))
        bezierPath.addLine(to: CGPoint(x: 2.1, y: 11.58))
        bezierPath.addLine(to: CGPoint(x: 2.1, y: 14.74))
        bezierPath.addLine(to: CGPoint(x: 5.26, y: 14.74))
        bezierPath.addLine(to: CGPoint(x: 5.26, y: 17.9))
        bezierPath.addLine(to: CGPoint(x: 8.42, y: 17.9))
        bezierPath.addLine(to: CGPoint(x: 8.42, y: 14.74))
        bezierPath.addLine(to: CGPoint(x: 11.58, y: 14.74))
        bezierPath.addLine(to: CGPoint(x: 11.58, y: 17.9))
        bezierPath.addLine(to: CGPoint(x: 14.74, y: 17.9))
        bezierPath.addLine(to: CGPoint(x: 14.74, y: 14.74))
        bezierPath.addLine(to: CGPoint(x: 17.9, y: 14.74))
        bezierPath.addLine(to: CGPoint(x: 17.9, y: 11.58))
        bezierPath.addLine(to: CGPoint(x: 17.9, y: 8.42))
        bezierPath.addLine(to: CGPoint(x: 17.9, y: 5.26))
        bezierPath.addLine(to: CGPoint(x: 14.74, y: 5.26))
        bezierPath.close()
        typeColor.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 2.12, y: 5.28, width: 3.15, height: 3.15))
        typeColor.setStroke()
        rectangle2Path.lineWidth = 1
        rectangle2Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawStoredType(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit, typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 16, height: 16))
        typeColor.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 7.6, y: 7.6, width: 4.8, height: 4.8))
        typeColor.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawZoom1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit, zoomStroke: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2.5, y: 2.5, width: 16, height: 16))
        zoomStroke.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6.35, y: 14.65))
        bezierPath.addLine(to: CGPoint(x: 9.18, y: 11.82))
        zoomStroke.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 8.25, y: 6.35, width: 6.4, height: 6.4))
        zoomStroke.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawZoom(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit, zoomStroke: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2.5, y: 2.5, width: 16, height: 16))
        zoomStroke.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6.35, y: 14.65))
        bezierPath.addLine(to: CGPoint(x: 9.18, y: 11.82))
        zoomStroke.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 8.25, y: 6.35, width: 6.4, height: 6.4))
        zoomStroke.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 11.45, y: 7.99))
        bezier2Path.addLine(to: CGPoint(x: 11.45, y: 11.11))
        zoomStroke.setStroke()
        bezier2Path.lineWidth = 0.75
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 13, y: 9.55))
        bezier3Path.addLine(to: CGPoint(x: 9.89, y: 9.55))
        zoomStroke.setStroke()
        bezier3Path.lineWidth = 0.75
        bezier3Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPasswordHeader(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 80, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 80, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 80, y: resizedFrame.height / 20)


        //// Color Declarations
        let headerColor = UIColor(red: 0.345, green: 0.349, blue: 0.357, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 1.75, y: 2.47, width: 76.5, height: 15.05), cornerRadius: 7.4)
        headerColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 21.5, y: 11.42))
        bezierPath.addLine(to: CGPoint(x: 20.98, y: 12.3))
        bezierPath.addLine(to: CGPoint(x: 18.89, y: 10.92))
        bezierPath.addLine(to: CGPoint(x: 18.89, y: 13.44))
        bezierPath.addLine(to: CGPoint(x: 17.92, y: 13.44))
        bezierPath.addLine(to: CGPoint(x: 17.92, y: 10.92))
        bezierPath.addLine(to: CGPoint(x: 15.81, y: 12.32))
        bezierPath.addLine(to: CGPoint(x: 15.29, y: 11.42))
        bezierPath.addLine(to: CGPoint(x: 17.5, y: 9.98))
        bezierPath.addLine(to: CGPoint(x: 15.29, y: 8.54))
        bezierPath.addLine(to: CGPoint(x: 15.81, y: 7.66))
        bezierPath.addLine(to: CGPoint(x: 17.92, y: 9.07))
        bezierPath.addLine(to: CGPoint(x: 17.92, y: 6.56))
        bezierPath.addLine(to: CGPoint(x: 18.89, y: 6.56))
        bezierPath.addLine(to: CGPoint(x: 18.89, y: 9.05))
        bezierPath.addLine(to: CGPoint(x: 20.98, y: 7.66))
        bezierPath.addLine(to: CGPoint(x: 21.5, y: 8.54))
        bezierPath.addLine(to: CGPoint(x: 19.32, y: 9.98))
        bezierPath.addLine(to: CGPoint(x: 21.5, y: 11.42))
        bezierPath.close()
        headerColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 32.31, y: 11.42))
        bezier2Path.addLine(to: CGPoint(x: 31.78, y: 12.3))
        bezier2Path.addLine(to: CGPoint(x: 29.7, y: 10.92))
        bezier2Path.addLine(to: CGPoint(x: 29.7, y: 13.44))
        bezier2Path.addLine(to: CGPoint(x: 28.72, y: 13.44))
        bezier2Path.addLine(to: CGPoint(x: 28.72, y: 10.92))
        bezier2Path.addLine(to: CGPoint(x: 26.61, y: 12.32))
        bezier2Path.addLine(to: CGPoint(x: 26.09, y: 11.42))
        bezier2Path.addLine(to: CGPoint(x: 28.31, y: 9.98))
        bezier2Path.addLine(to: CGPoint(x: 26.09, y: 8.54))
        bezier2Path.addLine(to: CGPoint(x: 26.61, y: 7.66))
        bezier2Path.addLine(to: CGPoint(x: 28.72, y: 9.07))
        bezier2Path.addLine(to: CGPoint(x: 28.72, y: 6.56))
        bezier2Path.addLine(to: CGPoint(x: 29.7, y: 6.56))
        bezier2Path.addLine(to: CGPoint(x: 29.7, y: 9.05))
        bezier2Path.addLine(to: CGPoint(x: 31.78, y: 7.66))
        bezier2Path.addLine(to: CGPoint(x: 32.31, y: 8.54))
        bezier2Path.addLine(to: CGPoint(x: 30.13, y: 9.98))
        bezier2Path.addLine(to: CGPoint(x: 32.31, y: 11.42))
        bezier2Path.close()
        headerColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 43.11, y: 11.42))
        bezier3Path.addLine(to: CGPoint(x: 42.58, y: 12.3))
        bezier3Path.addLine(to: CGPoint(x: 40.5, y: 10.92))
        bezier3Path.addLine(to: CGPoint(x: 40.5, y: 13.44))
        bezier3Path.addLine(to: CGPoint(x: 39.52, y: 13.44))
        bezier3Path.addLine(to: CGPoint(x: 39.52, y: 10.92))
        bezier3Path.addLine(to: CGPoint(x: 37.41, y: 12.32))
        bezier3Path.addLine(to: CGPoint(x: 36.89, y: 11.42))
        bezier3Path.addLine(to: CGPoint(x: 39.11, y: 9.98))
        bezier3Path.addLine(to: CGPoint(x: 36.89, y: 8.54))
        bezier3Path.addLine(to: CGPoint(x: 37.41, y: 7.66))
        bezier3Path.addLine(to: CGPoint(x: 39.52, y: 9.07))
        bezier3Path.addLine(to: CGPoint(x: 39.52, y: 6.56))
        bezier3Path.addLine(to: CGPoint(x: 40.5, y: 6.56))
        bezier3Path.addLine(to: CGPoint(x: 40.5, y: 9.05))
        bezier3Path.addLine(to: CGPoint(x: 42.58, y: 7.66))
        bezier3Path.addLine(to: CGPoint(x: 43.11, y: 8.54))
        bezier3Path.addLine(to: CGPoint(x: 40.93, y: 9.98))
        bezier3Path.addLine(to: CGPoint(x: 43.11, y: 11.42))
        bezier3Path.close()
        headerColor.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 53.91, y: 11.42))
        bezier4Path.addLine(to: CGPoint(x: 53.38, y: 12.3))
        bezier4Path.addLine(to: CGPoint(x: 51.3, y: 10.92))
        bezier4Path.addLine(to: CGPoint(x: 51.3, y: 13.44))
        bezier4Path.addLine(to: CGPoint(x: 50.32, y: 13.44))
        bezier4Path.addLine(to: CGPoint(x: 50.32, y: 10.92))
        bezier4Path.addLine(to: CGPoint(x: 48.21, y: 12.32))
        bezier4Path.addLine(to: CGPoint(x: 47.7, y: 11.42))
        bezier4Path.addLine(to: CGPoint(x: 49.91, y: 9.98))
        bezier4Path.addLine(to: CGPoint(x: 47.7, y: 8.54))
        bezier4Path.addLine(to: CGPoint(x: 48.21, y: 7.66))
        bezier4Path.addLine(to: CGPoint(x: 50.32, y: 9.07))
        bezier4Path.addLine(to: CGPoint(x: 50.32, y: 6.56))
        bezier4Path.addLine(to: CGPoint(x: 51.3, y: 6.56))
        bezier4Path.addLine(to: CGPoint(x: 51.3, y: 9.05))
        bezier4Path.addLine(to: CGPoint(x: 53.38, y: 7.66))
        bezier4Path.addLine(to: CGPoint(x: 53.91, y: 8.54))
        bezier4Path.addLine(to: CGPoint(x: 51.73, y: 9.98))
        bezier4Path.addLine(to: CGPoint(x: 53.91, y: 11.42))
        bezier4Path.close()
        headerColor.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 64.71, y: 11.42))
        bezier5Path.addLine(to: CGPoint(x: 64.18, y: 12.3))
        bezier5Path.addLine(to: CGPoint(x: 62.1, y: 10.92))
        bezier5Path.addLine(to: CGPoint(x: 62.1, y: 13.44))
        bezier5Path.addLine(to: CGPoint(x: 61.12, y: 13.44))
        bezier5Path.addLine(to: CGPoint(x: 61.12, y: 10.92))
        bezier5Path.addLine(to: CGPoint(x: 59.02, y: 12.32))
        bezier5Path.addLine(to: CGPoint(x: 58.5, y: 11.42))
        bezier5Path.addLine(to: CGPoint(x: 60.71, y: 9.98))
        bezier5Path.addLine(to: CGPoint(x: 58.5, y: 8.54))
        bezier5Path.addLine(to: CGPoint(x: 59.02, y: 7.66))
        bezier5Path.addLine(to: CGPoint(x: 61.12, y: 9.07))
        bezier5Path.addLine(to: CGPoint(x: 61.12, y: 6.56))
        bezier5Path.addLine(to: CGPoint(x: 62.1, y: 6.56))
        bezier5Path.addLine(to: CGPoint(x: 62.1, y: 9.05))
        bezier5Path.addLine(to: CGPoint(x: 64.18, y: 7.66))
        bezier5Path.addLine(to: CGPoint(x: 64.71, y: 8.54))
        bezier5Path.addLine(to: CGPoint(x: 62.53, y: 9.98))
        bezier5Path.addLine(to: CGPoint(x: 64.71, y: 11.42))
        bezier5Path.close()
        headerColor.setFill()
        bezier5Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPasswordStrengthHeader(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Color Declarations
        let headerColor = UIColor(red: 0.345, green: 0.349, blue: 0.357, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 13.7, y: 4.15, width: 3.1, height: 11.7), cornerRadius: 1.4)
        headerColor.setStroke()
        rectanglePath.lineWidth = 1
        rectanglePath.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 13.7, y: 4.15, width: 3.1, height: 11.7), cornerRadius: 1.4)
        headerColor.setStroke()
        rectangle2Path.lineWidth = 1
        rectangle2Path.stroke()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 8.45, y: 8.38, width: 3.1, height: 7.45), cornerRadius: 1.4)
        headerColor.setStroke()
        rectangle3Path.lineWidth = 1
        rectangle3Path.stroke()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: 8.45, y: 8.38, width: 3.1, height: 7.45), cornerRadius: 1.4)
        headerColor.setStroke()
        rectangle4Path.lineWidth = 1
        rectangle4Path.stroke()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(roundedRect: CGRect(x: 3.2, y: 12.65, width: 3.1, height: 3.2), cornerRadius: 1.4)
        headerColor.setStroke()
        rectangle5Path.lineWidth = 1
        rectangle5Path.stroke()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRect(x: 3.2, y: 12.65, width: 3.1, height: 3.2), cornerRadius: 1.4)
        headerColor.setStroke()
        rectangle6Path.lineWidth = 1
        rectangle6Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPasswordTypeHeader(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Color Declarations
        let headerColor = UIColor(red: 0.345, green: 0.349, blue: 0.357, alpha: 1.000)

        //// Star Drawing
        context.saveGState()
        context.translateBy(x: 6.8, y: 11.85)
        context.rotate(by: -30.15 * CGFloat.pi/180)

        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 0, y: -6.4))
        starPath.addLine(to: CGPoint(x: 3.7, y: 0))
        starPath.addLine(to: CGPoint(x: 0, y: 6.4))
        starPath.addLine(to: CGPoint(x: -3.7, y: 0))
        starPath.close()
        headerColor.setStroke()
        starPath.lineWidth = 1
        starPath.lineJoinStyle = .round
        starPath.stroke()

        context.restoreGState()


        //// Star 2 Drawing
        context.saveGState()
        context.translateBy(x: 13.2, y: 11.85)
        context.rotate(by: -149.85 * CGFloat.pi/180)

        let star2Path = UIBezierPath()
        star2Path.move(to: CGPoint(x: 0, y: -6.4))
        star2Path.addLine(to: CGPoint(x: 3.65, y: 0))
        star2Path.addLine(to: CGPoint(x: 0, y: 6.4))
        star2Path.addLine(to: CGPoint(x: -3.65, y: 0))
        star2Path.close()
        headerColor.setStroke()
        star2Path.lineWidth = 1
        star2Path.lineJoinStyle = .round
        star2Path.stroke()

        context.restoreGState()


        //// Star 3 Drawing
        context.saveGState()
        context.translateBy(x: 10, y: 6.35)
        context.rotate(by: -90 * CGFloat.pi/180)

        let star3Path = UIBezierPath()
        star3Path.move(to: CGPoint(x: 0, y: -6.45))
        star3Path.addLine(to: CGPoint(x: 3.7, y: 0))
        star3Path.addLine(to: CGPoint(x: 0, y: 6.45))
        star3Path.addLine(to: CGPoint(x: -3.7, y: 0))
        star3Path.close()
        headerColor.setStroke()
        star3Path.lineWidth = 1
        star3Path.lineJoinStyle = .round
        star3Path.stroke()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawGradientBackground(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1024, height: 1024), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1024, height: 1024), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1024, y: resizedFrame.height / 1024)


        //// Color Declarations
        let centerGradientColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let topGradientColor = UIColor(red: 0.595, green: 0.696, blue: 1.000, alpha: 1.000)
        let middleGradientColor = UIColor(red: 0.771, green: 1.000, blue: 0.545, alpha: 1.000)
        let radialGradientColorInner = UIColor(red: 0.973, green: 0.824, blue: 0.400, alpha: 1.000)
        let radialGradientColorOuter = UIColor(red: 1.000, green: 0.000, blue: 0.454, alpha: 1.000)

        //// Gradient Declarations
        let topGradient = CGGradient(colorsSpace: nil, colors: [topGradientColor.cgColor, centerGradientColor.cgColor, topGradientColor.cgColor] as CFArray, locations: [0, 0.51, 1])!
        let middleGradient = CGGradient(colorsSpace: nil, colors: [middleGradientColor.cgColor, centerGradientColor.cgColor, middleGradientColor.cgColor] as CFArray, locations: [0, 0.51, 1])!
        let radialGradient = CGGradient(colorsSpace: nil, colors: [radialGradientColorInner.cgColor, radialGradientColorInner.blended(withFraction: 0.5, of: radialGradientColorOuter).cgColor, radialGradientColorOuter.cgColor] as CFArray, locations: [0, 0.66, 1])!

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0.13, y: 0.13, width: 1024, height: 1024))
        context.saveGState()
        rectanglePath.addClip()
        context.drawRadialGradient(radialGradient,
            startCenter: CGPoint(x: 257.43, y: 442.42), startRadius: 0,
            endCenter: CGPoint(x: 257.43, y: 442.42), endRadius: 796.04,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.setBlendMode(.colorBurn)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: 0.13, y: 0.13, width: 1024, height: 1024))
        context.saveGState()
        rectangle2Path.addClip()
        context.drawLinearGradient(topGradient,
            start: CGPoint(x: 15.7, y: 219.13),
            end: CGPoint(x: 1136.25, y: 880.49),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.setAlpha(0.3)
        context.setBlendMode(.colorBurn)

        let rectangle3Path = UIBezierPath(rect: CGRect(x: 0.13, y: 0.13, width: 1024, height: 1024))
        context.saveGState()
        rectangle3Path.addClip()
        context.drawLinearGradient(middleGradient,
            start: CGPoint(x: 250.48, y: 748.75),
            end: CGPoint(x: 923.4, y: 140.17),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class func imageOfPreferencesButton(strokeColor: UIColor = UIColor(red: 0.310, green: 0.678, blue: 0.984, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 19, height: 19), false, 0)
            StyleKit.drawPreferencesButton(strokeColor: strokeColor)

        let imageOfPreferencesButton = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfPreferencesButton
    }

    @objc dynamic public class var imageOfMenuIcon: UIImage {
        if Cache.imageOfMenuIcon != nil {
            return Cache.imageOfMenuIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            StyleKit.drawMenuIcon()

        Cache.imageOfMenuIcon = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfMenuIcon!
    }

    @objc dynamic public class func imageOfAdvancedType(typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawAdvancedType(typeColor: typeColor)

        let imageOfAdvancedType = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfAdvancedType
    }

    @objc dynamic public class func imageOfPassphraseType(typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawPassphraseType(typeColor: typeColor)

        let imageOfPassphraseType = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfPassphraseType
    }

    @objc dynamic public class func imageOfPatternType(typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawPatternType(typeColor: typeColor)

        let imageOfPatternType = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfPatternType
    }

    @objc dynamic public class func imageOfPronounceableType(typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawPronounceableType(typeColor: typeColor)

        let imageOfPronounceableType = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfPronounceableType
    }

    @objc dynamic public class func imageOfRandomType(typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawRandomType(typeColor: typeColor)

        let imageOfRandomType = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfRandomType
    }

    @objc dynamic public class func imageOfStoredType(typeColor: UIColor = UIColor(red: 0.930, green: 0.112, blue: 0.142, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawStoredType(typeColor: typeColor)

        let imageOfStoredType = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfStoredType
    }

    @objc dynamic public class func imageOfZoom1(zoomStroke: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
            StyleKit.drawZoom1(zoomStroke: zoomStroke)

        let imageOfZoom1 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfZoom1
    }

    @objc dynamic public class func imageOfZoom(zoomStroke: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
            StyleKit.drawZoom(zoomStroke: zoomStroke)

        let imageOfZoom = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfZoom
    }

    @objc dynamic public class var imageOfPasswordHeader: UIImage {
        if Cache.imageOfPasswordHeader != nil {
            return Cache.imageOfPasswordHeader!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 80, height: 20), false, 0)
            StyleKit.drawPasswordHeader()

        Cache.imageOfPasswordHeader = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPasswordHeader!
    }

    @objc dynamic public class var imageOfPasswordStrengthHeader: UIImage {
        if Cache.imageOfPasswordStrengthHeader != nil {
            return Cache.imageOfPasswordStrengthHeader!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawPasswordStrengthHeader()

        Cache.imageOfPasswordStrengthHeader = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPasswordStrengthHeader!
    }

    @objc dynamic public class var imageOfPasswordTypeHeader: UIImage {
        if Cache.imageOfPasswordTypeHeader != nil {
            return Cache.imageOfPasswordTypeHeader!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit.drawPasswordTypeHeader()

        Cache.imageOfPasswordTypeHeader = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPasswordTypeHeader!
    }

    @objc dynamic public class var imageOfGradientBackground: UIImage {
        if Cache.imageOfGradientBackground != nil {
            return Cache.imageOfGradientBackground!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 1024, height: 1024), false, 0)
            StyleKit.drawGradientBackground()

        Cache.imageOfGradientBackground = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfGradientBackground!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var menuIconTargets: [AnyObject]! {
        get { return Cache.menuIconTargets }
        set {
            Cache.menuIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfMenuIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var passwordHeaderTargets: [AnyObject]! {
        get { return Cache.passwordHeaderTargets }
        set {
            Cache.passwordHeaderTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfPasswordHeader)
            }
        }
    }

    @objc @IBOutlet dynamic var passwordStrengthHeaderTargets: [AnyObject]! {
        get { return Cache.passwordStrengthHeaderTargets }
        set {
            Cache.passwordStrengthHeaderTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfPasswordStrengthHeader)
            }
        }
    }

    @objc @IBOutlet dynamic var passwordTypeHeaderTargets: [AnyObject]! {
        get { return Cache.passwordTypeHeaderTargets }
        set {
            Cache.passwordTypeHeaderTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfPasswordTypeHeader)
            }
        }
    }

    @objc @IBOutlet dynamic var gradientBackgroundTargets: [AnyObject]! {
        get { return Cache.gradientBackgroundTargets }
        set {
            Cache.gradientBackgroundTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfGradientBackground)
            }
        }
    }




    @objc(StyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
