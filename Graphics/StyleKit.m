//
//  StyleKit.m
//  Password Factory
//
//  Created by Cristiana Yambo on 11/17/17.
//  Copyright Â© 2017 Password Factory. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

#import "StyleKit.h"


@implementation StyleKit

#pragma mark Cache

static NSImage* _imageOfMenuIcon = nil;
static NSImage* _imageOfPasswordHeader = nil;
static NSImage* _imageOfPasswordStrengthHeader = nil;
static NSImage* _imageOfPasswordTypeHeader = nil;

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawStrengthMeterWithStrengthColor: (NSColor*)strengthColor strength: (CGFloat)strength size: (NSSize)size
{
    [StyleKit drawStrengthMeterWithFrame: NSMakeRect(0, 0, 400, 50) resizing: StyleKitResizingBehaviorAspectFit strengthColor: strengthColor strength: strength size: size];
}

+ (void)drawStrengthMeterWithFrame: (NSRect)targetFrame resizing: (StyleKitResizingBehavior)resizing strengthColor: (NSColor*)strengthColor strength: (CGFloat)strength size: (NSSize)size
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;
    
    //// Resize to Target Frame
    [NSGraphicsContext saveGraphicsState];
    NSRect resizedFrame = StyleKitResizingBehaviorApply(resizing, NSMakeRect(0, 0, 400, 50), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 400, resizedFrame.size.height / 50);


    //// Strength Level Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextScaleCTM(context, strength, 1);

    NSBezierPath* strengthLevelPath = [NSBezierPath bezierPathWithRect: NSMakeRect(0, 0, size.width, size.height)];
    [strengthColor setFill];
    [strengthLevelPath fill];

    [NSGraphicsContext restoreGraphicsState];
    
    [NSGraphicsContext restoreGraphicsState];

}

+ (void)drawPreferencesButtonWithStrokeColor: (NSColor*)strokeColor
{

    //// Bezier Drawing
    NSBezierPath* bezierPath = [NSBezierPath bezierPath];
    [bezierPath moveToPoint: NSMakePoint(9.5, 6.12)];
    [bezierPath curveToPoint: NSMakePoint(6.12, 9.5) controlPoint1: NSMakePoint(7.63, 6.12) controlPoint2: NSMakePoint(6.12, 7.63)];
    [bezierPath curveToPoint: NSMakePoint(9.5, 12.88) controlPoint1: NSMakePoint(6.12, 11.37) controlPoint2: NSMakePoint(7.63, 12.88)];
    [bezierPath curveToPoint: NSMakePoint(12.88, 9.5) controlPoint1: NSMakePoint(11.37, 12.88) controlPoint2: NSMakePoint(12.88, 11.37)];
    [bezierPath curveToPoint: NSMakePoint(9.5, 6.12) controlPoint1: NSMakePoint(12.88, 7.63) controlPoint2: NSMakePoint(11.37, 6.12)];
    [bezierPath closePath];
    [bezierPath moveToPoint: NSMakePoint(18.27, 8.19)];
    [bezierPath curveToPoint: NSMakePoint(18.5, 8.53) controlPoint1: NSMakePoint(18.4, 8.24) controlPoint2: NSMakePoint(18.5, 8.39)];
    [bezierPath lineToPoint: NSMakePoint(18.5, 10.47)];
    [bezierPath curveToPoint: NSMakePoint(18.27, 10.81) controlPoint1: NSMakePoint(18.5, 10.61) controlPoint2: NSMakePoint(18.4, 10.76)];
    [bezierPath lineToPoint: NSMakePoint(16.5, 11.52)];
    [bezierPath curveToPoint: NSMakePoint(16.18, 11.85) controlPoint1: NSMakePoint(16.37, 11.57) controlPoint2: NSMakePoint(16.23, 11.72)];
    [bezierPath lineToPoint: NSMakePoint(15.88, 12.56)];
    [bezierPath curveToPoint: NSMakePoint(15.88, 13.02) controlPoint1: NSMakePoint(15.83, 12.69) controlPoint2: NSMakePoint(15.82, 12.89)];
    [bezierPath lineToPoint: NSMakePoint(16.63, 14.77)];
    [bezierPath curveToPoint: NSMakePoint(16.55, 15.18) controlPoint1: NSMakePoint(16.68, 14.9) controlPoint2: NSMakePoint(16.65, 15.08)];
    [bezierPath lineToPoint: NSMakePoint(15.18, 16.55)];
    [bezierPath curveToPoint: NSMakePoint(14.77, 16.63) controlPoint1: NSMakePoint(15.08, 16.65) controlPoint2: NSMakePoint(14.9, 16.68)];
    [bezierPath lineToPoint: NSMakePoint(13.02, 15.88)];
    [bezierPath curveToPoint: NSMakePoint(12.56, 15.88) controlPoint1: NSMakePoint(12.89, 15.82) controlPoint2: NSMakePoint(12.69, 15.83)];
    [bezierPath lineToPoint: NSMakePoint(11.85, 16.18)];
    [bezierPath curveToPoint: NSMakePoint(11.52, 16.5) controlPoint1: NSMakePoint(11.72, 16.23) controlPoint2: NSMakePoint(11.57, 16.37)];
    [bezierPath lineToPoint: NSMakePoint(10.81, 18.27)];
    [bezierPath curveToPoint: NSMakePoint(10.47, 18.5) controlPoint1: NSMakePoint(10.76, 18.4) controlPoint2: NSMakePoint(10.61, 18.5)];
    [bezierPath lineToPoint: NSMakePoint(8.53, 18.5)];
    [bezierPath curveToPoint: NSMakePoint(8.19, 18.27) controlPoint1: NSMakePoint(8.39, 18.5) controlPoint2: NSMakePoint(8.24, 18.4)];
    [bezierPath lineToPoint: NSMakePoint(7.48, 16.5)];
    [bezierPath curveToPoint: NSMakePoint(7.15, 16.18) controlPoint1: NSMakePoint(7.43, 16.37) controlPoint2: NSMakePoint(7.28, 16.23)];
    [bezierPath lineToPoint: NSMakePoint(6.44, 15.88)];
    [bezierPath curveToPoint: NSMakePoint(5.98, 15.88) controlPoint1: NSMakePoint(6.31, 15.83) controlPoint2: NSMakePoint(6.11, 15.82)];
    [bezierPath lineToPoint: NSMakePoint(4.23, 16.63)];
    [bezierPath curveToPoint: NSMakePoint(3.82, 16.55) controlPoint1: NSMakePoint(4.1, 16.68) controlPoint2: NSMakePoint(3.92, 16.65)];
    [bezierPath lineToPoint: NSMakePoint(2.45, 15.18)];
    [bezierPath curveToPoint: NSMakePoint(2.37, 14.77) controlPoint1: NSMakePoint(2.35, 15.08) controlPoint2: NSMakePoint(2.32, 14.9)];
    [bezierPath lineToPoint: NSMakePoint(3.12, 13.02)];
    [bezierPath curveToPoint: NSMakePoint(3.12, 12.56) controlPoint1: NSMakePoint(3.18, 12.89) controlPoint2: NSMakePoint(3.17, 12.69)];
    [bezierPath lineToPoint: NSMakePoint(2.82, 11.85)];
    [bezierPath curveToPoint: NSMakePoint(2.5, 11.52) controlPoint1: NSMakePoint(2.77, 11.72) controlPoint2: NSMakePoint(2.63, 11.57)];
    [bezierPath lineToPoint: NSMakePoint(0.73, 10.81)];
    [bezierPath curveToPoint: NSMakePoint(0.5, 10.47) controlPoint1: NSMakePoint(0.6, 10.76) controlPoint2: NSMakePoint(0.5, 10.61)];
    [bezierPath lineToPoint: NSMakePoint(0.5, 8.53)];
    [bezierPath curveToPoint: NSMakePoint(0.73, 8.19) controlPoint1: NSMakePoint(0.5, 8.39) controlPoint2: NSMakePoint(0.6, 8.24)];
    [bezierPath lineToPoint: NSMakePoint(2.5, 7.48)];
    [bezierPath curveToPoint: NSMakePoint(2.82, 7.15) controlPoint1: NSMakePoint(2.63, 7.43) controlPoint2: NSMakePoint(2.77, 7.28)];
    [bezierPath lineToPoint: NSMakePoint(3.12, 6.44)];
    [bezierPath curveToPoint: NSMakePoint(3.12, 5.98) controlPoint1: NSMakePoint(3.17, 6.31) controlPoint2: NSMakePoint(3.18, 6.11)];
    [bezierPath lineToPoint: NSMakePoint(2.37, 4.23)];
    [bezierPath curveToPoint: NSMakePoint(2.45, 3.82) controlPoint1: NSMakePoint(2.32, 4.1) controlPoint2: NSMakePoint(2.35, 3.92)];
    [bezierPath lineToPoint: NSMakePoint(3.82, 2.45)];
    [bezierPath curveToPoint: NSMakePoint(4.23, 2.37) controlPoint1: NSMakePoint(3.92, 2.35) controlPoint2: NSMakePoint(4.1, 2.32)];
    [bezierPath lineToPoint: NSMakePoint(5.98, 3.12)];
    [bezierPath curveToPoint: NSMakePoint(6.44, 3.12) controlPoint1: NSMakePoint(6.11, 3.18) controlPoint2: NSMakePoint(6.31, 3.17)];
    [bezierPath lineToPoint: NSMakePoint(7.15, 2.82)];
    [bezierPath curveToPoint: NSMakePoint(7.48, 2.5) controlPoint1: NSMakePoint(7.28, 2.77) controlPoint2: NSMakePoint(7.43, 2.63)];
    [bezierPath lineToPoint: NSMakePoint(8.19, 0.73)];
    [bezierPath curveToPoint: NSMakePoint(8.53, 0.5) controlPoint1: NSMakePoint(8.24, 0.6) controlPoint2: NSMakePoint(8.39, 0.5)];
    [bezierPath lineToPoint: NSMakePoint(10.47, 0.5)];
    [bezierPath curveToPoint: NSMakePoint(10.81, 0.73) controlPoint1: NSMakePoint(10.61, 0.5) controlPoint2: NSMakePoint(10.76, 0.6)];
    [bezierPath lineToPoint: NSMakePoint(11.52, 2.5)];
    [bezierPath curveToPoint: NSMakePoint(11.85, 2.82) controlPoint1: NSMakePoint(11.57, 2.63) controlPoint2: NSMakePoint(11.72, 2.77)];
    [bezierPath lineToPoint: NSMakePoint(12.56, 3.12)];
    [bezierPath curveToPoint: NSMakePoint(13.02, 3.12) controlPoint1: NSMakePoint(12.69, 3.17) controlPoint2: NSMakePoint(12.89, 3.18)];
    [bezierPath lineToPoint: NSMakePoint(14.77, 2.37)];
    [bezierPath curveToPoint: NSMakePoint(15.18, 2.45) controlPoint1: NSMakePoint(14.9, 2.32) controlPoint2: NSMakePoint(15.08, 2.35)];
    [bezierPath lineToPoint: NSMakePoint(16.55, 3.82)];
    [bezierPath curveToPoint: NSMakePoint(16.63, 4.23) controlPoint1: NSMakePoint(16.65, 3.92) controlPoint2: NSMakePoint(16.68, 4.1)];
    [bezierPath lineToPoint: NSMakePoint(15.88, 5.98)];
    [bezierPath curveToPoint: NSMakePoint(15.88, 6.44) controlPoint1: NSMakePoint(15.82, 6.11) controlPoint2: NSMakePoint(15.83, 6.31)];
    [bezierPath lineToPoint: NSMakePoint(16.18, 7.15)];
    [bezierPath curveToPoint: NSMakePoint(16.5, 7.48) controlPoint1: NSMakePoint(16.23, 7.28) controlPoint2: NSMakePoint(16.37, 7.43)];
    [bezierPath lineToPoint: NSMakePoint(18.27, 8.19)];
    [bezierPath closePath];
    [strokeColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];
}

+ (void)drawMenuIcon
{

    //// Bezier Drawing
    NSBezierPath* bezierPath = [NSBezierPath bezierPath];
    [bezierPath moveToPoint: NSMakePoint(23.74, 10.34)];
    [bezierPath lineToPoint: NSMakePoint(16.84, 17.24)];
    [bezierPath curveToPoint: NSMakePoint(17.54, 19.18) controlPoint1: NSMakePoint(17.21, 17.86) controlPoint2: NSMakePoint(17.44, 18.52)];
    [bezierPath curveToPoint: NSMakePoint(17.58, 19.41) controlPoint1: NSMakePoint(17.56, 19.26) controlPoint2: NSMakePoint(17.57, 19.34)];
    [bezierPath curveToPoint: NSMakePoint(17.58, 19.47) controlPoint1: NSMakePoint(17.58, 19.43) controlPoint2: NSMakePoint(17.58, 19.45)];
    [bezierPath curveToPoint: NSMakePoint(17.37, 21.37) controlPoint1: NSMakePoint(17.64, 20.13) controlPoint2: NSMakePoint(17.57, 20.78)];
    [bezierPath curveToPoint: NSMakePoint(16.45, 22.84) controlPoint1: NSMakePoint(17.18, 21.92) controlPoint2: NSMakePoint(16.87, 22.42)];
    [bezierPath curveToPoint: NSMakePoint(12.86, 23.95) controlPoint1: NSMakePoint(15.51, 23.78) controlPoint2: NSMakePoint(14.2, 24.14)];
    [bezierPath curveToPoint: NSMakePoint(9.68, 22.32) controlPoint1: NSMakePoint(11.74, 23.8) controlPoint2: NSMakePoint(10.6, 23.25)];
    [bezierPath curveToPoint: NSMakePoint(8.07, 17.69) controlPoint1: NSMakePoint(8.35, 21) controlPoint2: NSMakePoint(7.8, 19.23)];
    [bezierPath curveToPoint: NSMakePoint(9.16, 15.55) controlPoint1: NSMakePoint(8.2, 16.89) controlPoint2: NSMakePoint(8.57, 16.14)];
    [bezierPath curveToPoint: NSMakePoint(9.36, 15.36) controlPoint1: NSMakePoint(9.22, 15.49) controlPoint2: NSMakePoint(9.29, 15.42)];
    [bezierPath curveToPoint: NSMakePoint(12.47, 14.41) controlPoint1: NSMakePoint(10.21, 14.63) controlPoint2: NSMakePoint(11.33, 14.32)];
    [bezierPath curveToPoint: NSMakePoint(14.06, 14.81) controlPoint1: NSMakePoint(13, 14.46) controlPoint2: NSMakePoint(13.54, 14.59)];
    [bezierPath lineToPoint: NSMakePoint(14.36, 14.51)];
    [bezierPath curveToPoint: NSMakePoint(14.36, 13.47) controlPoint1: NSMakePoint(14.36, 14.51) controlPoint2: NSMakePoint(13.84, 13.99)];
    [bezierPath curveToPoint: NSMakePoint(15.41, 13.47) controlPoint1: NSMakePoint(14.89, 12.95) controlPoint2: NSMakePoint(15.41, 13.47)];
    [bezierPath lineToPoint: NSMakePoint(15.93, 13.99)];
    [bezierPath lineToPoint: NSMakePoint(17.75, 12.17)];
    [bezierPath lineToPoint: NSMakePoint(18.79, 12.17)];
    [bezierPath lineToPoint: NSMakePoint(19.05, 11.91)];
    [bezierPath lineToPoint: NSMakePoint(19.05, 10.86)];
    [bezierPath lineToPoint: NSMakePoint(21.14, 8.78)];
    [bezierPath lineToPoint: NSMakePoint(21.66, 8.78)];
    [bezierPath lineToPoint: NSMakePoint(22.44, 8)];
    [bezierPath lineToPoint: NSMakePoint(24, 8)];
    [bezierPath lineToPoint: NSMakePoint(23.74, 10.34)];
    [bezierPath closePath];
    [bezierPath moveToPoint: NSMakePoint(11.22, 20.78)];
    [bezierPath curveToPoint: NSMakePoint(12.78, 20.78) controlPoint1: NSMakePoint(11.65, 21.21) controlPoint2: NSMakePoint(12.35, 21.21)];
    [bezierPath curveToPoint: NSMakePoint(12.78, 19.22) controlPoint1: NSMakePoint(13.21, 20.35) controlPoint2: NSMakePoint(13.21, 19.65)];
    [bezierPath curveToPoint: NSMakePoint(11.22, 19.22) controlPoint1: NSMakePoint(12.35, 18.79) controlPoint2: NSMakePoint(11.65, 18.79)];
    [bezierPath curveToPoint: NSMakePoint(11.22, 20.78) controlPoint1: NSMakePoint(10.79, 19.65) controlPoint2: NSMakePoint(10.79, 20.35)];
    [bezierPath closePath];
    [NSColor.blackColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];
}

+ (void)drawStrengthBoxWithStrengthColor: (NSColor*)strengthColor
{

    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRect: NSMakeRect(0, 0, 22, 22)];
    [strengthColor setFill];
    [rectanglePath fill];
}

+ (void)drawAdvancedTypeWithTypeColor: (NSColor*)typeColor
{
    [StyleKit drawAdvancedTypeWithFrame: NSMakeRect(0, 0, 20, 20) resizing: StyleKitResizingBehaviorAspectFit typeColor: typeColor];
}

+ (void)drawAdvancedTypeWithFrame: (NSRect)targetFrame resizing: (StyleKitResizingBehavior)resizing typeColor: (NSColor*)typeColor
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;
    
    //// Resize to Target Frame
    [NSGraphicsContext saveGraphicsState];
    NSRect resizedFrame = StyleKitResizingBehaviorApply(resizing, NSMakeRect(0, 0, 20, 20), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 20, resizedFrame.size.height / 20);


    //// Polygon Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextTranslateCTM(context, 3.7, 16.25);
    CGContextRotateCTM(context, 30 * M_PI/180);

    NSBezierPath* polygonPath = [NSBezierPath bezierPath];
    [polygonPath moveToPoint: NSMakePoint(0, 2.25)];
    [polygonPath lineToPoint: NSMakePoint(1.95, 1.12)];
    [polygonPath lineToPoint: NSMakePoint(1.95, -1.12)];
    [polygonPath lineToPoint: NSMakePoint(0, -2.25)];
    [polygonPath lineToPoint: NSMakePoint(-1.95, -1.13)];
    [polygonPath lineToPoint: NSMakePoint(-1.95, 1.12)];
    [polygonPath closePath];
    [typeColor setStroke];
    polygonPath.lineWidth = 1;
    [polygonPath stroke];

    [NSGraphicsContext restoreGraphicsState];


    //// Polygon 2 Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextTranslateCTM(context, 3.45, 4.6);
    CGContextRotateCTM(context, 30 * M_PI/180);

    NSBezierPath* polygon2Path = [NSBezierPath bezierPath];
    [polygon2Path moveToPoint: NSMakePoint(0, 2.25)];
    [polygon2Path lineToPoint: NSMakePoint(1.95, 1.12)];
    [polygon2Path lineToPoint: NSMakePoint(1.95, -1.12)];
    [polygon2Path lineToPoint: NSMakePoint(0, -2.25)];
    [polygon2Path lineToPoint: NSMakePoint(-1.95, -1.13)];
    [polygon2Path lineToPoint: NSMakePoint(-1.95, 1.12)];
    [polygon2Path closePath];
    [typeColor setStroke];
    polygon2Path.lineWidth = 1;
    [polygon2Path stroke];

    [NSGraphicsContext restoreGraphicsState];


    //// Polygon 3 Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextTranslateCTM(context, 11.75, 16);
    CGContextRotateCTM(context, 30 * M_PI/180);

    NSBezierPath* polygon3Path = [NSBezierPath bezierPath];
    [polygon3Path moveToPoint: NSMakePoint(0, 2.25)];
    [polygon3Path lineToPoint: NSMakePoint(1.95, 1.12)];
    [polygon3Path lineToPoint: NSMakePoint(1.95, -1.12)];
    [polygon3Path lineToPoint: NSMakePoint(0, -2.25)];
    [polygon3Path lineToPoint: NSMakePoint(-1.95, -1.13)];
    [polygon3Path lineToPoint: NSMakePoint(-1.95, 1.12)];
    [polygon3Path closePath];
    [typeColor setStroke];
    polygon3Path.lineWidth = 1;
    [polygon3Path stroke];

    [NSGraphicsContext restoreGraphicsState];


    //// Polygon 4 Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextTranslateCTM(context, 7.1, 9.65);
    CGContextRotateCTM(context, 30 * M_PI/180);

    NSBezierPath* polygon4Path = [NSBezierPath bezierPath];
    [polygon4Path moveToPoint: NSMakePoint(0, 2.25)];
    [polygon4Path lineToPoint: NSMakePoint(1.95, 1.12)];
    [polygon4Path lineToPoint: NSMakePoint(1.95, -1.12)];
    [polygon4Path lineToPoint: NSMakePoint(0, -2.25)];
    [polygon4Path lineToPoint: NSMakePoint(-1.95, -1.13)];
    [polygon4Path lineToPoint: NSMakePoint(-1.95, 1.12)];
    [polygon4Path closePath];
    [typeColor setStroke];
    polygon4Path.lineWidth = 1;
    [polygon4Path stroke];

    [NSGraphicsContext restoreGraphicsState];


    //// Polygon 5 Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextTranslateCTM(context, 10.65, 3.75);
    CGContextRotateCTM(context, 30 * M_PI/180);

    NSBezierPath* polygon5Path = [NSBezierPath bezierPath];
    [polygon5Path moveToPoint: NSMakePoint(0, 2.25)];
    [polygon5Path lineToPoint: NSMakePoint(1.95, 1.12)];
    [polygon5Path lineToPoint: NSMakePoint(1.95, -1.12)];
    [polygon5Path lineToPoint: NSMakePoint(0, -2.25)];
    [polygon5Path lineToPoint: NSMakePoint(-1.95, -1.13)];
    [polygon5Path lineToPoint: NSMakePoint(-1.95, 1.12)];
    [polygon5Path closePath];
    [typeColor setStroke];
    polygon5Path.lineWidth = 1;
    [polygon5Path stroke];

    [NSGraphicsContext restoreGraphicsState];


    //// Polygon 6 Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextTranslateCTM(context, 16.55, 7.75);
    CGContextRotateCTM(context, 30 * M_PI/180);

    NSBezierPath* polygon6Path = [NSBezierPath bezierPath];
    [polygon6Path moveToPoint: NSMakePoint(0, 2.25)];
    [polygon6Path lineToPoint: NSMakePoint(1.95, 1.12)];
    [polygon6Path lineToPoint: NSMakePoint(1.95, -1.12)];
    [polygon6Path lineToPoint: NSMakePoint(0, -2.25)];
    [polygon6Path lineToPoint: NSMakePoint(-1.95, -1.13)];
    [polygon6Path lineToPoint: NSMakePoint(-1.95, 1.12)];
    [polygon6Path closePath];
    [typeColor setStroke];
    polygon6Path.lineWidth = 1;
    [polygon6Path stroke];

    [NSGraphicsContext restoreGraphicsState];


    //// Bezier Drawing
    NSBezierPath* bezierPath = [NSBezierPath bezierPath];
    [bezierPath moveToPoint: NSMakePoint(10.61, 14.02)];
    [bezierPath lineToPoint: NSMakePoint(8.23, 11.62)];
    [typeColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Bezier 2 Drawing
    NSBezierPath* bezier2Path = [NSBezierPath bezierPath];
    [bezier2Path moveToPoint: NSMakePoint(4.81, 14.3)];
    [bezier2Path lineToPoint: NSMakePoint(5.97, 11.62)];
    [typeColor setStroke];
    bezier2Path.lineWidth = 1;
    [bezier2Path stroke];


    //// Bezier 3 Drawing
    NSBezierPath* bezier3Path = [NSBezierPath bezierPath];
    [bezier3Path moveToPoint: NSMakePoint(5.73, 4.62)];
    [bezier3Path lineToPoint: NSMakePoint(8.4, 3.74)];
    [typeColor setStroke];
    bezier3Path.lineWidth = 1;
    [bezier3Path stroke];


    //// Bezier 4 Drawing
    NSBezierPath* bezier4Path = [NSBezierPath bezierPath];
    [bezier4Path moveToPoint: NSMakePoint(12.93, 3.74)];
    [bezier4Path lineToPoint: NSMakePoint(15.41, 5.78)];
    [typeColor setStroke];
    bezier4Path.lineWidth = 1;
    [bezier4Path stroke];


    //// Bezier 5 Drawing
    NSBezierPath* bezier5Path = [NSBezierPath bezierPath];
    [bezier5Path moveToPoint: NSMakePoint(8.23, 7.7)];
    [bezier5Path lineToPoint: NSMakePoint(9.53, 5.7)];
    [typeColor setStroke];
    bezier5Path.lineWidth = 1;
    [bezier5Path stroke];
    
    [NSGraphicsContext restoreGraphicsState];

}

+ (void)drawPassphraseTypeWithTypeColor: (NSColor*)typeColor
{
    [StyleKit drawPassphraseTypeWithFrame: NSMakeRect(0, 0, 20, 20) resizing: StyleKitResizingBehaviorAspectFit typeColor: typeColor];
}

+ (void)drawPassphraseTypeWithFrame: (NSRect)targetFrame resizing: (StyleKitResizingBehavior)resizing typeColor: (NSColor*)typeColor
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;
    
    //// Resize to Target Frame
    [NSGraphicsContext saveGraphicsState];
    NSRect resizedFrame = StyleKitResizingBehaviorApply(resizing, NSMakeRect(0, 0, 20, 20), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 20, resizedFrame.size.height / 20);


    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(2.4, 15.7, 13.6, 2.4) xRadius: 1.2 yRadius: 1.2];
    [typeColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Rectangle 2 Drawing
    NSBezierPath* rectangle2Path = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(4, 6.5, 14.8, 2.4) xRadius: 1.2 yRadius: 1.2];
    [typeColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];


    //// Rectangle 3 Drawing
    NSBezierPath* rectangle3Path = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(1.2, 11.1, 17.6, 2.4) xRadius: 1.2 yRadius: 1.2];
    [typeColor setStroke];
    rectangle3Path.lineWidth = 1;
    [rectangle3Path stroke];


    //// Rectangle 4 Drawing
    NSBezierPath* rectangle4Path = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(1.6, 1.9, 12, 2.4) xRadius: 1.2 yRadius: 1.2];
    [typeColor setStroke];
    rectangle4Path.lineWidth = 1;
    [rectangle4Path stroke];
    
    [NSGraphicsContext restoreGraphicsState];

}

+ (void)drawPatternTypeWithTypeColor: (NSColor*)typeColor
{
    [StyleKit drawPatternTypeWithFrame: NSMakeRect(0, 0, 20, 20) resizing: StyleKitResizingBehaviorAspectFit typeColor: typeColor];
}

+ (void)drawPatternTypeWithFrame: (NSRect)targetFrame resizing: (StyleKitResizingBehavior)resizing typeColor: (NSColor*)typeColor
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;
    
    //// Resize to Target Frame
    [NSGraphicsContext saveGraphicsState];
    NSRect resizedFrame = StyleKitResizingBehaviorApply(resizing, NSMakeRect(0, 0, 20, 20), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 20, resizedFrame.size.height / 20);


    //// Oval Drawing
    NSBezierPath* ovalPath = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(13.55, 2.15, 4.3, 4.3)];
    [typeColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Oval 2 Drawing
    NSBezierPath* oval2Path = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(13.55, 7.85, 4.3, 4.3)];
    [typeColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];


    //// Oval 3 Drawing
    NSBezierPath* oval3Path = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(13.55, 13.55, 4.3, 4.3)];
    [typeColor setStroke];
    oval3Path.lineWidth = 1;
    [oval3Path stroke];


    //// Oval 4 Drawing
    NSBezierPath* oval4Path = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(7.85, 2.15, 4.3, 4.3)];
    [typeColor setStroke];
    oval4Path.lineWidth = 1;
    [oval4Path stroke];


    //// Oval 5 Drawing
    NSBezierPath* oval5Path = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(7.85, 7.85, 4.3, 4.3)];
    [typeColor setStroke];
    oval5Path.lineWidth = 1;
    [oval5Path stroke];


    //// Oval 6 Drawing
    NSBezierPath* oval6Path = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(7.85, 13.55, 4.3, 4.3)];
    [typeColor setStroke];
    oval6Path.lineWidth = 1;
    [oval6Path stroke];


    //// Oval 7 Drawing
    NSBezierPath* oval7Path = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(2.15, 2.15, 4.3, 4.3)];
    [typeColor setStroke];
    oval7Path.lineWidth = 1;
    [oval7Path stroke];


    //// Oval 8 Drawing
    NSBezierPath* oval8Path = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(2.15, 7.85, 4.3, 4.3)];
    [typeColor setStroke];
    oval8Path.lineWidth = 1;
    [oval8Path stroke];


    //// Oval 9 Drawing
    NSBezierPath* oval9Path = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(2.15, 13.55, 4.3, 4.3)];
    [typeColor setStroke];
    oval9Path.lineWidth = 1;
    [oval9Path stroke];
    
    [NSGraphicsContext restoreGraphicsState];

}

+ (void)drawPronounceableTypeWithTypeColor: (NSColor*)typeColor
{
    [StyleKit drawPronounceableTypeWithFrame: NSMakeRect(0, 0, 20, 20) resizing: StyleKitResizingBehaviorAspectFit typeColor: typeColor];
}

+ (void)drawPronounceableTypeWithFrame: (NSRect)targetFrame resizing: (StyleKitResizingBehavior)resizing typeColor: (NSColor*)typeColor
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;
    
    //// Resize to Target Frame
    [NSGraphicsContext saveGraphicsState];
    NSRect resizedFrame = StyleKitResizingBehaviorApply(resizing, NSMakeRect(0, 0, 20, 20), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 20, resizedFrame.size.height / 20);


    //// Bezier Drawing
    NSBezierPath* bezierPath = [NSBezierPath bezierPath];
    [bezierPath moveToPoint: NSMakePoint(10.04, 16.46)];
    [bezierPath curveToPoint: NSMakePoint(2.44, 10.46) controlPoint1: NSMakePoint(5.85, 16.46) controlPoint2: NSMakePoint(2.44, 13.78)];
    [bezierPath curveToPoint: NSMakePoint(5.21, 5.83) controlPoint1: NSMakePoint(2.44, 8.6) controlPoint2: NSMakePoint(3.52, 6.93)];
    [bezierPath curveToPoint: NSMakePoint(2.44, 3.66) controlPoint1: NSMakePoint(4.15, 4.54) controlPoint2: NSMakePoint(1.89, 3.78)];
    [bezierPath curveToPoint: NSMakePoint(8.43, 4.6) controlPoint1: NSMakePoint(4.48, 3.26) controlPoint2: NSMakePoint(6.72, 3.88)];
    [bezierPath curveToPoint: NSMakePoint(10.04, 4.46) controlPoint1: NSMakePoint(8.95, 4.51) controlPoint2: NSMakePoint(9.49, 4.46)];
    [bezierPath curveToPoint: NSMakePoint(17.64, 10.46) controlPoint1: NSMakePoint(14.24, 4.46) controlPoint2: NSMakePoint(17.64, 7.15)];
    [bezierPath curveToPoint: NSMakePoint(10.04, 16.46) controlPoint1: NSMakePoint(17.64, 13.78) controlPoint2: NSMakePoint(14.24, 16.46)];
    [bezierPath closePath];
    [typeColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];
    
    [NSGraphicsContext restoreGraphicsState];

}

+ (void)drawRandomTypeWithTypeColor: (NSColor*)typeColor
{
    [StyleKit drawRandomTypeWithFrame: NSMakeRect(0, 0, 20, 20) resizing: StyleKitResizingBehaviorAspectFit typeColor: typeColor];
}

+ (void)drawRandomTypeWithFrame: (NSRect)targetFrame resizing: (StyleKitResizingBehavior)resizing typeColor: (NSColor*)typeColor
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;
    
    //// Resize to Target Frame
    [NSGraphicsContext saveGraphicsState];
    NSRect resizedFrame = StyleKitResizingBehaviorApply(resizing, NSMakeRect(0, 0, 20, 20), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 20, resizedFrame.size.height / 20);


    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRect: NSMakeRect(5.28, 14.73, 3.15, 3.15)];
    [typeColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Bezier Drawing
    NSBezierPath* bezierPath = [NSBezierPath bezierPath];
    [bezierPath moveToPoint: NSMakePoint(14.74, 8.42)];
    [bezierPath lineToPoint: NSMakePoint(11.58, 8.42)];
    [bezierPath lineToPoint: NSMakePoint(11.58, 11.58)];
    [bezierPath lineToPoint: NSMakePoint(14.74, 11.58)];
    [bezierPath lineToPoint: NSMakePoint(14.74, 8.42)];
    [bezierPath closePath];
    [bezierPath moveToPoint: NSMakePoint(14.74, 14.74)];
    [bezierPath lineToPoint: NSMakePoint(14.74, 17.9)];
    [bezierPath lineToPoint: NSMakePoint(11.58, 17.9)];
    [bezierPath lineToPoint: NSMakePoint(11.58, 14.74)];
    [bezierPath lineToPoint: NSMakePoint(8.42, 14.74)];
    [bezierPath lineToPoint: NSMakePoint(8.42, 11.58)];
    [bezierPath lineToPoint: NSMakePoint(5.26, 11.58)];
    [bezierPath lineToPoint: NSMakePoint(5.26, 8.42)];
    [bezierPath lineToPoint: NSMakePoint(2.1, 8.42)];
    [bezierPath lineToPoint: NSMakePoint(2.1, 5.26)];
    [bezierPath lineToPoint: NSMakePoint(5.26, 5.26)];
    [bezierPath lineToPoint: NSMakePoint(5.26, 2.1)];
    [bezierPath lineToPoint: NSMakePoint(8.42, 2.1)];
    [bezierPath lineToPoint: NSMakePoint(8.42, 5.26)];
    [bezierPath lineToPoint: NSMakePoint(11.58, 5.26)];
    [bezierPath lineToPoint: NSMakePoint(11.58, 2.1)];
    [bezierPath lineToPoint: NSMakePoint(14.74, 2.1)];
    [bezierPath lineToPoint: NSMakePoint(14.74, 5.26)];
    [bezierPath lineToPoint: NSMakePoint(17.9, 5.26)];
    [bezierPath lineToPoint: NSMakePoint(17.9, 8.42)];
    [bezierPath lineToPoint: NSMakePoint(17.9, 11.58)];
    [bezierPath lineToPoint: NSMakePoint(17.9, 14.74)];
    [bezierPath lineToPoint: NSMakePoint(14.74, 14.74)];
    [bezierPath closePath];
    [typeColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Rectangle 2 Drawing
    NSBezierPath* rectangle2Path = [NSBezierPath bezierPathWithRect: NSMakeRect(2.12, 11.57, 3.15, 3.15)];
    [typeColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];
    
    [NSGraphicsContext restoreGraphicsState];

}

+ (void)drawStoredTypeWithTypeColor: (NSColor*)typeColor
{
    [StyleKit drawStoredTypeWithFrame: NSMakeRect(0, 0, 20, 20) resizing: StyleKitResizingBehaviorAspectFit typeColor: typeColor];
}

+ (void)drawStoredTypeWithFrame: (NSRect)targetFrame resizing: (StyleKitResizingBehavior)resizing typeColor: (NSColor*)typeColor
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;
    
    //// Resize to Target Frame
    [NSGraphicsContext saveGraphicsState];
    NSRect resizedFrame = StyleKitResizingBehaviorApply(resizing, NSMakeRect(0, 0, 20, 20), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 20, resizedFrame.size.height / 20);


    //// Oval Drawing
    NSBezierPath* ovalPath = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(2, 2, 16, 16)];
    [typeColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Oval 2 Drawing
    NSBezierPath* oval2Path = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(7.6, 7.6, 4.8, 4.8)];
    [typeColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];
    
    [NSGraphicsContext restoreGraphicsState];

}

+ (void)drawZoom1WithZoomStroke: (NSColor*)zoomStroke
{
    [StyleKit drawZoom1WithFrame: NSMakeRect(0, 0, 21, 21) resizing: StyleKitResizingBehaviorAspectFit zoomStroke: zoomStroke];
}

+ (void)drawZoom1WithFrame: (NSRect)targetFrame resizing: (StyleKitResizingBehavior)resizing zoomStroke: (NSColor*)zoomStroke
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;
    
    //// Resize to Target Frame
    [NSGraphicsContext saveGraphicsState];
    NSRect resizedFrame = StyleKitResizingBehaviorApply(resizing, NSMakeRect(0, 0, 21, 21), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 21, resizedFrame.size.height / 21);


    //// Oval Drawing
    NSBezierPath* ovalPath = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(2.5, 2.5, 16, 16)];
    [zoomStroke setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Bezier Drawing
    NSBezierPath* bezierPath = [NSBezierPath bezierPath];
    [bezierPath moveToPoint: NSMakePoint(6.35, 6.35)];
    [bezierPath lineToPoint: NSMakePoint(9.18, 9.18)];
    [zoomStroke setStroke];
    bezierPath.lineWidth = 2;
    [bezierPath stroke];


    //// Oval 2 Drawing
    NSBezierPath* oval2Path = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(8.25, 8.25, 6.4, 6.4)];
    [zoomStroke setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];
    
    [NSGraphicsContext restoreGraphicsState];

}

+ (void)drawZoomWithZoomStroke: (NSColor*)zoomStroke
{
    [StyleKit drawZoomWithFrame: NSMakeRect(0, 0, 21, 21) resizing: StyleKitResizingBehaviorAspectFit zoomStroke: zoomStroke];
}

+ (void)drawZoomWithFrame: (NSRect)targetFrame resizing: (StyleKitResizingBehavior)resizing zoomStroke: (NSColor*)zoomStroke
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;
    
    //// Resize to Target Frame
    [NSGraphicsContext saveGraphicsState];
    NSRect resizedFrame = StyleKitResizingBehaviorApply(resizing, NSMakeRect(0, 0, 21, 21), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 21, resizedFrame.size.height / 21);


    //// Oval Drawing
    NSBezierPath* ovalPath = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(2.5, 2.5, 16, 16)];
    [zoomStroke setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Bezier Drawing
    NSBezierPath* bezierPath = [NSBezierPath bezierPath];
    [bezierPath moveToPoint: NSMakePoint(6.35, 6.35)];
    [bezierPath lineToPoint: NSMakePoint(9.18, 9.18)];
    [zoomStroke setStroke];
    bezierPath.lineWidth = 2;
    [bezierPath stroke];


    //// Oval 2 Drawing
    NSBezierPath* oval2Path = [NSBezierPath bezierPathWithOvalInRect: NSMakeRect(8.25, 8.25, 6.4, 6.4)];
    [zoomStroke setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];


    //// Bezier 2 Drawing
    NSBezierPath* bezier2Path = [NSBezierPath bezierPath];
    [bezier2Path moveToPoint: NSMakePoint(11.45, 13.01)];
    [bezier2Path lineToPoint: NSMakePoint(11.45, 9.89)];
    [zoomStroke setStroke];
    bezier2Path.lineWidth = 0.75;
    [bezier2Path stroke];


    //// Bezier 3 Drawing
    NSBezierPath* bezier3Path = [NSBezierPath bezierPath];
    [bezier3Path moveToPoint: NSMakePoint(13, 11.45)];
    [bezier3Path lineToPoint: NSMakePoint(9.89, 11.45)];
    [zoomStroke setStroke];
    bezier3Path.lineWidth = 0.75;
    [bezier3Path stroke];
    
    [NSGraphicsContext restoreGraphicsState];

}

+ (void)drawPasswordHeader
{
    [StyleKit drawPasswordHeaderWithFrame: NSMakeRect(0, 0, 80, 20) resizing: StyleKitResizingBehaviorAspectFit];
}

+ (void)drawPasswordHeaderWithFrame: (NSRect)targetFrame resizing: (StyleKitResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;
    
    //// Resize to Target Frame
    [NSGraphicsContext saveGraphicsState];
    NSRect resizedFrame = StyleKitResizingBehaviorApply(resizing, NSMakeRect(0, 0, 80, 20), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 80, resizedFrame.size.height / 20);


    //// Color Declarations
    NSColor* headerColor = [NSColor colorWithRed: 0.345 green: 0.349 blue: 0.357 alpha: 1];

    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(1.75, 2.47, 76.5, 15.05) xRadius: 7.4 yRadius: 7.4];
    [headerColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Bezier Drawing
    NSBezierPath* bezierPath = [NSBezierPath bezierPath];
    [bezierPath moveToPoint: NSMakePoint(21.5, 8.58)];
    [bezierPath lineToPoint: NSMakePoint(20.98, 7.7)];
    [bezierPath lineToPoint: NSMakePoint(18.89, 9.08)];
    [bezierPath lineToPoint: NSMakePoint(18.89, 6.56)];
    [bezierPath lineToPoint: NSMakePoint(17.92, 6.56)];
    [bezierPath lineToPoint: NSMakePoint(17.92, 9.08)];
    [bezierPath lineToPoint: NSMakePoint(15.81, 7.68)];
    [bezierPath lineToPoint: NSMakePoint(15.29, 8.58)];
    [bezierPath lineToPoint: NSMakePoint(17.5, 10.02)];
    [bezierPath lineToPoint: NSMakePoint(15.29, 11.46)];
    [bezierPath lineToPoint: NSMakePoint(15.81, 12.34)];
    [bezierPath lineToPoint: NSMakePoint(17.92, 10.93)];
    [bezierPath lineToPoint: NSMakePoint(17.92, 13.44)];
    [bezierPath lineToPoint: NSMakePoint(18.89, 13.44)];
    [bezierPath lineToPoint: NSMakePoint(18.89, 10.95)];
    [bezierPath lineToPoint: NSMakePoint(20.98, 12.34)];
    [bezierPath lineToPoint: NSMakePoint(21.5, 11.46)];
    [bezierPath lineToPoint: NSMakePoint(19.32, 10.02)];
    [bezierPath lineToPoint: NSMakePoint(21.5, 8.58)];
    [bezierPath closePath];
    [headerColor setFill];
    [bezierPath fill];


    //// Bezier 2 Drawing
    NSBezierPath* bezier2Path = [NSBezierPath bezierPath];
    [bezier2Path moveToPoint: NSMakePoint(32.31, 8.58)];
    [bezier2Path lineToPoint: NSMakePoint(31.78, 7.7)];
    [bezier2Path lineToPoint: NSMakePoint(29.7, 9.08)];
    [bezier2Path lineToPoint: NSMakePoint(29.7, 6.56)];
    [bezier2Path lineToPoint: NSMakePoint(28.72, 6.56)];
    [bezier2Path lineToPoint: NSMakePoint(28.72, 9.08)];
    [bezier2Path lineToPoint: NSMakePoint(26.61, 7.68)];
    [bezier2Path lineToPoint: NSMakePoint(26.09, 8.58)];
    [bezier2Path lineToPoint: NSMakePoint(28.31, 10.02)];
    [bezier2Path lineToPoint: NSMakePoint(26.09, 11.46)];
    [bezier2Path lineToPoint: NSMakePoint(26.61, 12.34)];
    [bezier2Path lineToPoint: NSMakePoint(28.72, 10.93)];
    [bezier2Path lineToPoint: NSMakePoint(28.72, 13.44)];
    [bezier2Path lineToPoint: NSMakePoint(29.7, 13.44)];
    [bezier2Path lineToPoint: NSMakePoint(29.7, 10.95)];
    [bezier2Path lineToPoint: NSMakePoint(31.78, 12.34)];
    [bezier2Path lineToPoint: NSMakePoint(32.31, 11.46)];
    [bezier2Path lineToPoint: NSMakePoint(30.13, 10.02)];
    [bezier2Path lineToPoint: NSMakePoint(32.31, 8.58)];
    [bezier2Path closePath];
    [headerColor setFill];
    [bezier2Path fill];


    //// Bezier 3 Drawing
    NSBezierPath* bezier3Path = [NSBezierPath bezierPath];
    [bezier3Path moveToPoint: NSMakePoint(43.11, 8.58)];
    [bezier3Path lineToPoint: NSMakePoint(42.58, 7.7)];
    [bezier3Path lineToPoint: NSMakePoint(40.5, 9.08)];
    [bezier3Path lineToPoint: NSMakePoint(40.5, 6.56)];
    [bezier3Path lineToPoint: NSMakePoint(39.52, 6.56)];
    [bezier3Path lineToPoint: NSMakePoint(39.52, 9.08)];
    [bezier3Path lineToPoint: NSMakePoint(37.41, 7.68)];
    [bezier3Path lineToPoint: NSMakePoint(36.89, 8.58)];
    [bezier3Path lineToPoint: NSMakePoint(39.11, 10.02)];
    [bezier3Path lineToPoint: NSMakePoint(36.89, 11.46)];
    [bezier3Path lineToPoint: NSMakePoint(37.41, 12.34)];
    [bezier3Path lineToPoint: NSMakePoint(39.52, 10.93)];
    [bezier3Path lineToPoint: NSMakePoint(39.52, 13.44)];
    [bezier3Path lineToPoint: NSMakePoint(40.5, 13.44)];
    [bezier3Path lineToPoint: NSMakePoint(40.5, 10.95)];
    [bezier3Path lineToPoint: NSMakePoint(42.58, 12.34)];
    [bezier3Path lineToPoint: NSMakePoint(43.11, 11.46)];
    [bezier3Path lineToPoint: NSMakePoint(40.93, 10.02)];
    [bezier3Path lineToPoint: NSMakePoint(43.11, 8.58)];
    [bezier3Path closePath];
    [headerColor setFill];
    [bezier3Path fill];


    //// Bezier 4 Drawing
    NSBezierPath* bezier4Path = [NSBezierPath bezierPath];
    [bezier4Path moveToPoint: NSMakePoint(53.91, 8.58)];
    [bezier4Path lineToPoint: NSMakePoint(53.38, 7.7)];
    [bezier4Path lineToPoint: NSMakePoint(51.3, 9.08)];
    [bezier4Path lineToPoint: NSMakePoint(51.3, 6.56)];
    [bezier4Path lineToPoint: NSMakePoint(50.32, 6.56)];
    [bezier4Path lineToPoint: NSMakePoint(50.32, 9.08)];
    [bezier4Path lineToPoint: NSMakePoint(48.21, 7.68)];
    [bezier4Path lineToPoint: NSMakePoint(47.7, 8.58)];
    [bezier4Path lineToPoint: NSMakePoint(49.91, 10.02)];
    [bezier4Path lineToPoint: NSMakePoint(47.7, 11.46)];
    [bezier4Path lineToPoint: NSMakePoint(48.21, 12.34)];
    [bezier4Path lineToPoint: NSMakePoint(50.32, 10.93)];
    [bezier4Path lineToPoint: NSMakePoint(50.32, 13.44)];
    [bezier4Path lineToPoint: NSMakePoint(51.3, 13.44)];
    [bezier4Path lineToPoint: NSMakePoint(51.3, 10.95)];
    [bezier4Path lineToPoint: NSMakePoint(53.38, 12.34)];
    [bezier4Path lineToPoint: NSMakePoint(53.91, 11.46)];
    [bezier4Path lineToPoint: NSMakePoint(51.73, 10.02)];
    [bezier4Path lineToPoint: NSMakePoint(53.91, 8.58)];
    [bezier4Path closePath];
    [headerColor setFill];
    [bezier4Path fill];


    //// Bezier 5 Drawing
    NSBezierPath* bezier5Path = [NSBezierPath bezierPath];
    [bezier5Path moveToPoint: NSMakePoint(64.71, 8.58)];
    [bezier5Path lineToPoint: NSMakePoint(64.18, 7.7)];
    [bezier5Path lineToPoint: NSMakePoint(62.1, 9.08)];
    [bezier5Path lineToPoint: NSMakePoint(62.1, 6.56)];
    [bezier5Path lineToPoint: NSMakePoint(61.12, 6.56)];
    [bezier5Path lineToPoint: NSMakePoint(61.12, 9.08)];
    [bezier5Path lineToPoint: NSMakePoint(59.02, 7.68)];
    [bezier5Path lineToPoint: NSMakePoint(58.5, 8.58)];
    [bezier5Path lineToPoint: NSMakePoint(60.71, 10.02)];
    [bezier5Path lineToPoint: NSMakePoint(58.5, 11.46)];
    [bezier5Path lineToPoint: NSMakePoint(59.02, 12.34)];
    [bezier5Path lineToPoint: NSMakePoint(61.12, 10.93)];
    [bezier5Path lineToPoint: NSMakePoint(61.12, 13.44)];
    [bezier5Path lineToPoint: NSMakePoint(62.1, 13.44)];
    [bezier5Path lineToPoint: NSMakePoint(62.1, 10.95)];
    [bezier5Path lineToPoint: NSMakePoint(64.18, 12.34)];
    [bezier5Path lineToPoint: NSMakePoint(64.71, 11.46)];
    [bezier5Path lineToPoint: NSMakePoint(62.53, 10.02)];
    [bezier5Path lineToPoint: NSMakePoint(64.71, 8.58)];
    [bezier5Path closePath];
    [headerColor setFill];
    [bezier5Path fill];
    
    [NSGraphicsContext restoreGraphicsState];

}

+ (void)drawPasswordStrengthHeader
{
    [StyleKit drawPasswordStrengthHeaderWithFrame: NSMakeRect(0, 0, 20, 20) resizing: StyleKitResizingBehaviorAspectFit];
}

+ (void)drawPasswordStrengthHeaderWithFrame: (NSRect)targetFrame resizing: (StyleKitResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;
    
    //// Resize to Target Frame
    [NSGraphicsContext saveGraphicsState];
    NSRect resizedFrame = StyleKitResizingBehaviorApply(resizing, NSMakeRect(0, 0, 20, 20), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 20, resizedFrame.size.height / 20);


    //// Color Declarations
    NSColor* headerColor = [NSColor colorWithRed: 0.345 green: 0.349 blue: 0.357 alpha: 1];

    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(13.7, 4.15, 3.1, 11.7) xRadius: 1.4 yRadius: 1.4];
    [headerColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Rectangle 2 Drawing
    NSBezierPath* rectangle2Path = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(13.7, 4.15, 3.1, 11.7) xRadius: 1.4 yRadius: 1.4];
    [headerColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];


    //// Rectangle 3 Drawing
    NSBezierPath* rectangle3Path = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(8.45, 4.18, 3.1, 7.45) xRadius: 1.4 yRadius: 1.4];
    [headerColor setStroke];
    rectangle3Path.lineWidth = 1;
    [rectangle3Path stroke];


    //// Rectangle 4 Drawing
    NSBezierPath* rectangle4Path = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(8.45, 4.18, 3.1, 7.45) xRadius: 1.4 yRadius: 1.4];
    [headerColor setStroke];
    rectangle4Path.lineWidth = 1;
    [rectangle4Path stroke];


    //// Rectangle 5 Drawing
    NSBezierPath* rectangle5Path = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(3.2, 4.15, 3.1, 3.2) xRadius: 1.4 yRadius: 1.4];
    [headerColor setStroke];
    rectangle5Path.lineWidth = 1;
    [rectangle5Path stroke];


    //// Rectangle 6 Drawing
    NSBezierPath* rectangle6Path = [NSBezierPath bezierPathWithRoundedRect: NSMakeRect(3.2, 4.15, 3.1, 3.2) xRadius: 1.4 yRadius: 1.4];
    [headerColor setStroke];
    rectangle6Path.lineWidth = 1;
    [rectangle6Path stroke];
    
    [NSGraphicsContext restoreGraphicsState];

}

+ (void)drawPasswordTypeHeader
{
    [StyleKit drawPasswordTypeHeaderWithFrame: NSMakeRect(0, 0, 20, 20) resizing: StyleKitResizingBehaviorAspectFit];
}

+ (void)drawPasswordTypeHeaderWithFrame: (NSRect)targetFrame resizing: (StyleKitResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;
    
    //// Resize to Target Frame
    [NSGraphicsContext saveGraphicsState];
    NSRect resizedFrame = StyleKitResizingBehaviorApply(resizing, NSMakeRect(0, 0, 20, 20), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 20, resizedFrame.size.height / 20);


    //// Color Declarations
    NSColor* headerColor = [NSColor colorWithRed: 0.345 green: 0.349 blue: 0.357 alpha: 1];

    //// Star Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextTranslateCTM(context, 6.8, 8.15);
    CGContextRotateCTM(context, 30.15 * M_PI/180);

    NSBezierPath* starPath = [NSBezierPath bezierPath];
    [starPath moveToPoint: NSMakePoint(0, 6.4)];
    [starPath lineToPoint: NSMakePoint(3.7, 0)];
    [starPath lineToPoint: NSMakePoint(0, -6.4)];
    [starPath lineToPoint: NSMakePoint(-3.7, -0)];
    [starPath closePath];
    [headerColor setStroke];
    starPath.lineWidth = 1;
    starPath.lineJoinStyle = NSRoundLineJoinStyle;
    [starPath stroke];

    [NSGraphicsContext restoreGraphicsState];


    //// Star 2 Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextTranslateCTM(context, 13.2, 8.15);
    CGContextRotateCTM(context, 149.85 * M_PI/180);

    NSBezierPath* star2Path = [NSBezierPath bezierPath];
    [star2Path moveToPoint: NSMakePoint(0, 6.4)];
    [star2Path lineToPoint: NSMakePoint(3.65, 0)];
    [star2Path lineToPoint: NSMakePoint(0, -6.4)];
    [star2Path lineToPoint: NSMakePoint(-3.65, -0)];
    [star2Path closePath];
    [headerColor setStroke];
    star2Path.lineWidth = 1;
    star2Path.lineJoinStyle = NSRoundLineJoinStyle;
    [star2Path stroke];

    [NSGraphicsContext restoreGraphicsState];


    //// Star 3 Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextTranslateCTM(context, 10, 13.65);
    CGContextRotateCTM(context, 90 * M_PI/180);

    NSBezierPath* star3Path = [NSBezierPath bezierPath];
    [star3Path moveToPoint: NSMakePoint(0, 6.45)];
    [star3Path lineToPoint: NSMakePoint(3.7, 0)];
    [star3Path lineToPoint: NSMakePoint(0, -6.45)];
    [star3Path lineToPoint: NSMakePoint(-3.7, -0)];
    [star3Path closePath];
    [headerColor setStroke];
    star3Path.lineWidth = 1;
    star3Path.lineJoinStyle = NSRoundLineJoinStyle;
    [star3Path stroke];

    [NSGraphicsContext restoreGraphicsState];
    
    [NSGraphicsContext restoreGraphicsState];

}

#pragma mark Generated Images

+ (NSImage*)imageOfPreferencesButtonWithStrokeColor: (NSColor*)strokeColor
{
    return [NSImage imageWithSize: NSMakeSize(19, 19) flipped: NO drawingHandler: ^(__unused NSRect dstRect)
    {
        [StyleKit drawPreferencesButtonWithStrokeColor: strokeColor];

        return YES;
    }];
}

+ (NSImage*)imageOfMenuIcon
{
    if (_imageOfMenuIcon)
        return _imageOfMenuIcon;

    _imageOfMenuIcon = [NSImage imageWithSize: NSMakeSize(32, 32) flipped: NO drawingHandler: ^(__unused NSRect dstRect)
    {
        [StyleKit drawMenuIcon];

        return YES;
    }];

    return _imageOfMenuIcon;
}

+ (NSImage*)imageOfAdvancedTypeWithTypeColor: (NSColor*)typeColor
{
    return [NSImage imageWithSize: NSMakeSize(20, 20) flipped: NO drawingHandler: ^(__unused NSRect dstRect)
    {
        [StyleKit drawAdvancedTypeWithTypeColor: typeColor];

        return YES;
    }];
}

+ (NSImage*)imageOfPassphraseTypeWithTypeColor: (NSColor*)typeColor
{
    return [NSImage imageWithSize: NSMakeSize(20, 20) flipped: NO drawingHandler: ^(__unused NSRect dstRect)
    {
        [StyleKit drawPassphraseTypeWithTypeColor: typeColor];

        return YES;
    }];
}

+ (NSImage*)imageOfPatternTypeWithTypeColor: (NSColor*)typeColor
{
    return [NSImage imageWithSize: NSMakeSize(20, 20) flipped: NO drawingHandler: ^(__unused NSRect dstRect)
    {
        [StyleKit drawPatternTypeWithTypeColor: typeColor];

        return YES;
    }];
}

+ (NSImage*)imageOfPronounceableTypeWithTypeColor: (NSColor*)typeColor
{
    return [NSImage imageWithSize: NSMakeSize(20, 20) flipped: NO drawingHandler: ^(__unused NSRect dstRect)
    {
        [StyleKit drawPronounceableTypeWithTypeColor: typeColor];

        return YES;
    }];
}

+ (NSImage*)imageOfRandomTypeWithTypeColor: (NSColor*)typeColor
{
    return [NSImage imageWithSize: NSMakeSize(20, 20) flipped: NO drawingHandler: ^(__unused NSRect dstRect)
    {
        [StyleKit drawRandomTypeWithTypeColor: typeColor];

        return YES;
    }];
}

+ (NSImage*)imageOfStoredTypeWithTypeColor: (NSColor*)typeColor
{
    return [NSImage imageWithSize: NSMakeSize(20, 20) flipped: NO drawingHandler: ^(__unused NSRect dstRect)
    {
        [StyleKit drawStoredTypeWithTypeColor: typeColor];

        return YES;
    }];
}

+ (NSImage*)imageOfZoom1WithZoomStroke: (NSColor*)zoomStroke
{
    return [NSImage imageWithSize: NSMakeSize(21, 21) flipped: NO drawingHandler: ^(__unused NSRect dstRect)
    {
        [StyleKit drawZoom1WithZoomStroke: zoomStroke];

        return YES;
    }];
}

+ (NSImage*)imageOfZoomWithZoomStroke: (NSColor*)zoomStroke
{
    return [NSImage imageWithSize: NSMakeSize(21, 21) flipped: NO drawingHandler: ^(__unused NSRect dstRect)
    {
        [StyleKit drawZoomWithZoomStroke: zoomStroke];

        return YES;
    }];
}

+ (NSImage*)imageOfPasswordHeader
{
    if (_imageOfPasswordHeader)
        return _imageOfPasswordHeader;

    _imageOfPasswordHeader = [NSImage imageWithSize: NSMakeSize(80, 20) flipped: NO drawingHandler: ^(__unused NSRect dstRect)
    {
        [StyleKit drawPasswordHeader];

        return YES;
    }];

    return _imageOfPasswordHeader;
}

+ (NSImage*)imageOfPasswordStrengthHeader
{
    if (_imageOfPasswordStrengthHeader)
        return _imageOfPasswordStrengthHeader;

    _imageOfPasswordStrengthHeader = [NSImage imageWithSize: NSMakeSize(20, 20) flipped: NO drawingHandler: ^(__unused NSRect dstRect)
    {
        [StyleKit drawPasswordStrengthHeader];

        return YES;
    }];

    return _imageOfPasswordStrengthHeader;
}

+ (NSImage*)imageOfPasswordTypeHeader
{
    if (_imageOfPasswordTypeHeader)
        return _imageOfPasswordTypeHeader;

    _imageOfPasswordTypeHeader = [NSImage imageWithSize: NSMakeSize(20, 20) flipped: NO drawingHandler: ^(__unused NSRect dstRect)
    {
        [StyleKit drawPasswordTypeHeader];

        return YES;
    }];

    return _imageOfPasswordTypeHeader;
}

@end



NSRect StyleKitResizingBehaviorApply(StyleKitResizingBehavior behavior, NSRect rect, NSRect target)
{
    if (NSEqualRects(rect, target) || NSEqualRects(target, NSZeroRect))
        return rect;

    NSSize scales = NSZeroSize;
    scales.width = ABS(target.size.width / rect.size.width);
    scales.height = ABS(target.size.height / rect.size.height);

    switch (behavior)
    {
        case StyleKitResizingBehaviorAspectFit:
        {
            scales.width = MIN(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case StyleKitResizingBehaviorAspectFill:
        {
            scales.width = MAX(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case StyleKitResizingBehaviorStretch:
            break;
        case StyleKitResizingBehaviorCenter:
        {
            scales.width = 1;
            scales.height = 1;
            break;
        }
    }

    NSRect result = CGRectStandardize(rect);
    result.size.width *= scales.width;
    result.size.height *= scales.height;
    result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
    result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
    return result;
}
