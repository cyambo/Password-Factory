//
//  StyleKit.m
//  Password Factory
//
//  Created by Cristiana Yambo on 11/7/17.
//  Copyright Â© 2017 Password Factory. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

#import "StyleKit.h"


@implementation StyleKit

#pragma mark Cache

static NSImage* _imageOfPreferencesButton = nil;
static NSImage* _imageOfMenuIcon = nil;

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawStrengthMeterWithStrengthColor: (NSColor*)strengthColor strength: (CGFloat)strength size: (NSSize)size
{
    [StyleKit drawStrengthMeterWithFrame: NSMakeRect(0, 0, 400, 50) resizing: StyleKitResizingBehaviorAspectFit strengthColor: strengthColor strength: strength size: size];
}

+ (void)drawStrengthMeterWithFrame: (NSRect)targetFrame resizing: (StyleKitResizingBehavior)resizing strengthColor: (NSColor*)strengthColor strength: (CGFloat)strength size: (NSSize)size
{
    //// General Declarations
    CGContextRef context = (CGContextRef)NSGraphicsContext.currentContext.graphicsPort;
    
    //// Resize to Target Frame
    [NSGraphicsContext saveGraphicsState];
    NSRect resizedFrame = StyleKitResizingBehaviorApply(resizing, NSMakeRect(0, 0, 400, 50), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 400, resizedFrame.size.height / 50);
    CGFloat resizedShadowScale = MIN(resizedFrame.size.width / 400, resizedFrame.size.height / 50);


    //// Color Declarations
    NSColor* transparent = [NSColor colorWithRed: 1 green: 1 blue: 1 alpha: 0];

    //// Shadow Declarations
    NSShadow* meterShadow = [[NSShadow alloc] init];
    meterShadow.shadowColor = [NSColor.blackColor colorWithAlphaComponent: 0.12];
    meterShadow.shadowOffset = NSMakeSize(0, 0);
    meterShadow.shadowBlurRadius = 37;

    //// Background Drawing
    NSBezierPath* backgroundPath = [NSBezierPath bezierPathWithRect: NSMakeRect(0, 0, size.width, size.height)];
    [transparent setFill];
    [backgroundPath fill];

    ////// Background Inner Shadow
    [NSGraphicsContext saveGraphicsState];
    NSRectClip(backgroundPath.bounds);
    CGContextSetShadowWithColor(context, NSZeroSize, 0, NULL);

    CGContextSetAlpha(context, meterShadow.shadowColor.alphaComponent);
    CGContextBeginTransparencyLayer(context, NULL);
    {
        NSShadow* opaqueShadow = [[NSShadow alloc] init];
        opaqueShadow.shadowColor = [meterShadow.shadowColor colorWithAlphaComponent: 1];
        opaqueShadow.shadowOffset = NSMakeSize(meterShadow.shadowOffset.width * resizedShadowScale, meterShadow.shadowOffset.height * resizedShadowScale);
        opaqueShadow.shadowBlurRadius = meterShadow.shadowBlurRadius * resizedShadowScale;
        [opaqueShadow set];

        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow.shadowColor setFill];
        [backgroundPath fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    [NSGraphicsContext restoreGraphicsState];



    //// Strength Level Drawing
    [NSGraphicsContext saveGraphicsState];
    CGContextScaleCTM(context, strength, 1);

    NSBezierPath* strengthLevelPath = [NSBezierPath bezierPathWithRect: NSMakeRect(0, 0, size.width, size.height)];
    [strengthColor setFill];
    [strengthLevelPath fill];

    [NSGraphicsContext restoreGraphicsState];
    
    [NSGraphicsContext restoreGraphicsState];

}

+ (void)drawPreferencesButton
{
    //// Color Declarations
    NSColor* strokeColor = [NSColor colorWithRed: 0.309 green: 0.68 blue: 0.982 alpha: 1];

    //// Bezier Drawing
    NSBezierPath* bezierPath = [NSBezierPath bezierPath];
    [bezierPath moveToPoint: NSMakePoint(21, 13.67)];
    [bezierPath curveToPoint: NSMakePoint(13.67, 21) controlPoint1: NSMakePoint(16.95, 13.67) controlPoint2: NSMakePoint(13.67, 16.95)];
    [bezierPath curveToPoint: NSMakePoint(21, 28.33) controlPoint1: NSMakePoint(13.67, 25.05) controlPoint2: NSMakePoint(16.95, 28.33)];
    [bezierPath curveToPoint: NSMakePoint(28.33, 21) controlPoint1: NSMakePoint(25.05, 28.33) controlPoint2: NSMakePoint(28.33, 25.05)];
    [bezierPath curveToPoint: NSMakePoint(21, 13.67) controlPoint1: NSMakePoint(28.33, 16.95) controlPoint2: NSMakePoint(25.05, 13.67)];
    [bezierPath closePath];
    [bezierPath moveToPoint: NSMakePoint(40, 18.16)];
    [bezierPath curveToPoint: NSMakePoint(40.5, 18.9) controlPoint1: NSMakePoint(40.27, 18.27) controlPoint2: NSMakePoint(40.5, 18.6)];
    [bezierPath lineToPoint: NSMakePoint(40.5, 23.1)];
    [bezierPath curveToPoint: NSMakePoint(40, 23.84) controlPoint1: NSMakePoint(40.5, 23.4) controlPoint2: NSMakePoint(40.27, 23.73)];
    [bezierPath lineToPoint: NSMakePoint(36.16, 25.38)];
    [bezierPath curveToPoint: NSMakePoint(35.48, 26.09) controlPoint1: NSMakePoint(35.88, 25.49) controlPoint2: NSMakePoint(35.58, 25.81)];
    [bezierPath lineToPoint: NSMakePoint(34.83, 27.64)];
    [bezierPath curveToPoint: NSMakePoint(34.81, 28.62) controlPoint1: NSMakePoint(34.71, 27.91) controlPoint2: NSMakePoint(34.7, 28.35)];
    [bezierPath lineToPoint: NSMakePoint(36.44, 32.43)];
    [bezierPath curveToPoint: NSMakePoint(36.27, 33.3) controlPoint1: NSMakePoint(36.56, 32.7) controlPoint2: NSMakePoint(36.48, 33.09)];
    [bezierPath lineToPoint: NSMakePoint(33.3, 36.27)];
    [bezierPath curveToPoint: NSMakePoint(32.43, 36.44) controlPoint1: NSMakePoint(33.09, 36.48) controlPoint2: NSMakePoint(32.7, 36.56)];
    [bezierPath lineToPoint: NSMakePoint(28.62, 34.81)];
    [bezierPath curveToPoint: NSMakePoint(27.64, 34.83) controlPoint1: NSMakePoint(28.35, 34.7) controlPoint2: NSMakePoint(27.91, 34.71)];
    [bezierPath lineToPoint: NSMakePoint(26.09, 35.48)];
    [bezierPath curveToPoint: NSMakePoint(25.38, 36.16) controlPoint1: NSMakePoint(25.81, 35.58) controlPoint2: NSMakePoint(25.49, 35.88)];
    [bezierPath lineToPoint: NSMakePoint(23.84, 40)];
    [bezierPath curveToPoint: NSMakePoint(23.1, 40.5) controlPoint1: NSMakePoint(23.73, 40.27) controlPoint2: NSMakePoint(23.4, 40.5)];
    [bezierPath lineToPoint: NSMakePoint(18.9, 40.5)];
    [bezierPath curveToPoint: NSMakePoint(18.16, 40) controlPoint1: NSMakePoint(18.6, 40.5) controlPoint2: NSMakePoint(18.27, 40.27)];
    [bezierPath lineToPoint: NSMakePoint(16.62, 36.16)];
    [bezierPath curveToPoint: NSMakePoint(15.91, 35.48) controlPoint1: NSMakePoint(16.51, 35.88) controlPoint2: NSMakePoint(16.19, 35.58)];
    [bezierPath lineToPoint: NSMakePoint(14.36, 34.83)];
    [bezierPath curveToPoint: NSMakePoint(13.38, 34.81) controlPoint1: NSMakePoint(14.09, 34.71) controlPoint2: NSMakePoint(13.65, 34.7)];
    [bezierPath lineToPoint: NSMakePoint(9.57, 36.44)];
    [bezierPath curveToPoint: NSMakePoint(8.7, 36.27) controlPoint1: NSMakePoint(9.3, 36.56) controlPoint2: NSMakePoint(8.91, 36.48)];
    [bezierPath lineToPoint: NSMakePoint(5.73, 33.3)];
    [bezierPath curveToPoint: NSMakePoint(5.56, 32.43) controlPoint1: NSMakePoint(5.52, 33.09) controlPoint2: NSMakePoint(5.44, 32.7)];
    [bezierPath lineToPoint: NSMakePoint(7.19, 28.62)];
    [bezierPath curveToPoint: NSMakePoint(7.17, 27.64) controlPoint1: NSMakePoint(7.3, 28.35) controlPoint2: NSMakePoint(7.29, 27.91)];
    [bezierPath lineToPoint: NSMakePoint(6.52, 26.09)];
    [bezierPath curveToPoint: NSMakePoint(5.84, 25.38) controlPoint1: NSMakePoint(6.42, 25.81) controlPoint2: NSMakePoint(6.12, 25.49)];
    [bezierPath lineToPoint: NSMakePoint(2, 23.84)];
    [bezierPath curveToPoint: NSMakePoint(1.5, 23.1) controlPoint1: NSMakePoint(1.73, 23.73) controlPoint2: NSMakePoint(1.5, 23.4)];
    [bezierPath lineToPoint: NSMakePoint(1.5, 18.9)];
    [bezierPath curveToPoint: NSMakePoint(2, 18.16) controlPoint1: NSMakePoint(1.5, 18.6) controlPoint2: NSMakePoint(1.73, 18.27)];
    [bezierPath lineToPoint: NSMakePoint(5.84, 16.62)];
    [bezierPath curveToPoint: NSMakePoint(6.52, 15.91) controlPoint1: NSMakePoint(6.12, 16.51) controlPoint2: NSMakePoint(6.42, 16.19)];
    [bezierPath lineToPoint: NSMakePoint(7.17, 14.36)];
    [bezierPath curveToPoint: NSMakePoint(7.19, 13.38) controlPoint1: NSMakePoint(7.29, 14.09) controlPoint2: NSMakePoint(7.3, 13.65)];
    [bezierPath lineToPoint: NSMakePoint(5.56, 9.57)];
    [bezierPath curveToPoint: NSMakePoint(5.73, 8.7) controlPoint1: NSMakePoint(5.44, 9.3) controlPoint2: NSMakePoint(5.52, 8.91)];
    [bezierPath lineToPoint: NSMakePoint(8.7, 5.73)];
    [bezierPath curveToPoint: NSMakePoint(9.57, 5.56) controlPoint1: NSMakePoint(8.91, 5.52) controlPoint2: NSMakePoint(9.3, 5.44)];
    [bezierPath lineToPoint: NSMakePoint(13.38, 7.19)];
    [bezierPath curveToPoint: NSMakePoint(14.36, 7.17) controlPoint1: NSMakePoint(13.65, 7.3) controlPoint2: NSMakePoint(14.09, 7.29)];
    [bezierPath lineToPoint: NSMakePoint(15.91, 6.52)];
    [bezierPath curveToPoint: NSMakePoint(16.62, 5.84) controlPoint1: NSMakePoint(16.19, 6.42) controlPoint2: NSMakePoint(16.51, 6.12)];
    [bezierPath lineToPoint: NSMakePoint(18.16, 2)];
    [bezierPath curveToPoint: NSMakePoint(18.9, 1.5) controlPoint1: NSMakePoint(18.27, 1.73) controlPoint2: NSMakePoint(18.6, 1.5)];
    [bezierPath lineToPoint: NSMakePoint(23.1, 1.5)];
    [bezierPath curveToPoint: NSMakePoint(23.84, 2) controlPoint1: NSMakePoint(23.4, 1.5) controlPoint2: NSMakePoint(23.73, 1.73)];
    [bezierPath lineToPoint: NSMakePoint(25.38, 5.84)];
    [bezierPath curveToPoint: NSMakePoint(26.09, 6.52) controlPoint1: NSMakePoint(25.49, 6.12) controlPoint2: NSMakePoint(25.81, 6.42)];
    [bezierPath lineToPoint: NSMakePoint(27.64, 7.17)];
    [bezierPath curveToPoint: NSMakePoint(28.62, 7.19) controlPoint1: NSMakePoint(27.91, 7.29) controlPoint2: NSMakePoint(28.35, 7.3)];
    [bezierPath lineToPoint: NSMakePoint(32.43, 5.56)];
    [bezierPath curveToPoint: NSMakePoint(33.3, 5.73) controlPoint1: NSMakePoint(32.7, 5.44) controlPoint2: NSMakePoint(33.09, 5.52)];
    [bezierPath lineToPoint: NSMakePoint(36.27, 8.7)];
    [bezierPath curveToPoint: NSMakePoint(36.44, 9.57) controlPoint1: NSMakePoint(36.48, 8.91) controlPoint2: NSMakePoint(36.56, 9.3)];
    [bezierPath lineToPoint: NSMakePoint(34.81, 13.38)];
    [bezierPath curveToPoint: NSMakePoint(34.83, 14.36) controlPoint1: NSMakePoint(34.7, 13.65) controlPoint2: NSMakePoint(34.71, 14.09)];
    [bezierPath lineToPoint: NSMakePoint(35.48, 15.91)];
    [bezierPath curveToPoint: NSMakePoint(36.16, 16.62) controlPoint1: NSMakePoint(35.58, 16.19) controlPoint2: NSMakePoint(35.88, 16.51)];
    [bezierPath lineToPoint: NSMakePoint(40, 18.16)];
    [bezierPath closePath];
    [strokeColor setStroke];
    bezierPath.lineWidth = 2;
    [bezierPath stroke];
}

+ (void)drawMenuIcon
{

    //// Bezier Drawing
    NSBezierPath* bezierPath = [NSBezierPath bezierPath];
    [bezierPath moveToPoint: NSMakePoint(23.74, 10.34)];
    [bezierPath lineToPoint: NSMakePoint(16.84, 17.24)];
    [bezierPath curveToPoint: NSMakePoint(17.54, 19.18) controlPoint1: NSMakePoint(17.21, 17.86) controlPoint2: NSMakePoint(17.44, 18.52)];
    [bezierPath curveToPoint: NSMakePoint(17.58, 19.41) controlPoint1: NSMakePoint(17.56, 19.26) controlPoint2: NSMakePoint(17.57, 19.34)];
    [bezierPath curveToPoint: NSMakePoint(17.58, 19.47) controlPoint1: NSMakePoint(17.58, 19.43) controlPoint2: NSMakePoint(17.58, 19.45)];
    [bezierPath curveToPoint: NSMakePoint(17.37, 21.37) controlPoint1: NSMakePoint(17.64, 20.13) controlPoint2: NSMakePoint(17.57, 20.78)];
    [bezierPath curveToPoint: NSMakePoint(16.45, 22.84) controlPoint1: NSMakePoint(17.18, 21.92) controlPoint2: NSMakePoint(16.87, 22.42)];
    [bezierPath curveToPoint: NSMakePoint(12.86, 23.95) controlPoint1: NSMakePoint(15.51, 23.78) controlPoint2: NSMakePoint(14.2, 24.14)];
    [bezierPath curveToPoint: NSMakePoint(9.68, 22.32) controlPoint1: NSMakePoint(11.74, 23.8) controlPoint2: NSMakePoint(10.6, 23.25)];
    [bezierPath curveToPoint: NSMakePoint(8.07, 17.69) controlPoint1: NSMakePoint(8.35, 21) controlPoint2: NSMakePoint(7.8, 19.23)];
    [bezierPath curveToPoint: NSMakePoint(9.16, 15.55) controlPoint1: NSMakePoint(8.2, 16.89) controlPoint2: NSMakePoint(8.57, 16.14)];
    [bezierPath curveToPoint: NSMakePoint(9.36, 15.36) controlPoint1: NSMakePoint(9.22, 15.49) controlPoint2: NSMakePoint(9.29, 15.42)];
    [bezierPath curveToPoint: NSMakePoint(12.47, 14.41) controlPoint1: NSMakePoint(10.21, 14.63) controlPoint2: NSMakePoint(11.33, 14.32)];
    [bezierPath curveToPoint: NSMakePoint(14.06, 14.81) controlPoint1: NSMakePoint(13, 14.46) controlPoint2: NSMakePoint(13.54, 14.59)];
    [bezierPath lineToPoint: NSMakePoint(14.36, 14.51)];
    [bezierPath curveToPoint: NSMakePoint(14.36, 13.47) controlPoint1: NSMakePoint(14.36, 14.51) controlPoint2: NSMakePoint(13.84, 13.99)];
    [bezierPath curveToPoint: NSMakePoint(15.41, 13.47) controlPoint1: NSMakePoint(14.89, 12.95) controlPoint2: NSMakePoint(15.41, 13.47)];
    [bezierPath lineToPoint: NSMakePoint(15.93, 13.99)];
    [bezierPath lineToPoint: NSMakePoint(17.75, 12.17)];
    [bezierPath lineToPoint: NSMakePoint(18.79, 12.17)];
    [bezierPath lineToPoint: NSMakePoint(19.05, 11.91)];
    [bezierPath lineToPoint: NSMakePoint(19.05, 10.86)];
    [bezierPath lineToPoint: NSMakePoint(21.14, 8.78)];
    [bezierPath lineToPoint: NSMakePoint(21.66, 8.78)];
    [bezierPath lineToPoint: NSMakePoint(22.44, 8)];
    [bezierPath lineToPoint: NSMakePoint(24, 8)];
    [bezierPath lineToPoint: NSMakePoint(23.74, 10.34)];
    [bezierPath closePath];
    [bezierPath moveToPoint: NSMakePoint(11.22, 20.78)];
    [bezierPath curveToPoint: NSMakePoint(12.78, 20.78) controlPoint1: NSMakePoint(11.65, 21.21) controlPoint2: NSMakePoint(12.35, 21.21)];
    [bezierPath curveToPoint: NSMakePoint(12.78, 19.22) controlPoint1: NSMakePoint(13.21, 20.35) controlPoint2: NSMakePoint(13.21, 19.65)];
    [bezierPath curveToPoint: NSMakePoint(11.22, 19.22) controlPoint1: NSMakePoint(12.35, 18.79) controlPoint2: NSMakePoint(11.65, 18.79)];
    [bezierPath curveToPoint: NSMakePoint(11.22, 20.78) controlPoint1: NSMakePoint(10.79, 19.65) controlPoint2: NSMakePoint(10.79, 20.35)];
    [bezierPath closePath];
    [NSColor.blackColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];
}

+ (void)drawStrengthBoxWithStrengthColor: (NSColor*)strengthColor
{

    //// Rectangle Drawing
    NSBezierPath* rectanglePath = [NSBezierPath bezierPathWithRect: NSMakeRect(0, 0, 22, 22)];
    [strengthColor setFill];
    [rectanglePath fill];
}

#pragma mark Generated Images

+ (NSImage*)imageOfPreferencesButton
{
    if (_imageOfPreferencesButton)
        return _imageOfPreferencesButton;

    _imageOfPreferencesButton = [NSImage imageWithSize: NSMakeSize(42, 42) flipped: NO drawingHandler: ^(__unused NSRect dstRect)
    {
        [StyleKit drawPreferencesButton];

        return YES;
    }];

    return _imageOfPreferencesButton;
}

+ (NSImage*)imageOfMenuIcon
{
    if (_imageOfMenuIcon)
        return _imageOfMenuIcon;

    _imageOfMenuIcon = [NSImage imageWithSize: NSMakeSize(32, 32) flipped: NO drawingHandler: ^(__unused NSRect dstRect)
    {
        [StyleKit drawMenuIcon];

        return YES;
    }];

    return _imageOfMenuIcon;
}

@end



NSRect StyleKitResizingBehaviorApply(StyleKitResizingBehavior behavior, NSRect rect, NSRect target)
{
    if (NSEqualRects(rect, target) || NSEqualRects(target, NSZeroRect))
        return rect;

    NSSize scales = NSZeroSize;
    scales.width = ABS(target.size.width / rect.size.width);
    scales.height = ABS(target.size.height / rect.size.height);

    switch (behavior)
    {
        case StyleKitResizingBehaviorAspectFit:
        {
            scales.width = MIN(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case StyleKitResizingBehaviorAspectFill:
        {
            scales.width = MAX(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case StyleKitResizingBehaviorStretch:
            break;
        case StyleKitResizingBehaviorCenter:
        {
            scales.width = 1;
            scales.height = 1;
            break;
        }
    }

    NSRect result = CGRectStandardize(rect);
    result.size.width *= scales.width;
    result.size.height *= scales.height;
    result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
    result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
    return result;
}
